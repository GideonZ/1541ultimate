; Soft registers

Offset_Command           = 0
Offset_Command_DevEP     = 1
Offset_Command_Length    = 2
Offset_Command_MaxTrans  = 3
Offset_Command_Interval  = 4
Offset_Command_LastFrame = 5
Offset_Command_SplitCtl  = 6
Offset_Command_Result    = 7
Offset_Command_MemLo     = 8
Offset_Command_MemHi     = 9
Offset_Command_Started   = 10
Offset_Command_Timeout   = 11

PipeSize = 12

; Max number of pipes = 8: 8x12 = $60
NUM_PIPES = 8
Pipes    = 0x300
; PipesEnd = 0x360 ; Unfortunately we don't have expressions in the parser

attrib_fifo     = 0x380 ; 16 entries (up to 38F)

RAM_STATUS      = $3E6

Simulation      = $3EB
DO_SUSPEND      = $3EC
DO_RESET        = $3ED
LinkSpeed       = $3EE

tail_pointer_atr = 0x3F8 ; updated by software only
head_pointer_atr = 0x3F9 ; updated by nano only 

Descriptor     = 0x3FC
_reset_temp    = 0x3FD
temp           = 0x3FE
fifo_temp_addr = 0x3FF

; Read registers
FILTERED_STAT_1 = $39
FRAME_COUNTER   = $3B
FRAME_TICK      = $3C ; clear on write
MEM_CTRL_READY  = $3D
DISCONNECTED    = $3E ; clear on write
STATUS          = $3F

; Write registers
SPEED                = $26

SET_DO_CHIRP         = $20
SET_CHIRP_LEVEL      = $21
SET_SOF_ENABLE       = $27
SEND_INTERRUPT       = $28
CLR_DO_CHIRP         = $30
CLR_CHIRP_LEVEL      = $31
CLR_SOF_ENABLE       = $37

PULSE_WAKEUP         = $25
PULSE_RESET_FILTER   = $29

; Command interface to USB sequencer
CMD_REQUEST          = $60
CMD_DATA_BUFFER_CTRL = $61
CMD_DEVICE_ENDPOINT  = $62
CMD_SPLIT_CONTROL    = $63
CMD_RESPONSE         = $64

CMD_REQ_MEMREAD      = $8000
CMD_REQ_MEMWRITE     = $4000
CMD_TOGGLE_BIT       = $0800
CMD_TOGGLE_BIT_NOT   = $F7FF
CMD_REQ_PAUSED       = $0200
CMD_REQ_NOT_PAUSED   = $FDFF
CMD_REQ_DO_DATA      = $0040
CMD_REQ_NOT_DO_DATA  = $FFBF
CMD_REQ_POWER_OFF	 = $0003

CMD_BUF_NODATA       = $2000

CMD_RES_DATA         = $0000
CMD_RES_ACK          = $1000
CMD_RES_NAK          = $2000
CMD_RES_NYET         = $3000
CMD_RES_STALL        = $4000
CMD_RES_ERROR        = $5000
CMD_RES_MASK         = $7000
CMD_RES_NO_DATA      = $0400
CMD_RES_LEN_MASK     = $03FF

SPLIT_COMPLETE       = $0080
SPLIT_COMPLETE_NOT   = $FF7F

; Command interface to Memory Controller
MEM_ADDR_LO          = $70
MEM_ADDR_HI          = $71
MEM_TRANSFER_WRITE   = $72
MEM_TRANSFER_READ    = $73
MEM_BUFFER_INDEX     = $74

; Ulpi registers
ULPI_REG_READ_0      = $80
ULPI_REG_WRITE_0     = $C0
ULPI_R_IRQ_STATUS  = $93
ULPI_W_FUNC_CTRL   = $C4
ULPI_R_FUNC_CTRL   = $84
ULPI_W_OTG_CONTROL = $CA
ULPI_W_SCRATCH     = $D6
ULPI_R_SCRATCH     = $96
ULPI_R_VENDOR      = $80
ULPI_R_PRODUCT_LOW = $82

begin
    LOAD  Simulation
    BNE   startsim
    
    ; turn off power first
    LOAD  #$06
    OUTP  ULPI_W_OTG_CONTROL

    LOAD  #$65
    OUTP  ULPI_W_FUNC_CTRL      ; reset then go to FS

    INP   ULPI_R_PRODUCT_LOW
    CMP   #$06
    BEQ   _no_power

    LOAD  #0
    STORE RAM_STATUS
    OUTP  CLR_SOF_ENABLE

start
    ; Turn off power and apply discharge
    LOAD  #$0E
    OUTP  ULPI_W_OTG_CONTROL
;    BRA   _no_power
    
_startup_power_check    
    INP   ULPI_R_IRQ_STATUS
    AND   #6
    BEQ   _no_power
    ; power detected. Wait to see if discharging helps the power to disappear
    LOAD  #4000
    CALL  delay
    INP   ULPI_R_IRQ_STATUS
    AND   #2
    BEQ   _no_power

    ; still power detected, we should NOT turn on our power
    LOAD  #$06
    OUTP  ULPI_W_OTG_CONTROL
    BRA   _start2

_no_power
    LOAD  #$66
    OUTP  ULPI_W_OTG_CONTROL  ; turn on our power

_start2
    ; initialize our function control in FS mode
    LOAD  #$45
    OUTP  ULPI_W_FUNC_CTRL

    ; wait 700 ms for the power to get stable and all. a loop to check when the power is stable might be good here
    LOAD  ResetDelay
    CALL  delay
    
    ; now lets see if we can detect that there is a device already attached
    INP   STATUS
    AND   #3
    BNE   _device_detected ; one of the bits is '1', so someone is pulling it up

    LOAD  #0
    STORE RAM_STATUS
    
_wait_for_device_attachment
    INP   STATUS
    AND   #3
    BEQ   _wait_for_device_attachment
    BRA   _start2

_device_detected
    SUB   #1
    XOR   #1
    OUTP  SPEED
    OUTP  DISCONNECTED
    LOAD  #1
    STORE RAM_STATUS
	CALL  status_irq
;    OUTP  SET_CONNECTED
    
_waiting_for_reset
    LOAD  DO_RESET
    BNE   do_reset
    CALL  check_disconnect
    BEQ   _waiting_for_reset
_disconnected
	CALL  status_irq
    BRA   _start2
    
do_reset
    ; there is a device present. Let's reset it
    LOAD  #0
    STORE DO_RESET
    STORE RAM_STATUS
    CALL  bus_reset
    LOAD  #3 ; cannot come without connected
    STORE RAM_STATUS
    OUTP  SET_SOF_ENABLE
    LOAD  #2
    CALL  delay
    OUTP  DISCONNECTED
    BRA   main_loop

delay
    STORE DelayTimer
_delay
    CALL  loop_timer
    LOAD  DelayTimer
    SUB   #1
    STORE DelayTimer
    BNE   _delay
    RET    
    

check_disconnect
    INP   DISCONNECTED
    BPL   _no_disconnect
    OUTP  DISCONNECTED
    STORE RAM_STATUS
    OUTP  CLR_SOF_ENABLE
_no_disconnect
    RET

startsim
    INP   ULPI_R_PRODUCT_LOW
    LOAD  #$66
    OUTP  ULPI_W_OTG_CONTROL  ; turn on our power
    LOAD  #$45
    OUTP  ULPI_W_FUNC_CTRL
    LOAD LinkSpeed
    OUTP SPEED
    OUTP  SET_SOF_ENABLE
    ; fall through into main loop
    
main_loop
    CALL  check_disconnect
    BNE   _disconnected
    LOAD  DO_RESET
    BNE   do_reset
    LOAD  DO_SUSPEND
    BNE   do_suspend
    CALL  check_pipes
    BRA   main_loop

do_suspend
    LOAD  RAM_STATUS
    OR    #4
    STORE RAM_STATUS
    OUTP  CLR_SOF_ENABLE

; Set PHY in the right suspend state
    LOAD  LinkSpeed
    AND   #3
    ADD   #LinkRegisterMapSuspended
    STORE _reset_temp
    LOADI _reset_temp,0
    OUTP  ULPI_W_FUNC_CTRL

    LOAD  LinkSpeed
    CMP   #2
    BNE   suspend_loop
    LOAD  #1
    OUTP  SPEED  ; When we set the speed to 1 (HS), a different disconnect mechanism is selected.

    LOAD  #4000
    STORE _reset_temp
_do_suspend_1
    LOAD  _reset_temp
    BEQ   _device_suspended ; timeout, recovery will take place due to the fact that we think the device is disconnected
    SUB   #1
    STORE _reset_temp
    INP   STATUS
    AND   #3
    BNE   _device_suspended
    CALL  loop_timer
    BRA   _do_suspend_1

_device_suspended
    OUTP  DISCONNECTED
    
suspend_loop
    CALL  check_disconnect
    BNE   _start2
    LOAD  DO_RESET
    BNE   do_reset
    LOAD  DO_SUSPEND
    BEQ   do_unsuspend

_chk_remote_wakekup
    LOAD  LinkSpeed
    BNE   _chk_remote_wakeup_fs

_chk_remote_wakeup_ls
    INP   STATUS
    AND   #$03
    CMP   #1
    BNE   suspend_loop
    CALL  loop_timer
    INP   STATUS ; double check
    AND   #$03
    CMP   #1
    BNE   suspend_loop
    BRA   do_wakeup

_chk_remote_wakeup_fs
    INP   STATUS
    AND   #$03
    CMP   #2
    BNE   suspend_loop
    CALL  loop_timer
    INP   STATUS ; double check
    AND   #$03
    CMP   #2
    BNE   suspend_loop

do_wakeup
    OUTP  PULSE_WAKEUP
    
do_unsuspend
    OUTP  CLR_CHIRP_LEVEL
    ; Send K
    OUTP  SET_DO_CHIRP
    LOAD  #160
    CALL  delay
    OUTP  CLR_DO_CHIRP
    CALL  _reset_end     ; set the mode register correctly (this also resets the SPEED register to 2 for HS)
    LOAD  #32
_do_unsuspend_1
    SUB   #1
    BPL   _do_unsuspend_1
    OUTP  SET_SOF_ENABLE
    CALL  loop_timer
    CALL  loop_timer
    LOAD  RAM_STATUS
    AND   #$FFFB
    STORE RAM_STATUS
    BRA   main_loop
    
; The following code issues a reset, and tries to get the device in high speed mode

bus_reset
    ; first we check the current status of the bus power.
;    INP   STATUS
;    AND   #$38 ; 3C
;    CMP   #$08 ; 0C
;    BEQ   _reset_chk_ls
;    LOAD  #3
;    STORE LinkSpeed
;    BRA _reset_end
;
_reset_chk_ls
    INP   STATUS
    AND   #$02
    BEQ   _reset_fs
    LOAD  #0
    STORE LinkSpeed
    BRA   _do_reset
_reset_fs
    LOAD  #1
    STORE LinkSpeed

_do_reset
; now we set up the ULPI register to output single ended zero.
    LOAD  #$50
    OUTP  ULPI_W_FUNC_CTRL

    LOAD  #120
    STORE ResetTimer
    OUTP  PULSE_RESET_FILTER
    OUTP  FILTERED_STAT_1
    
    LOAD  LinkSpeed
    BEQ   _reset_simple

_reset_1
    INP   FILTERED_STAT_1
    BMI   _reset_chirp_heard
    CALL  loop_timer
    LOAD  ResetTimer
    SUB   #1
    STORE ResetTimer
    BNE   _reset_1
_reset_end
    LOAD  LinkSpeed
    OUTP  SPEED
    AND   #3
    ADD   #LinkRegisterMap
    STORE _reset_temp
    LOADI _reset_temp,0
    OUTP  ULPI_W_FUNC_CTRL
    OUTP  DISCONNECTED
    RET
_reset_chirp_heard    
    LOAD  #2
    STORE LinkSpeed
    ; Just go ahead and send our chirp back
    OUTP  CLR_CHIRP_LEVEL
    OUTP  SET_DO_CHIRP
    LOAD  NumberOfChirps
    STORE ResetTimer
_chirp_loop
    OUTP  CLR_CHIRP_LEVEL
    LOAD  #750
_chirp_k
    SUB   #1
    BNE   _chirp_k
    LOAD  ResetTimer
    SUB   #1
    STORE ResetTimer
    BEQ   _chirps_done
    OUTP  SET_CHIRP_LEVEL
    LOAD  #750
_chirp_j
    SUB   #1
    BNE   _chirp_j
    BRA   _chirp_loop
; done chirping
_chirps_done
    OUTP  CLR_DO_CHIRP
    LOAD  #3
    STORE ResetTimer
_reset_simple
    CALL  loop_timer
    LOAD  ResetTimer
    SUB   #1
    STORE ResetTimer
    BNE   _reset_simple
    BRA   _reset_end

loop_timer
    LOAD  #1873
_loop_timer_1
    SUB   #1
    BPL   _loop_timer_1
    RET

ResetTimer
DelayTimer
    .dw 0

LinkRegisterMap
    .dw $46
    .dw $45
    .dw $40
    .dw $50

LinkRegisterMapSuspended
    .dw $56
    .dw $55
    .dw $55
    .dw $50

ResetDelay
    .dw 5601
NumberOfChirps
    .dw 75


is_ssplit_needed
    LOADI Descriptor,Offset_Command_SplitCtl
    BEQ   _answer_no
    AND   #SPLIT_COMPLETE
    BNE   _answer_no
_answer_yes
    LOAD  #0
    RET
_answer_no
    LOAD  #1
    RET        
    
is_ssplit_allowed
    LOAD  TransactionTranslatorBusy
    BNE   _answer_no   

    INP   FRAME_COUNTER
    AND   #7
    CMP   #5
    BPL   _answer_no
    BRA   _answer_yes
    
issue_ssplit
    LOAD  Descriptor
    STORE TransactionTranslatorBusy
    LOADI Descriptor,Offset_Command_SplitCtl
    OUTP  CMD_SPLIT_CONTROL
    LOADI Descriptor,Offset_Command
    OUTP  CMD_REQUEST ; Do it!!
    INP   FRAME_COUNTER
    STORE LastStartSplit
    RET
        
reset_split
    LOADI Descriptor,Offset_Command_SplitCtl
    AND   #SPLIT_COMPLETE_NOT
    STORI Descriptor,Offset_Command_SplitCtl
    LOAD  #0
    STORE TransactionTranslatorBusy
    RET

_execute_cmd
    LOADI Descriptor,Offset_Command_Started
    BNE   _start_set
    INP   FRAME_COUNTER
    STORI Descriptor,Offset_Command_Started
_start_set    
    LOADI Descriptor,Offset_Command_DevEP
    OUTP  CMD_DEVICE_ENDPOINT
    LOADI Descriptor,Offset_Command_MemHi
    OUTP  MEM_ADDR_HI
    LOADI Descriptor,Offset_Command_MemLo
    OUTP  MEM_ADDR_LO

    LOAD  #3
    STORE AllowedErrors
    LOAD  #0
    STORE Transferred
    LOADI Descriptor,Offset_Command
    BMI   _out_command
		
_start_in
_next_in_chunk
    LOAD  CurrentBuffer
    OUTP  CMD_DATA_BUFFER_CTRL

    CALL  is_ssplit_needed
    BNE   _no_split_or_complete_in
    CALL  is_ssplit_allowed
    BNE   _leave_in
    
    CALL  issue_ssplit
_wait_in_cmd_ssplit
    INP   CMD_RESPONSE
    BPL   _wait_in_cmd_ssplit
    STORI Descriptor,Offset_Command_Result
    AND  #CMD_RES_MASK
    CMP  #CMD_RES_ACK
    BEQ  _ssplit_in_success
    ; We are allowed to reset the TT Busy flag right away
    ; Because we just issued a start split, which failed.
    LOAD  #0
    STORE TransactionTranslatorBusy
    BRA  _check_in_error

_ssplit_in_success
; ssplit got acked! yey! next time we will do complete split    
    LOADI Descriptor,Offset_Command_SplitCtl
    OR    #SPLIT_COMPLETE
    STORI Descriptor,Offset_Command_SplitCtl
; done for now 
    BRA  _leave_in
    
_no_split_or_complete_in
    LOADI Descriptor,Offset_Command_SplitCtl
    OUTP  CMD_SPLIT_CONTROL
    LOADI Descriptor,Offset_Command
    OUTP  CMD_REQUEST ; Do it!!
_wait_in_cmd
    INP   CMD_RESPONSE
    BPL   _wait_in_cmd
    STORE LastResult
    STORI Descriptor,Offset_Command_Result
    LOADI Descriptor,Offset_Command_SplitCtl
    BEQ   _hs_in_result

_fs_ls_in_result
    LOAD  LastResult
    AND   #CMD_RES_MASK
    CMP   #CMD_RES_NYET
    BEQ   _check_nyet_response_in
    ; Not a NYET. Then there is a valid response from the hub
    ; In case it was a split, make sure to reset it for next time back to SSPLIT
    
    CALL  reset_split
    
_hs_in_result
    LOAD  LastResult
    AND   #CMD_RES_MASK
    CMP   #CMD_RES_DATA
    BEQ   _in_success
    CMP   #CMD_RES_NAK
    BEQ   _leave_in
    CMP   #CMD_RES_STALL
    BEQ   _in_done
    CMP   #CMD_RES_ERROR
    BNE   _in_done ; I don't know how to handle this

_check_in_error
    LOAD  AllowedErrors
    BEQ   _in_done ; no more!
    SUB   #1
    STORE AllowedErrors
    BRA   _next_in_chunk ; Retry!

_check_nyet_response_in
    INP   FRAME_COUNTER    
    SUB   LastStartSplit
    CMP   #4
    BCS   _leave_in ;; try later

    CALL  reset_split
    BRA   _in_done

_in_success
    LOADI Descriptor,Offset_Command_Result
    AND   #CMD_RES_LEN_MASK
    STORE CurrentLength

_check_rx_toggle
    LOADI Descriptor,Offset_Command
    XOR   LastResult
    AND   #CMD_TOGGLE_BIT
    BEQ   _toggle_ok
    LOAD  #0
    STORE CurrentLength
	BRA   _toggle_error
	
_toggle_ok
    LOADI Descriptor,Offset_Command
    AND   #CMD_REQ_MEMWRITE
    BEQ   _no_mem_write

_wait_mem2
    INP  MEM_CTRL_READY
    BPL  _wait_mem2

    LOAD  CurrentBuffer
    OUTP  MEM_BUFFER_INDEX
    LOAD  CurrentLength
    BEQ   _no_mem_write
    ADD   #3
    OUTP  MEM_TRANSFER_WRITE     

    LOAD  CurrentBuffer
    ADD   #$4000
    STORE CurrentBuffer

; Increment the address
    LOADI Descriptor,Offset_Command_MemLo
    ADD   CurrentLength
    STORI Descriptor,Offset_Command_MemLo
    LOADI Descriptor,Offset_Command_MemHi
    ADDC  #0
    STORI Descriptor,Offset_Command_MemHi

    LOAD  Transferred
    ADD   CurrentLength
    STORE Transferred
    
_no_mem_write
    LOADI Descriptor,Offset_Command
    XOR   #CMD_TOGGLE_BIT
    STORI Descriptor,Offset_Command

    LOADI Descriptor,Offset_Command_Length
    SUB   CurrentLength
    STORI Descriptor,Offset_Command_Length

_toggle_error
    LOADI Descriptor,Offset_Command_Length
    BEQ   _in_done
    BMI   _in_done
    LOADI Descriptor,Offset_Command_MaxTrans
    CMP   CurrentLength
    BEQ   _next_in_chunk
    
_in_done
    
    INP  MEM_CTRL_READY
    BPL  _in_done
    ; Note that bit 15 is 1, so the return value is non-zero Report!
    RET
    
;; Exit point without report to the software
_leave_in
    LOAD  #0
    RET

do_mem_read
    LOADI Descriptor,Offset_Command_MemHi
    OUTP  MEM_ADDR_HI
    LOADI Descriptor,Offset_Command_MemLo
    OUTP  MEM_ADDR_LO
    AND   #3
    STORE Current_Word_Offset
    ;; reading always pre-increments the buffer
    LOAD  CurrentBuffer
    ADD   #$4000
    STORE CurrentBuffer
    OUTP  MEM_BUFFER_INDEX
determine_length
    LOADI Descriptor,Offset_Command_MaxTrans
    STORE MaxTrans
    LOADI Descriptor,Offset_Command_Length
    CMP   MaxTrans
    BMI  _no_truncate
    LOAD  MaxTrans
_no_truncate
    STORE CurrentLength
    ADD   Current_Word_Offset
    ADD   #3
    OUTP  MEM_TRANSFER_READ
    RET

set_out_buffer_params        
    LOAD  CurrentLength
    BNE   _has_data
    OR    #CMD_BUF_NODATA
_has_data
    OR    CurrentBuffer
    OUTP  CMD_DATA_BUFFER_CTRL
    RET
    
_out_command
    LOADI Descriptor,Offset_Command_SplitCtl
    BEQ   _hs_out_start

; full/low speed through HUB
    CALL  is_ssplit_needed
    BNE   _out_complete_split
    CALL  is_ssplit_allowed
    BNE   _leave_out
    
_out_with_split
    CALL  do_mem_read
    CALL  set_out_buffer_params
_wait_mem3
    INP  MEM_CTRL_READY
    BPL  _wait_mem3
    CALL  issue_ssplit

_wait_out_cmd_ssplit
    INP   CMD_RESPONSE
    BPL   _wait_out_cmd_ssplit
    STORI Descriptor,Offset_Command_Result
    AND   #CMD_RES_MASK
    CMP   #CMD_RES_ACK
    BEQ   _out_split_ok

    ; Not OK.. we cannot trust the SSPLIT
    CALL  reset_split
    BRA   _out_done ; exit, hub didn't accept out packet; bad boy!

    ; start split successful
_out_split_ok
    LOADI Descriptor,Offset_Command_SplitCtl    
    OR    #SPLIT_COMPLETE
    STORI Descriptor,Offset_Command_SplitCtl
    BRA   _leave_out ; we will try complete split later

_out_complete_split
    ; Of course, only if it is ours
    LOAD  TransactionTranslatorBusy
    CMP   Descriptor
    BNE   _leave_out
    
    LOADI Descriptor,Offset_Command_SplitCtl    
    OUTP  CMD_SPLIT_CONTROL
    LOADI Descriptor,Offset_Command
    AND   #CMD_REQ_NOT_DO_DATA
    OUTP  CMD_REQUEST

_wait_out_cmd_csplit
    INP   CMD_RESPONSE
    BPL   _wait_out_cmd_csplit
    STORE LastResult
    STORI Descriptor,Offset_Command_Result

    AND  #CMD_RES_MASK
    CMP  #CMD_RES_ERROR
    BEQ  _out_done
    CMP  #CMD_RES_ACK
    BEQ  _out_success_csplit
    CMP  #CMD_RES_NYET
    BEQ  _check_nyet_response_out
    CMP  #CMD_RES_NAK
    BEQ  _leave_out
    BRA  _out_done

_out_success_csplit
    CALL reset_split
    BRA  _out_success

_check_nyet_response_out
    INP   FRAME_COUNTER    
    SUB   LastStartSplit
    CMP   #4
    BCS   _leave_out ;; try later

    CALL  reset_split
    BRA   _out_done

_hs_out_start
    CALL  do_mem_read ; first time
    CALL  set_out_buffer_params
    LOAD  #0
    OUTP  CMD_SPLIT_CONTROL

_wait_mem1
    INP  MEM_CTRL_READY
    BPL  _wait_mem1

    LOADI Descriptor,Offset_Command
    OUTP  CMD_REQUEST ; Do it!!

_wait_out_cmd
    INP   CMD_RESPONSE
    BPL   _wait_out_cmd
    STORE LastResult
    STORI Descriptor,Offset_Command_Result

    AND  #CMD_RES_MASK
    CMP  #CMD_RES_ACK
    BEQ  _out_success
    CMP  #CMD_RES_NYET
    BEQ  _out_success
    CMP  #CMD_RES_NAK
    BEQ  _leave_out
    CMP  #CMD_RES_ERROR
    BRA  _out_done

_out_success
    LOADI Descriptor,Offset_Command
    XOR   #CMD_TOGGLE_BIT
    STORI Descriptor,Offset_Command

    LOADI Descriptor,Offset_Command_MemLo
    ADD   CurrentLength
    STORI Descriptor,Offset_Command_MemLo
    LOADI Descriptor,Offset_Command_MemHi
    ADDC  #0
    STORI Descriptor,Offset_Command_MemHi

    LOADI Descriptor,Offset_Command_Length
    SUB   CurrentLength
    STORI Descriptor,Offset_Command_Length

    BNE   _leave_out ; more to do! (Length != 0)

_out_done
    LOAD #1
    RET

_leave_out
    LOAD #0
    RET

    
; Pipe check loop
check_pipes
    LOAD  #Pipes
    STORE Descriptor
    LOAD  #0
    STORE PipeNumber
_chk_pipe
    LOADI Descriptor,Offset_Command
    BEQ   _nxt_pipe
    AND   #CMD_REQ_PAUSED
    BEQ   _valid_pipe
	
_nxt_pipe
    LOAD  Descriptor
    ADD   #PipeSize
    STORE Descriptor
    LOAD  PipeNumber
    ADD   #1
    STORE PipeNumber
    CMP   #NUM_PIPES
    BNE   _chk_pipe
_pipes_done
    RET
    
_valid_pipe
    ; check interval
    LOADI Descriptor,Offset_Command_Interval
    STORE Interval

    LOADI Descriptor,Offset_Command_LastFrame
    STORE LastFrame
    
    INP   FRAME_COUNTER
    SUB   LastFrame
    ;; accu now holds time since last
    CMP   Interval
    BCC   _nxt_pipe
    
_interval_ok
    CALL  attr_fifo_full
    BEQ   _nxt_pipe

    LOADI Descriptor,Offset_Command_MemHi
    BEQ   _nxt_pipe  ; invalid -> no memory address

    INP   FRAME_COUNTER
    STORI Descriptor,Offset_Command_LastFrame

    CALL  _execute_cmd
    BNE   _report  ; when 0, nothing to report 

    LOADI Descriptor,Offset_Command_Timeout
    BEQ   _nxt_pipe   ; No timeout set
    STORE Interval 
    LOADI Descriptor,Offset_Command_Started
    STORE LastFrame
    INP   FRAME_COUNTER
    SUB   LastFrame
    CMP   Interval
    BCC   _nxt_pipe   ; Timeout not reached        

_report

    ;; we set the pause bit, so that it will only occur once
    LOADI Descriptor,Offset_Command
    OR    #CMD_REQ_PAUSED
    STORI Descriptor,Offset_Command  ; We leave the command intact, to make sure we will expect the correct toggle next time

    ;; Let's send the host an interrupt
    LOAD  PipeNumber
    CALL  attr_fifo_push
    OUTP  SEND_INTERRUPT
    BRA   _nxt_pipe


; Buffer management:

; ATTRIBUTE FIFO
attr_fifo_full
    LOAD head_pointer_atr
    ADD  #1
    AND  #$0F
    XOR  tail_pointer_atr
    RET

attr_fifo_push
    STORE  fifo_temp_data
    LOAD   head_pointer_atr
    ADD    #attrib_fifo
    STORE  fifo_temp_addr
    LOAD   fifo_temp_data
    STORI  fifo_temp_addr,0
    LOAD   head_pointer_atr
    ADD    #1
    AND    #$0F
    STORE  head_pointer_atr
    RET
    
status_irq
	LOAD  #$FFFF
other_irq
	CALL  attr_fifo_push
    OUTP  SEND_INTERRUPT
	RET

fifo_temp_data
    .dw 0
AllowedErrors
    .dw 0
Transferred
    .dw 0
CurrentLength
    .dw 0
CurrentBuffer
    .dw 0
Current_Word_Offset
    .dw 0
LastFrame
    .dw 0
Interval
    .dw 0
PipeNumber
    .dw 0
TransactionTranslatorBusy
    .dw 0
LastStartSplit
    .dw 0
LastResult
    .dw 0
MaxTrans
    .dw 0
