# IEC processor code

Tv = 1475
Ts = 1475
Ttk = 200
Tda = 80
T0 = 80
T1 = 80
Tne = 40
Tye = 1000
Tbb = 90

; Control codes sent to software via FIFO
; $41 : Start of ATN
; $42 : End of ATN
; $43 : Ready to send (software can now push data to be sent in FIFO)
; $44 : Ready to receive (not sent to software)
; $45 : End of reception (OEI)
; $46 : Start of printer data
; $47 : Byte transmitted  (we need to know this, because our fifo can get flushed by ATN)

CTRL_ATN_BEGIN     = $41
CTRL_ATN_END       = $42
CTRL_READY_FOR_TX  = $43
CTRL_READY_FOR_RX  = $44
CTRL_EOI           = $45
CTRL_JIFFYLOAD     = $46
CTRL_BYTE_TXED     = $47
CTRL_TX_DONE       = $5a
CTRL_RX_DONE       = $5b

CTRL_DEV1          = $81
CTRL_DEV2          = $82
CTRL_DEV3          = $83

; $57 : Acknowledge WARP mode enabled
; $AD : End of WARP bloc reception (328 bytes)
; $AE : Timeout on WARP (never sent because subroutine never called)
; $DA : Start of WARP reception
; $DE : WARP reception failure

WARP_ACK           = $57
WARP_BLOCK_END     = $AD
WARP_TIMEOUT       = $AE
WARP_START_RX      = $DA
WARP_RX_ERROR      = $DE

; $E5 : Invalid control code received from software
; $E6 : No device, we are alone on IEC bus

ERROR_BAD_CTRLCODE = $E5
ERROR_NO_DEVICE    = $E6
ERROR_RX_TIMEOUT   = $E9

; Control codes received from software via FIFO
; $57 : Switch to WARP mode (from initial waiting state)
; $1D : Switch to MASTER mode to send ATN commands (from initial waiting state)

CMD_GO_WARP         = $57
CMD_TX_END          = $10
CMD_MASTER_TURNARND = $1A
CMD_MASTER_RELEASE  = $1B
CMD_MASTER_TX       = $1C
CMD_MASTER_START    = $1D

start
            JUMP reset_vec   # Must be at address 0
            JUMP atn_irq_vec # Must be at address 1

CHECK_ATN_BYTE
            IF NOT DATABYTE IS $5F THEN _dont_untalk
            SET ADDRESSED=1
            SET TALKER=0
            RET
_dont_untalk
            IF NOT DATABYTE IS $3F THEN _dont_unlisten
            SET ADDRESSED=1
            SET LISTENER=0
            RET
_dont_unlisten
_check_slot1
            IF NOT DATABYTE IS $F0 THEN _dont_talk1   # Replace for device ID #1 + $40, or RET, if no device.
            LOAD CTRL_DEV1
            PUSHC
            SET ADDRESSED=1
            SET TALKER=1
            SET LISTENER=0
            RET
_dont_talk1
            IF NOT DATABYTE IS $F8 THEN _dont_listen1 # Replace for device ID #1 + $20, or RET, if no device.
            LOAD CTRL_DEV1
            PUSHC
            SET ADDRESSED=1
            SET LISTENER=1
            SET TALKER=0
            RET
_dont_listen1
_check_slot2
            IF NOT DATABYTE IS $F1 THEN _dont_talk2   # Replace for device ID #2 + $40, or RET, if no device.
            LOAD CTRL_DEV2
            PUSHC
            SET ADDRESSED=1
            SET TALKER=1
            SET LISTENER=0
            RET
_dont_talk2
            IF NOT DATABYTE IS $F9 THEN _dont_listen2 # Replace for device ID #2 + $20, or RET, if no device.
            LOAD CTRL_DEV2
            PUSHC
            SET ADDRESSED=1
            SET LISTENER=1
            SET TALKER=0
            RET
_dont_listen2
_check_slot3
            IF NOT DATABYTE IS $F2 THEN _dont_talk3   # Replace for device ID #3 + $40, or RET, if no device.
            LOAD CTRL_DEV3
            PUSHC
            SET ADDRESSED=1
            SET TALKER=1
            SET LISTENER=0
            RET
_dont_talk3
            IF NOT DATABYTE IS $FA THEN _dont_listen3 # Replace for device ID #3 + $20, or RET, if no device.
            LOAD CTRL_DEV3
            PUSHC
            SET ADDRESSED=1
            SET LISTENER=1
            SET TALKER=0
_dont_listen3
            RET

atn_irq_vec
            CLRST
            SET IRQ_EN=1
            SET DATA=0 # not ready to receive
            SET CLK=1  # release clock
            SET JIFFYDOS=0      # JiffyDOS detection has to be done on each ATN
            SET ADDRESSED=0     # no one is addressed anymore on new ATN
            WAIT FOR 20 us
            WAIT UNTIL CLK=0  
            LOAD CTRL_ATN_BEGIN
            PUSHC

_atn_first
            WAIT UNTIL NOT CLK=0,ATN=0  # Possibly forever!
            IF ATN THEN _atn_end # Apparently there was no byte coming.
            SUB RECEIVE_ATN_BYTE # Releases data as soon as there is room in FIFO
            # PUSHD # Addressing byte is not required, as the check function already sends a slave select
            IF NOT ADDRESSED THEN _not_for_me

_atn_loop
            WAIT UNTIL NOT CLK=0,ATN=0  # Incomming byte or atn end
            IF ATN THEN _atn_end # Apparently there was no byte coming.
            SET JIFFYLOAD=0
            SUB RECEIVE_ATN_BYTE 
            IF NOT DATABYTE IS $61 THEN _no_jd_load
            IF NOT TALKER THEN _no_jd_load
            SET DATABIT0=0 # Reset to $60
            SET JIFFYLOAD=1
_no_jd_load
            PUSHD
            JUMP _atn_loop

_not_for_me
            SET DATA=1
            SET CLK=1
            WAIT UNTIL ATN=1
_atn_end
            LOAD CTRL_ATN_END
            PUSHC
            IF TALKER THEN ATN_TURNAROUND
            IF LISTENER THEN DO_LISTEN
            # We're neither talker, nor listener
            JUMP RELEASE

            # at some time, the computer will either
            # 1) want us to talk
            # 2) it wants to send another byte to us under attention
            # 3) it wants to send another byte without attention
            # In all cases, it will release the clock line


DO_LISTEN
            SUB RECEIVE_BYTE
            PUSHD
            IF NOT EOI THEN DO_LISTEN
_end_of_rx
            # If end flag was received, push end marker to software
            LOAD CTRL_EOI
            PUSHC
            SET LISTENER=0
            WAIT FOR 40 us
            JUMP RELEASE

ATN_TURNAROUND
            WAIT UNTIL CLK=1 FOR Ttk
            IF TIMEOUT THEN _error
            SET CLK=0
            SET DATA=1
            WAIT FOR Tda
            SET EOI=0
            IF JIFFYLOAD THEN DO_JIFFY_LOAD
            LOAD CTRL_READY_FOR_TX  # Tell to the software that it should push data
            PUSHC
            SUB TRANSMIT
_transmit_done
            LOAD CTRL_TX_DONE
            PUSHC
            JUMP RELEASE

DO_JIFFY_LOAD
            LOAD CTRL_JIFFYLOAD
            PUSHC
_jiffy_outer
            WAIT UNTIL DATA=1 # Host ready
            IF EOI THEN _jiffy_load_eoi
            READB # wait for data, also sets eoi if last
            IF EOI THEN _jiffy_load_eoi
            IF CTRL THEN _jiffy_load_eoi
            SET DATA=0
            WAIT FOR 12 us
            SET CLK=1
            WAIT FOR 77 us
_jiffy_inner
            POPB # Read byte is now popped from fifo
            SET DATA=1
            WAIT FOR 2 us # Rise time
            WAIT UNTIL DATA=0
            SUB _jiffy_tx_byte
# now, if EOI is set or there is no data in the fifo, we need to do inner loop end
            IF EOI THEN _jiffy_inner_end
            READ # see if there is a new byte in fifo
            IF NOT VALID THEN _jiffy_inner_end
            WAIT FOR 18 us # Test
            SET DATA=1
            SET CLK=1
            JUMP _jiffy_inner
_jiffy_inner_end
            SET CLK=0
            SET DATA=1
            WAIT FOR 35 us
            WAIT UNTIL DATA=0 # Host ack inner end
            JUMP _jiffy_outer

_jiffy_load_eoi
            WAIT FOR 80 us
            SET CLK=1
            WAIT FOR 150 us
            SET CLK=0
            LOAD CTRL_TX_DONE
            PUSHC
            WAIT UNTIL ATN=0
            JUMP RELEASE # Shouldn't happen due to interrupt

TRANSMIT
            READB
            IF NOT CTRL THEN _tx_data

            # A control byte is now on the fifo output
            POPB  # now actually consume the control byte
            IF DATABYTE IS CMD_TX_END THEN _tx_done
            LOAD ERROR_BAD_CTRLCODE
            PUSHC
            RET

_tx_data
            SUB TX_BYTE
            IF NOT EOI THEN TRANSMIT  # loop until everything was transmitted
_tx_done
            SET CLK=1 # After EOI, clock is released
            WAIT UNTIL DATA=1 FOR 1000 us
            RET

TX_BYTE
            IF JIFFYDOS THEN JIFFY_TX
            SET CLK=1
            WAIT UNTIL DATA=1  # forever possibly!
            IF NOT EOI THEN _no_tx_eoi
            WAIT FOR 100 us
            WAIT UNTIL DATA=0 FOR Tye
            IF TIMEOUT THEN _error
            SET CLK=0
            WAIT UNTIL DATA=1
_no_tx_eoi
            WAIT FOR Tne
            SET CLK=0
            SET DATA=REGBIT0
            WAIT FOR T0
            SET CLK=1
            WAIT FOR T1
            SET CLK=0
            SET DATA=REGBIT1
            WAIT FOR T0
            SET CLK=1
            WAIT FOR T1
            SET CLK=0
            SET DATA=REGBIT2
            WAIT FOR T0
            SET CLK=1
            WAIT FOR T1
            SET CLK=0
            SET DATA=REGBIT3
            WAIT FOR T0
            SET CLK=1
            WAIT FOR T1
            SET CLK=0
            SET DATA=REGBIT4
            WAIT FOR T0
            SET CLK=1
            WAIT FOR T1
            SET CLK=0
            SET DATA=REGBIT5
            WAIT FOR T0
            SET CLK=1
            WAIT FOR T1
            SET CLK=0
            SET DATA=REGBIT6
            WAIT FOR T0
            SET CLK=1
            WAIT FOR T1
            SET CLK=0
            SET DATA=REGBIT7
            WAIT FOR T0
            SET CLK=1
            WAIT FOR T1
            SET DATA=1
            SET CLK=0
            WAIT FOR 2 us  #otherwise we might still read our own latest data bit
            WAIT UNTIL DATA=0 FOR 1000 us
            IF TIMEOUT THEN _error
            POPB  # the byte was read into the register using READ. Now we actually POP the byte, because it has been acknowledged by the initiator
            LOAD CTRL_BYTE_TXED
            PUSHC
            WAIT FOR Tbb
            RET

JIFFY_TX
            SET DATA=1
            SET CLK=1
            WAIT UNTIL DATA=1,CLK=1
            SUB _jiffy_tx_byte # including initial 10 us and final 11 us delays
            POPB  # the byte was read into the register using READ. Now we actually POP the byte, because it has been acknowledged by the initiator
            LOAD CTRL_BYTE_TXED
            PUSHC
            IF EOI THEN _jiffy_tx_eoi
            SET DATA=1
            SET CLK=0
            WAIT FOR 2 us
            WAIT UNTIL DATA=0 # ATN could break this cycle
_jiffy_tx_done
            WAIT FOR 2 us
            RET
_jiffy_tx_eoi
            SET CLK=1
            SET DATA=0
            WAIT FOR 2 us
            WAIT UNTIL CLK=0 # ATN could break this cycle
            RET

_jiffy_tx_byte
            WAIT FOR 10 us # average 7-13 cycles
            SET CLK=REGBIT0
            SET DATA=REGBIT1
            WAIT FOR 10 us
            SET CLK=REGBIT2
            SET DATA=REGBIT3
            WAIT FOR 11 us
            SET CLK=REGBIT4
            SET DATA=REGBIT5
            WAIT FOR 10 us
            SET CLK=REGBIT6
            SET DATA=REGBIT7
            WAIT FOR 11 us
            RET

RELEASE
            # Release from bus and die
            SET ATN=1
            SET CLK=1
            SET DATA=1
            WAIT FOR 2 us # Allow for rise time
            JUMP reset_vec

JIFFY_RX
            IF UPFIFOFULL THEN JIFFY_RX
            SET DATA=1                  # Ready to receive
            WAIT UNTIL CLK=1 # Possibly for a long time

            # clk(3)data(1) => !bit4 & !Bit5
            # clk(2)data(0) => !bit6 & !bit7
            # clk(3)data(1) => !bit3 & !bit1
            # clk(2)data(0) => !bit2 & !bit0
            # clk(3)data(1) => EOI & STATUS

            WAIT FOR 17 us
            IN DATABIT4=!CLK
            IN DATABIT5=!DATA
            WAIT FOR 13 us
            IN DATABIT6=!CLK
            IN DATABIT7=!DATA
            WAIT FOR 11 us
            IN DATABIT3=!CLK
            IN DATABIT1=!DATA
            WAIT FOR 13 us
            IN DATABIT2=!CLK
            IN DATABIT0=!DATA
            WAIT FOR 13 us
            IN EOI=CLK
            IF NOT DATA THEN _error
            WAIT FOR 6 us
            SET DATA=0
            WAIT FOR 70 us
            PUSHD
            IF EOI THEN _end_of_rx
            JUMP JIFFY_RX

RECEIVE_BYTE
# initial state: DATA is low, CLK has to become 1
            IF JIFFYDOS THEN JIFFY_RX
            WAIT UNTIL CLK=1
_wait1
            IF UPFIFOFULL THEN _wait1

            SET DATA=1
            WAIT UNTIL CLK=0 FOR Tv
            SET EOI=TIMEOUT  # If there was a timeout, set the EOI flag
            IF NOT EOI THEN _recv0
            IF NOT ATN THEN _recv0
            SET DATA=0
            WAIT FOR 70 us
            SET DATA=1
            WAIT UNTIL CLK=0 FOR 1000 us
            IF TIMEOUT THEN _error

_recv0
            SUB _recv8bits

# Now acknowledge byte
            WAIT FOR 50 us
            SET  DATA=0
            RET

RECEIVE_ATN_BYTE
            SET DATA=1
            # Pre-clear data bit for JD detection
            SET DATABIT7=0

            WAIT UNTIL CLK=0 # Possibly forever

_recv8bits
            WAIT UNTIL CLK=1 FOR Ts
            IN   DATABIT0=DATA
            IF TIMEOUT THEN _error2
            WAIT UNTIL CLK=0 FOR Tv

            WAIT UNTIL CLK=1 FOR Ts
            IN   DATABIT1=DATA
            IF TIMEOUT THEN _error2
            WAIT UNTIL CLK=0 FOR Tv

            WAIT UNTIL CLK=1 FOR Ts
            IN   DATABIT2=DATA
            IF TIMEOUT THEN _error2
            WAIT UNTIL CLK=0 FOR Tv

            WAIT UNTIL CLK=1 FOR Ts
            IN   DATABIT3=DATA
            IF TIMEOUT THEN _error2
            WAIT UNTIL CLK=0 FOR Tv

            WAIT UNTIL CLK=1 FOR Ts
            IN   DATABIT4=DATA
            IF TIMEOUT THEN _error2
            WAIT UNTIL CLK=0 FOR Tv

            WAIT UNTIL CLK=1 FOR Ts
            IN   DATABIT5=DATA
            IF TIMEOUT THEN _error2
            WAIT UNTIL CLK=0 FOR Tv

            WAIT UNTIL CLK=1 FOR Ts
            IN   DATABIT6=DATA
            IF TIMEOUT THEN _error2
            WAIT UNTIL CLK=0 FOR Tv

            IF ATN THEN _normal_data
            IF ADDRESSED THEN _normal_data	# first ATN byte already checked, don't CHECK_ATN_BYTE or ack jiffy again

            # ATN is true, so we check the jiffydos signal
            # but only when we get addressed            
            SUB CHECK_ATN_BYTE # Check based on first 7 bits only!
            IF NOT ADDRESSED THEN _normal_data
            WAIT UNTIL CLK=1 FOR 218 us
            IF TIMEOUT THEN _jiffy
_normal_data
            WAIT UNTIL CLK=1 FOR Ts
            IN   DATABIT7=DATA
            IF TIMEOUT THEN _error2
            WAIT UNTIL CLK=0 FOR Tv
            WAIT FOR 5 us
            SET DATA=0
            WAIT FOR 50 us
            RET
_jiffy
            # Signal JD acknowledge
            SET JIFFYDOS=1            
            SET DATA=0
            WAIT FOR 100 us
            SET DATA=1
            JUMP _normal_data

# Below are some different error codes for debug
_error
            LOAD $EE
            PUSHC
            JUMP RELEASE

_error1
            LOAD $E8
            PUSHC
            JUMP RELEASE

_error2
            LOAD ERROR_RX_TIMEOUT
            PUSHC
            JUMP RELEASE

reset_vec
            CLRST
            SET IRQ_EN=1
            POPB ; hang
            IF NOT CTRL THEN reset_vec # Ignore all data bytes
            IF DATABYTE IS CMD_GO_WARP THEN WARP_START
            IF DATABYTE IS CMD_MASTER_START THEN MASTER_START
            JUMP reset_vec

MASTER_START
            SET IRQ_EN=0
            SET ATN=0
            SET CLK=0
            SET DATA=1
            WAIT FOR 20 us
            WAIT UNTIL DATA=0 FOR 1000 us
            IF TIMEOUT THEN no_device
_atn_send
            READB
            IF CTRL THEN _master_test
            SET EOI=0
            SUB TX_BYTE
            JUMP _atn_send
_master_test
            POPB
            IF DATABYTE IS CMD_MASTER_START THEN MASTER_START
            IF DATABYTE IS CMD_MASTER_TX THEN _release_atn_and_tx
            IF DATABYTE IS CMD_MASTER_RELEASE THEN RELEASE
            IF DATABYTE IS CMD_MASTER_TURNARND THEN _release_and_turnaround
            LOAD ERROR_BAD_CTRLCODE
            PUSHC
_release_atn_and_tx
            SET ATN=1
            SUB TRANSMIT
            WAIT FOR 100 us
            JUMP _atn_send

_release_and_turnaround
            SET ATN=1
            WAIT FOR 30 us
            SET CLK=1
            SET DATA=0
            WAIT FOR 5 us
            WAIT UNTIL CLK=0 FOR 1000 us
            IF TIMEOUT THEN no_device
            SET EOI=0
            JUMP DO_LISTEN

no_device
            LOAD ERROR_NO_DEVICE
            PUSHC
            JUMP RELEASE

WARP_START
            PUSHC # Acknowledge warp enter
            SET IRQ_EN=0
warp_continue
            WAIT UNTIL NOT CLK=1,DATA=1
            IF NOT CLK THEN warp_error
warp_data
            LOAD WARP_START_RX
            PUSHC
            POPB ; handshake
            LOAD $55 # Push missing $55
            PUSHD
            SET CLK=0
            WAIT UNTIL DATA=1
            SET CLK=1

            SUB warp_sync
            SUB get_128
            SUB warp_sync
            SUB get_128
            SUB warp_sync
            SUB get_68
            LOAD WARP_BLOCK_END
            PUSHC
            WAIT FOR 5 us
            WAIT UNTIL CLK=1,DATA=1
            IRQ
            JUMP warp_continue

warp_error
            LOAD WARP_RX_ERROR
            PUSHC
            SET DATA=0
            WAIT UNTIL CLK=1
            SET DATA=1
            SUB warp_sync
            SUB get_warp_byte
            WAIT UNTIL CLK=1,DATA=1
            IRQ
            IF NOT REGBIT7 THEN reset_vec # done
            JUMP warp_continue # not yet done

warp_sync
            WAIT UNTIL CLK=1,DATA=1
            WAIT UNTIL CLK=0,DATA=0 FOR 1000 us
            # 6 microsecond pulse has started, now wait for the first data bit (25 us)
            WAIT FOR 4 us # 21 us is in get byte
            RET

warp_timeout
            LOAD WARP_TIMEOUT
            PUSHC
            IRQ
            WAIT UNTIL CLK=1,DATA=1
            JUMP reset_vec

get_warp_byte
            WAIT FOR 21 us
            OUT SRQ=0
            IN DATABIT3=!CLK
            IN DATABIT1=!DATA
            WAIT FOR 8 us
            OUT SRQ=1
            IN DATABIT2=!CLK
            IN DATABIT0=!DATA
            WAIT FOR 8 us
            IN DATABIT7=!CLK
            IN DATABIT5=!DATA
            WAIT FOR 8 us
            IN DATABIT6=!CLK
            IN DATABIT4=!DATA
            PUSHD
            RET

get_4
            SUB get_warp_byte
            SUB get_warp_byte
            SUB get_warp_byte
            SUB get_warp_byte
            RET

get_32
            SUB get_4
            SUB get_4
            SUB get_4
            SUB get_4
            SUB get_4
            SUB get_4
            SUB get_4
            SUB get_4
            RET

get_128
            SUB get_32
            SUB get_32
            SUB get_32
            SUB get_32
            RET

get_68
            SUB get_32
            SUB get_32
            SUB get_4
            RET
