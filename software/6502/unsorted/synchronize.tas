;**************************************************************************
;*
;* FILE  synchronize.tas
;* Copyright (c) 2018 Gideon Zweijtzer <gideon.zweijtzer>
;*
;* DESCRIPTION
;*   This is a simple prg file that performs VIC sync to trace unit,
;*   by writing to a special register to reset the trace cycle counter
;*
;******
    * = $0801

    .word $080b
    .word 1541
    .byte $9e, $20, $32, $30, $36, $34, $00
    .byte 0, 0, 0, 0

    jmp synchronize
    

;**************************************************************************
;*
;* NAME  synchronize_impl
;*
;* DESCRIPTION
;*   synchronizes CPU with VIC for cycle exact start of programs
;*   This is the part that is copied to RAM
;*
;******
STACKPOINTER
    .byte 0
    
synchronize_impl
	; pointer has already been set by the prepare function
	lda #$35
	sta $01
	tsx
	stx STACKPOINTER

    ; Set up IRQ vector (write 'through' kernal rom)
    lda #<synchronizeirq
    sta $fffe
    lda #>synchronizeirq
    sta $ffff

-	lda $d012
	cmp #$F0
	bne -

	; disable IRQs
	lda #$7f
	sta $dc0d
	; acknowledg IRQs
	lda $dc0d
	; Just in case also for CIA2
	lda $dd0d
	
	; setup IRQ for VIC
	lda #$FC
	sta $d012
	lda $d011
	and #$7F
	sta $d011
	
	lda #$01
	sta $d019
	sta $d01a
	cli
	; now just wait until the IRQ occurs
irqwait
	clc
	bcc irqwait
			
synchronizeirq
    ; A Raster Compare IRQ is triggered on cycle 0 on the current $d012 line
    ; The MPU needs to finish it's current OP code before starting the Interrupt Handler,
    ; meaning a 0 -> 7 cycles delay depending on OP code.
    ; Then a 7 cycle delay is spendt invoking the Interrupt Handler (Push SR/PC to stack++)

    ; CYCLECOUNT: [7 -> 14] cycles after Raster IRQ occurred.

    ; Set up Wedge IRQ vector
    lda #<WedgeIRQ                   ; 2
    sta $fffe                        ; 4
    lda #>WedgeIRQ                   ; 2
    sta $ffff                        ; 4

    ; Set the Raster IRQ to trigger on the next Raster line
    inc $d012						 ; 6

    ; Acknowlege current Raster IRQ
    lda #$01						 ; 2
    sta $d019						 ; 4

    ; Store current Stack Pointer (will be messed up when the next IRQ occurs)
    tsx								 ; 2

    ; Allow IRQ to happen (Remember the Interupt flag is set by the Interrupt Handler).
    cli								 ; 2

	; CYCLECOUNT: [35 -> 42]   (max = 65 before new interrupt, hence: 65 - 35 = 30 / 2 = 15 nops)
    ; Execute NOPs untill the raster line changes and the Raster IRQ triggers
    NOP
    NOP
    NOP
    NOP
    NOP
    NOP
    NOP
    NOP
    NOP
    NOP
    NOP
    NOP
    NOP
    NOP
    NOP
	NOP
    ; CYCLECOUNT: [67 -> 74]
	NOP
    NOP
    NOP
    NOP
-   inc $d020
    jmp -

WedgeIRQ
    ; At this point the next Raster Compare IRQ has triggered and the jitter is max 1 cycle.
    ; CYCLECOUNT: [7 -> 8] (7 cycles for the interrupt handler + [0 -> 1] cycle Jitter for the NOP)

    ; Restore previous Stack Pointer (ignore the last Stack Manipulation by the IRQ)
    txs

    ; PAL-63  ; NTSC-64    ; NTSC-65
    ;---------;------------;-----------
    ldx #$08   ; ldx #$08   ; ldx #$09
    dex        ; dex        ; dex
    bne *-1    ; bne *-1    ; bne *-1
    bit $00    ; nop
               ; nop

    ; Check if $d012 is incremented and rectify with an aditional cycle if neccessary
    lda $d012
    cmp $d012  ; <- critical instruction (ZERO-Flag will indicate if Jitter = 0 or 1)

    ; CYCLECOUNT: [61 -> 62] <- Will not work if this timing is wrong

    ; cmp $d012 is originally a 5 cycle instruction but due to piplining tech. the
    ; 5th cycle responsible for calculating the result is executed simultaniously
    ; with the next OP fetch cycle (first cycle of beq *+2).

    ; Add one cycle if $d012 wasn't incremented (Jitter / ZERO-Flag = 0)
    beq *+2

    ; Stable code
	ldx STACKPOINTER
	txs
	lda #$37
	sta $01
		
	; Note that this RTS will actually jump back to our caller (called to 'synchronize_impl')	
	rts

;**************************************************************************
;*
;* NAME  synchronize
;*
;* DESCRIPTION
;*   setup raster synchronization; i.e. disable IRQ sources from CIA1
;*   and setup IRQ from VIC at raster #$FC. Disable sprites, too.
;*   then copy the actual synchronize function to RAM and call it.
;*   so aside from rom RAM getting garbled, this function will return
;*   to the ROM with CPU and VIC synchronized. Note, CIA timers are first
;*   cleared and later reinitialized by the original kernal routine.
;*    
;******
synchronize
	sei
	pha
	txa
	pha
	tya
	pha

	; eliminate CIA interrupts
	lda $dc0e
	and #$fe
	sta $dc0e
	lda #$7F
	sta $dc0d
	sta $dd0d
	lda $dc0d
	lda $dd0d

	; prepare VIC interrupt
	lda #$00
	sta $d015
;	lda #$fc
;	sta $d012
;	lda $d011
;	and #$7f
;	sta $d011
;	lda #$00
;	sta $d01a
;	lda #$0f
;	sta $d019

	; GO!
	jsr synchronize_impl

    lda #$0d
    sta $dfff

	; disable VIC interrupt once again
	lda #$00
	sta $d01a
	lda #$0f
	sta $d019

	; reinit CIA interrupts and return to called
	lda #$81
	sta $dc0d
	lda $dc0e
	ora #$11
	sta $dc0e

	pla
	tay
	pla
	tax
	pla
	rts
