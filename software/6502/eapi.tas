; error codes
EAPI_ERR_RAM            = 1
EAPI_ERR_ROML           = 2
EAPI_ERR_ROMH           = 3
EAPI_ERR_ROML_PROTECTED = 4
EAPI_ERR_ROMH_PROTECTED = 5

; I/O address used to select the bank
EASYFLASH_IO_BANK    = $de00

; I/O address used to read and to select the slot
EASYFLASH_IO_SLOT    = $de01

; I/O address for enabling memory configuration, /GAME and /EXROM states
EASYFLASH_IO_CONTROL = $de02

; Bit for Expansion Port /GAME line (1 = low)
EASYFLASH_IO_BIT_GAME    = $01

; Bit for Expansion Port /EXROM line (1 = low)
EASYFLASH_IO_BIT_EXROM   = $02

; Bit for memory control (1 = enabled)
EASYFLASH_IO_BIT_MEMCTRL = $04

EASYFLASH_IO_BIT_NO_VIC  = $08

; Bit for status LED (1 = on)
EASYFLASH_IO_BIT_LED     = $80

EASYFLASH_IO_FLASH_SETUP = EASYFLASH_IO_BIT_MEMCTRL | EASYFLASH_IO_BIT_GAME | EASYFLASH_IO_BIT_NO_VIC | EASYFLASH_IO_BIT_LED
EASYFLASH_IO_16K_SETUP   = EASYFLASH_IO_BIT_MEMCTRL | EASYFLASH_IO_BIT_GAME | EASYFLASH_IO_BIT_EXROM



EAPI_RAM_CODE           = $df80
EAPI_RAM_SIZE           = 124
EAPI_ZP_INIT_CODE_BASE   = $4b

* = $c000
EAPICodeBase
        .byte $65, $61, $70, $69        ; signature "EAPI"

	.text "1541 U2(+) V0.5"
	.byte 0 ; 16 bytes, must be 0-terminated



; =============================================================================
;
; EAPIInit: User API: To be called with JSR <load_address> + 20
;
; Read Manufacturer ID and Device ID from the flash chip(s) and check if this
; chip is supported by this driver. Prepare our private RAM for the other
; functions of the driver.
; When this function returns, EasyFlash will be configured to bank in the ROM
; area at $8000..$bfff.
;
; This function calls SEI, it restores all Flags except C before it returns.
; Do not call it with D-flag set. $01 must enable both ROM areas.
;
; parameters
;       -
; return
;       C   set: Flash chip not supported by this driver
;           clear: Flash chip supported by this driver
;       If C is clear
;       A   Device ID
;       X   Manufacturer ID
;       Y   Number of physical banks (>= 64) or
;           number of slots (< 64) with 64 banks each
;       If C is set
;       A   Error reason
; changes
;       all registers are changed
;
; =============================================================================

EAPIInit
        php
        sei
        ; backup ZP space
        lda EAPI_ZP_INIT_CODE_BASE
        pha
        lda EAPI_ZP_INIT_CODE_BASE + 1
        pha

        ; find out our memory address
        lda #$60        ; rts
        sta EAPI_ZP_INIT_CODE_BASE
        jsr EAPI_ZP_INIT_CODE_BASE
initCodeBase = * - 1
        tsx
        lda $100, x
        sta EAPI_ZP_INIT_CODE_BASE + 1
        dex
        lda $100, x
        sta EAPI_ZP_INIT_CODE_BASE
        clc
        bcc initContinue


RAMCode
        ; This code will be copied to EasyFlash RAM at EAPI_RAM_CODE
        .logical EAPI_RAM_CODE
RAMContentBegin
; =============================================================================
; JUMP TABLE (will be updated to be correct)
; =============================================================================
jmpTable
        jmp EAPIWriteFlash - initCodeBase
        jmp EAPIEraseSector - initCodeBase
        jmp EAPISetBank - initCodeBase
        jmp EAPIGetBank - initCodeBase
        jmp EAPISetPtr - initCodeBase
        jmp EAPISetLen - initCodeBase
        jmp EAPIReadFlashInc - initCodeBase
        jmp EAPIWriteFlashInc - initCodeBase
        jmp EAPISetSlot - initCodeBase
        jmp EAPIGetSlot - initCodeBase
jmpTableEnd

; =============================================================================
;
; Internal function
;
; Read a byte from the inc-address
;
; =============================================================================
readByteForInc
EAPI_INC_ADDR_LO = * + 1
EAPI_INC_ADDR_HI = * + 2
            lda $ffff
            rts

EAPI_WRITE_ADDR_LO .byte 0
EAPI_WRITE_ADDR_HI .byte 0
EAPI_WRITE_VAL     .byte 0
EAPI_WRITE_VAL2    .byte 0


; =============================================================================
; Variables
; =============================================================================

EAPI_TMP_VAL1           .byte 0
EAPI_TMP_VAL2           .byte 0
EAPI_TMP_VAL3           .byte 0
EAPI_TMP_VAL4           .byte 0
EAPI_SHADOW_BANK        .byte 0 ; copy of current bank number set by the user
EAPI_INC_TYPE           .byte 0 ; type used for EAPIReadFlashInc/EAPIWriteFlashInc
EAPI_LENGTH_LO          .byte 0
EAPI_LENGTH_MED         .byte 0
EAPI_LENGTH_HI          .byte 0
; =============================================================================

ultimateWait4idle LDA $DE1C
                  AND #$35
                  BNE ultimateWait4idle
                  RTS
 
ultimateWait4data LDA $DE1C
                  AND #$20
                  BEQ ultimateWait4data
-                 RTS

ultimateGetstatus      LDX #$39
                       LDY #$39
                       LDA $DE1C
                       AND #$40
                       BEQ +
                       LDX $DE1F

                       LDA $DE1C
                       AND #$40
                       BEQ +
                       LDY $DE1F
+                      RTS


RAMContentEnd
	.here
RAMCodeEnd

.if RAMContentEnd - RAMContentBegin > EAPI_RAM_SIZE 
    .error "Code too large"
.fi

.if * - initCodeBase > 256
    .error "RAMCode not addressable trough (initCodeBase),y"
.fi

initContinue
        ; *** copy some code to EasyFlash private RAM ***
        ; length of data to be copied
        ldx #RAMCodeEnd - RAMCode - 1
        ; offset behind initCodeBase of last byte to be copied
        ldy #RAMCodeEnd - initCodeBase - 1
cidCopyCode
        lda (EAPI_ZP_INIT_CODE_BASE),y
        sta EAPI_RAM_CODE, x
        cmp EAPI_RAM_CODE, x    ; check if there's really RAM at this address
        bne ciRamError
        dey
        dex
        bpl cidCopyCode

        ; *** calculate jump table ***
        ldx #0
cidFillJMP
        inx
        clc
        lda jmpTable, x
        adc EAPI_ZP_INIT_CODE_BASE
        sta jmpTable, x
        inx
        lda jmpTable, x
        adc EAPI_ZP_INIT_CODE_BASE + 1
        sta jmpTable, x
        inx
        cpx #jmpTableEnd - jmpTable
        bne cidFillJMP
        clc
        bcc ciNoRamError
ciRamError
        lda #EAPI_ERR_RAM
        sta EAPI_WRITE_ADDR_LO
        sec                     ; error

ciNoRamError
        ; restore the caller's ZP state
        pla
        sta EAPI_ZP_INIT_CODE_BASE + 1
        pla
        sta EAPI_ZP_INIT_CODE_BASE

        bcs returnOnly          ; branch on error from above
        ; everything okay
        ; clc
resetAndReturn:                 ; C indicates error
        lda #0                  ; Protection test has changed the bank
        sta EASYFLASH_IO_BANK   ; restore it for compatibility to old versions
        lda #$87
        sta EASYFLASH_IO_CONTROL

returnOnly:                     ; C indicates error
        lda EAPI_WRITE_ADDR_LO  ; device or error code in A
        bcs returnCSet
        ldx #41                 ; manufacturer in X
        ldy #64                 ; number of banks in Y

        plp
        clc                     ; do this after plp :)
        rts
returnCSet
        plp
        sec                     ; do this after plp :)
        rts

; =============================================================================
;
; EAPIWriteFlash: User API: To be called with JSR jmpTable + 0 = $df80
;
; Write a byte to the given address. The address must be as seen in Ultimax
; mode, i.e. do not use the base addresses $8000 or $a000 but $8000 or $e000.
;
; When writing to flash memory only bits containing a '1' can be changed to
; contain a '0'. Trying to change memory bits from '0' to '1' will result in
; an error. You must erase a memory block to get '1' bits.
;
; This function uses SEI, it restores all flags except C before it returns.
; Do not call it with D-flag set. $01 must enable both ROM areas.
; It can only be used after having called EAPIInit.
;
; parameters
;       A   value
;       XY  address (X = low), $8xxx/$9xxx or $Exxx/$Fxxx
;
; return
;       C   set: Error
;           clear: Okay
; changes
;       Z,N <- value
;
; =============================================================================
EAPIWriteFlash
	php
        sei
        sta EAPI_WRITE_VAL
        stx EAPI_WRITE_ADDR_LO
        sty EAPI_WRITE_ADDR_HI
	
        sta $De09
	lda #$65
	sta $de08
	lda #$66
	sta $de08
	lda #$77
	sta $de08
	stx $de08
	sty $de08
	lda EAPI_SHADOW_BANK
	sta $de08
	lda $de07
	and EAPI_WRITE_VAL
	sta $de07
	sta $de09
	cmp EAPI_WRITE_VAL
	bne writeError

        plp
        clc
EAPIWriteFlashCont ldy EAPI_WRITE_ADDR_HI
        ldx EAPI_WRITE_ADDR_LO
        lda EAPI_WRITE_VAL
        rts
writeError
        plp
        sec
        bcs EAPIWriteFlashCont


; =============================================================================
;
; EAPIEraseSector: User API: To be called with JSR jmpTable + 3 = $df83
;
; Erase the sector at the given address. The bank number currently set and the
; address together must point to the first byte of a 64 kByte sector.
;
; When erasing a sector, all bits of the 64 KiB area will be set to '1'.
; This means that 8 banks with 8 KiB each will be erased, all of them either
; in the LOROM chip when $8000 is used or in the HIROM chip when $e000 is
; used.
;
; This function uses SEI, it restores all flags except C before it returns.
; Do not call it with D-flag set. $01 must enable the affected ROM area.
; It can only be used after having called EAPIInit.
;
; parameters
;       A   bank
;       Y   base address (high byte), $80 for LOROM, $a0 or $e0 for HIROM
;
; return
;       C   set: Error
;           clear: Okay
;
; change
;       Z,N <- bank
;
; =============================================================================
EAPIEraseSector
        php
        sei

        sta EAPI_TMP_VAL3
        stx EAPI_TMP_VAL1
        sty EAPI_TMP_VAL2 ; base addr
        
	lda EAPI_SHADOW_BANK
	sta EAPI_TMP_VAL4
	
        LDA $DE1D
        CMP #$C9
   BNE EAPIEraseSectorClassic
        
EAPIEraseSectorUCI
        LDA #$04 ; oder $0C ?
        STA $DE1C
        JSR ultimateWait4idle

        LDA #$04
        STA $DE1D
        LDA #$20
        STA $DE1D
        LDA #$00
        STA $DE1D

        LDA EAPI_TMP_VAL3
        STA $DE1D
        LDA EAPI_TMP_VAL2
        STA $DE1D

        LDA #$01
        STA $DE1C

        JSR ultimateWait4data
        JSR ultimateGetstatus
        CPX #$30
        BNE EAPIEraseSectorClassic
        CPY #$30
        BNE EAPIEraseSectorClassic
        LDA #$02
        STA $DE1C
        JSR ultimateWait4idle

        CLC
        BCC erasedone2
        
EAPIEraseSectorClassic
	lda EAPI_TMP_VAL3
        and #$F8
        sta EAPI_SHADOW_BANK
        sta EASYFLASH_IO_BANK
	
	ldx #8
erase1: txa	
	pha

;;;;;;;;;;;;;;;;;;;; Clear bank

        lda #$ff
        sta EAPI_WRITE_VAL2
        
        lda EAPI_TMP_VAL2
        cmp #$80
        bne skiperase2
	
        lda #$00
	sta EAPI_WRITE_ADDR_LO
	lda #$80
	sta EAPI_WRITE_ADDR_HI

        sta $DE09
	
erase2: 
	lda #$65
	sta $de08
	lda #$66
	sta $de08
	lda #$77
	sta $de08
        ldx EAPI_WRITE_ADDR_LO
        ldy EAPI_WRITE_ADDR_HI
	stx $de08
	sty $de08
	lda EAPI_SHADOW_BANK
	sta $de08
	lda EAPI_WRITE_VAL2
	sta $de07
	sta $de09


        inc EAPI_WRITE_ADDR_LO
	bne erase2
	inc EAPI_WRITE_ADDR_HI
	lda EAPI_WRITE_ADDR_HI
	cmp #$a0
	bne erase2

skiperase2
        lda EAPI_TMP_VAL2
        cmp #$a0
        beq doerase3
        cmp #$e0
        bne skiperase3

doerase3
	lda #$e0
	sta EAPI_WRITE_ADDR_HI
        sta $DE09
	beq erase3
	bne erase3

erasedone2 bcc erasedone

erase1h: beq erase1
         bne erase1

erase3
	lda #$65
	sta $de08
	lda #$66
	sta $de08
	lda #$77
	sta $de08
        ldx EAPI_WRITE_ADDR_LO
        ldy EAPI_WRITE_ADDR_HI
	stx $de08
	sty $de08
	lda EAPI_SHADOW_BANK
	sta $de08
	lda EAPI_WRITE_VAL2
	sta $de07
	sta $de09


        inc EAPI_WRITE_ADDR_LO
	bne erase3
	inc EAPI_WRITE_ADDR_HI
	lda EAPI_WRITE_ADDR_HI
	cmp #$00
	bne erase3

skiperase3
	inc EAPI_SHADOW_BANK
	pla
	tax
        dex
	bne erase1h

erasedone: lda EAPI_TMP_VAL4
        sta EAPI_SHADOW_BANK
        sta EASYFLASH_IO_BANK
        plp
        clc
        ldy EAPI_TMP_VAL2
        ldx EAPI_TMP_VAL1
        lda EAPI_TMP_VAL3
        rts




; =============================================================================
;
; EAPISetBank: User API: To be called with JSR jmpTable + 6 = $df86
;
; Set the bank. This will take effect immediately for cartridge read access
; and will be used for the next flash write or read command.
;
; This function can only be used after having called EAPIInit.
;
; parameters
;       A   bank
;
; return
;       -
;
; changes
;       -
;
; =============================================================================
EAPISetBank
        sta EAPI_SHADOW_BANK
        sta EASYFLASH_IO_BANK
        rts


; =============================================================================
;
; EAPIGetBank: User API: To be called with JSR jmpTable + 9 = $df89
;
; Get the selected bank which has been set with EAPISetBank.
; Note that the current bank number can not be read back using the hardware
; register $de00 directly, this function uses a mirror of that register in RAM.
;
; This function can only be used after having called EAPIInit.
;
; parameters
;       -
;
; return
;       A  bank
;
; changes
;       Z,N <- bank
;
; =============================================================================
EAPIGetBank
        lda EAPI_SHADOW_BANK
        rts


; =============================================================================
;
; EAPISetPtr: User API: To be called with JSR jmpTable + 12 = $df8c
;
; Set the pointer for EAPIReadFlashInc/EAPIWriteFlashInc.
;
; This function can only be used after having called EAPIInit.
;
; parameters
;       A   bank mode, where to continue at the end of a bank
;           $D0: 00:0:1FFF=>00:1:0000, 00:1:1FFF=>01:0:1FFF (lhlh...)
;           $B0: 00:0:1FFF=>01:0:0000 (llll...)
;           $D4: 00:1:1FFF=>01:1:0000 (hhhh...)
;       XY  address (X = low) address must be in range $8000-$bfff
;
; return
;       -
;
; changes
;       -
;
; =============================================================================
EAPISetPtr
        sta EAPI_INC_TYPE
        stx EAPI_INC_ADDR_LO
        sty EAPI_INC_ADDR_HI
        rts


; =============================================================================
;
; EAPISetLen: User API: To be called with JSR jmpTable + 15 = $df8f
;
; Set the number of bytes to be read with EAPIReadFlashInc.
;
; This function can only be used after having called EAPIInit.
;
; parameters
;       XYA length, 24 bits (X = low, Y = med, A = high)
;
; return
;       -
;
; changes
;       -
;
; =============================================================================
EAPISetLen
        stx EAPI_LENGTH_LO
        sty EAPI_LENGTH_MED
        sta EAPI_LENGTH_HI
        rts


; =============================================================================
;
; EAPIReadFlashInc: User API: To be called with JSR jmpTable + 18 = $df92
;
; Read a byte from the current pointer from EasyFlash flash memory.
; Increment the pointer according to the current bank wrap strategy.
; Pointer and wrap strategy have been set by a call to EAPISetPtr.
;
; The number of bytes to be read may be set by calling EAPISetLen.
; EOF will be set if the length is zero, otherwise it will be decremented.
; Even when EOF is delivered a new byte has been read and the pointer
; incremented. This means the use of EAPISetLen is optional.
;
; This function can only be used after having called EAPIInit.
;
; parameters
;       -
;
; return
;       A   value
;       C   set if EOF
;
; changes
;       Z,N <- value
;
; =============================================================================
EAPIReadFlashInc
        ; now we have to activate the right bank
        lda EAPI_SHADOW_BANK
        sta EASYFLASH_IO_BANK

        ; call the read-routine
        jsr readByteForInc

        ; remember the result & x/y registers
        sta EAPI_WRITE_VAL
        stx EAPI_TMP_VAL1
        sty EAPI_TMP_VAL2

        ; make sure that the increment subroutine of the
        ; write routine jumps back to us, and call it
        lda #$00
        sta EAPI_WRITE_ADDR_HI
        beq rwInc_inc

readInc_Length
        ; decrement length
        lda EAPI_LENGTH_LO
        bne readInc_nomed
        lda EAPI_LENGTH_MED
        bne readInc_nohi
        lda EAPI_LENGTH_HI
        beq readInc_eof
        dec EAPI_LENGTH_HI
readInc_nohi
        dec EAPI_LENGTH_MED
readInc_nomed
        dec EAPI_LENGTH_LO
        clc ; no EOF - already set by rwInc_noInc
        bcc rwInc_return

readInc_eof
        sec ; EOF
        bcs rwInc_return


; =============================================================================
;
; EAPIWriteFlashInc: User API: To be called with JSR jmpTable + 21 = $df95
;
; Write a byte to the current pointer to EasyFlash flash memory.
; Increment the pointer according to the current bank wrap strategy.
; Pointer and wrap strategy have been set by a call to EAPISetPtr.
;
; In case of an error the position is not inc'ed.
;
;
; This function can only be used after having called EAPIInit.
;
; parameters
;       A   value
;
; return
;       C   set: Error
;           clear: Okay
; changes
;       Z,N <- value
;
; =============================================================================
EAPIWriteFlashInc
        sta EAPI_WRITE_VAL
        stx EAPI_TMP_VAL1
        sty EAPI_TMP_VAL2

        ; load address to store to
        ldx EAPI_INC_ADDR_LO
        lda EAPI_INC_ADDR_HI
        cmp #$a0
        bcc writeInc_skip
        ora #$40 ; $a0 => $e0
writeInc_skip
        tay
        lda EAPI_WRITE_VAL

        ; write to flash
        jsr jmpTable + 0
        bcs rwInc_return

        ; the increment code is used by both functions
rwInc_inc
        ; inc to next position
        inc EAPI_INC_ADDR_LO
        bne rwInc_noInc

        ; inc page
        inc EAPI_INC_ADDR_HI
        lda EAPI_INC_TYPE
        and #$e0
        cmp EAPI_INC_ADDR_HI
        bne rwInc_noInc
        ; inc bank
        lda EAPI_INC_TYPE
        asl
        asl
        asl
        sta EAPI_INC_ADDR_HI
        inc EAPI_SHADOW_BANK

rwInc_noInc
        ; no errors here, clear carry
        clc
        ; readInc: value has be set to zero, so jump back
        ; writeInc: value ist set by EAPIWriteFlash to the HI address (never zero)
        lda EAPI_WRITE_ADDR_HI
        beq readInc_Length
rwInc_return
        ldy EAPI_TMP_VAL2
        ldx EAPI_TMP_VAL1
        lda EAPI_WRITE_VAL
	rts

EAPIGetSlot
EAPISetSlot
        rts

; =============================================================================
; We pad the file to the maximal driver size ($0300) to make sure nobody
; has the idea to use the memory behind EAPI in a cartridge. EasyProg
; replaces EAPI and would overwrite everything in this space.
.fill $0300 - (* - EAPICodeBase), $ff
