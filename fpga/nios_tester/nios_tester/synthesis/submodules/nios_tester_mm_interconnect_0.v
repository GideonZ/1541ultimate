// nios_tester_mm_interconnect_0.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 18.1 625

`timescale 1 ps / 1 ps
module nios_tester_mm_interconnect_0 (
		input  wire         clk_0_clk_clk,                                  //                                clk_0_clk.clk
		input  wire         nios2_gen2_0_reset_reset_bridge_in_reset_reset, // nios2_gen2_0_reset_reset_bridge_in_reset.reset
		input  wire [25:0]  audio_in_dma_mm_write_address,                  //                    audio_in_dma_mm_write.address
		output wire         audio_in_dma_mm_write_waitrequest,              //                                         .waitrequest
		input  wire [3:0]   audio_in_dma_mm_write_byteenable,               //                                         .byteenable
		input  wire         audio_in_dma_mm_write_write,                    //                                         .write
		input  wire [31:0]  audio_in_dma_mm_write_writedata,                //                                         .writedata
		input  wire [25:0]  audio_out_dma_mm_read_address,                  //                    audio_out_dma_mm_read.address
		output wire         audio_out_dma_mm_read_waitrequest,              //                                         .waitrequest
		input  wire [3:0]   audio_out_dma_mm_read_byteenable,               //                                         .byteenable
		input  wire         audio_out_dma_mm_read_read,                     //                                         .read
		output wire [31:0]  audio_out_dma_mm_read_readdata,                 //                                         .readdata
		output wire         audio_out_dma_mm_read_readdatavalid,            //                                         .readdatavalid
		input  wire [25:0]  jtagdebug_mm_write_address,                     //                       jtagdebug_mm_write.address
		output wire         jtagdebug_mm_write_waitrequest,                 //                                         .waitrequest
		input  wire         jtagdebug_mm_write_write,                       //                                         .write
		input  wire [7:0]   jtagdebug_mm_write_writedata,                   //                                         .writedata
		input  wire [31:0]  nios2_gen2_0_data_master_address,               //                 nios2_gen2_0_data_master.address
		output wire         nios2_gen2_0_data_master_waitrequest,           //                                         .waitrequest
		input  wire [3:0]   nios2_gen2_0_data_master_byteenable,            //                                         .byteenable
		input  wire         nios2_gen2_0_data_master_read,                  //                                         .read
		output wire [31:0]  nios2_gen2_0_data_master_readdata,              //                                         .readdata
		input  wire         nios2_gen2_0_data_master_write,                 //                                         .write
		input  wire [31:0]  nios2_gen2_0_data_master_writedata,             //                                         .writedata
		input  wire         nios2_gen2_0_data_master_debugaccess,           //                                         .debugaccess
		input  wire [29:0]  nios2_gen2_0_instruction_master_address,        //          nios2_gen2_0_instruction_master.address
		output wire         nios2_gen2_0_instruction_master_waitrequest,    //                                         .waitrequest
		input  wire         nios2_gen2_0_instruction_master_read,           //                                         .read
		output wire [31:0]  nios2_gen2_0_instruction_master_readdata,       //                                         .readdata
		output wire [2:0]   audio_in_dma_csr_address,                       //                         audio_in_dma_csr.address
		output wire         audio_in_dma_csr_write,                         //                                         .write
		output wire         audio_in_dma_csr_read,                          //                                         .read
		input  wire [31:0]  audio_in_dma_csr_readdata,                      //                                         .readdata
		output wire [31:0]  audio_in_dma_csr_writedata,                     //                                         .writedata
		output wire [3:0]   audio_in_dma_csr_byteenable,                    //                                         .byteenable
		output wire         audio_in_dma_descriptor_slave_write,            //            audio_in_dma_descriptor_slave.write
		output wire [127:0] audio_in_dma_descriptor_slave_writedata,        //                                         .writedata
		output wire [15:0]  audio_in_dma_descriptor_slave_byteenable,       //                                         .byteenable
		input  wire         audio_in_dma_descriptor_slave_waitrequest,      //                                         .waitrequest
		output wire [2:0]   audio_out_dma_csr_address,                      //                        audio_out_dma_csr.address
		output wire         audio_out_dma_csr_write,                        //                                         .write
		output wire         audio_out_dma_csr_read,                         //                                         .read
		input  wire [31:0]  audio_out_dma_csr_readdata,                     //                                         .readdata
		output wire [31:0]  audio_out_dma_csr_writedata,                    //                                         .writedata
		output wire [3:0]   audio_out_dma_csr_byteenable,                   //                                         .byteenable
		output wire         audio_out_dma_descriptor_slave_write,           //           audio_out_dma_descriptor_slave.write
		output wire [127:0] audio_out_dma_descriptor_slave_writedata,       //                                         .writedata
		output wire [15:0]  audio_out_dma_descriptor_slave_byteenable,      //                                         .byteenable
		input  wire         audio_out_dma_descriptor_slave_waitrequest,     //                                         .waitrequest
		output wire [25:0]  avalon2mem_0_avalon_slave_0_address,            //              avalon2mem_0_avalon_slave_0.address
		output wire         avalon2mem_0_avalon_slave_0_write,              //                                         .write
		output wire         avalon2mem_0_avalon_slave_0_read,               //                                         .read
		input  wire [31:0]  avalon2mem_0_avalon_slave_0_readdata,           //                                         .readdata
		output wire [31:0]  avalon2mem_0_avalon_slave_0_writedata,          //                                         .writedata
		output wire [3:0]   avalon2mem_0_avalon_slave_0_byteenable,         //                                         .byteenable
		input  wire         avalon2mem_0_avalon_slave_0_readdatavalid,      //                                         .readdatavalid
		input  wire         avalon2mem_0_avalon_slave_0_waitrequest,        //                                         .waitrequest
		output wire [19:0]  io_bridge_0_avalon_slave_0_address,             //               io_bridge_0_avalon_slave_0.address
		output wire         io_bridge_0_avalon_slave_0_write,               //                                         .write
		output wire         io_bridge_0_avalon_slave_0_read,                //                                         .read
		input  wire [7:0]   io_bridge_0_avalon_slave_0_readdata,            //                                         .readdata
		output wire [7:0]   io_bridge_0_avalon_slave_0_writedata,           //                                         .writedata
		input  wire         io_bridge_0_avalon_slave_0_readdatavalid,       //                                         .readdatavalid
		input  wire         io_bridge_0_avalon_slave_0_waitrequest,         //                                         .waitrequest
		output wire [19:0]  io_bridge_1_avalon_slave_0_address,             //               io_bridge_1_avalon_slave_0.address
		output wire         io_bridge_1_avalon_slave_0_write,               //                                         .write
		output wire         io_bridge_1_avalon_slave_0_read,                //                                         .read
		input  wire [7:0]   io_bridge_1_avalon_slave_0_readdata,            //                                         .readdata
		output wire [7:0]   io_bridge_1_avalon_slave_0_writedata,           //                                         .writedata
		input  wire         io_bridge_1_avalon_slave_0_readdatavalid,       //                                         .readdatavalid
		input  wire         io_bridge_1_avalon_slave_0_waitrequest,         //                                         .waitrequest
		output wire [7:0]   jtag_0_avalon_slave_0_address,                  //                    jtag_0_avalon_slave_0.address
		output wire         jtag_0_avalon_slave_0_write,                    //                                         .write
		output wire         jtag_0_avalon_slave_0_read,                     //                                         .read
		input  wire [31:0]  jtag_0_avalon_slave_0_readdata,                 //                                         .readdata
		output wire [31:0]  jtag_0_avalon_slave_0_writedata,                //                                         .writedata
		input  wire         jtag_0_avalon_slave_0_readdatavalid,            //                                         .readdatavalid
		input  wire         jtag_0_avalon_slave_0_waitrequest,              //                                         .waitrequest
		output wire [7:0]   jtag_1_avalon_slave_0_address,                  //                    jtag_1_avalon_slave_0.address
		output wire         jtag_1_avalon_slave_0_write,                    //                                         .write
		output wire         jtag_1_avalon_slave_0_read,                     //                                         .read
		input  wire [31:0]  jtag_1_avalon_slave_0_readdata,                 //                                         .readdata
		output wire [31:0]  jtag_1_avalon_slave_0_writedata,                //                                         .writedata
		input  wire         jtag_1_avalon_slave_0_readdatavalid,            //                                         .readdatavalid
		input  wire         jtag_1_avalon_slave_0_waitrequest,              //                                         .waitrequest
		output wire [2:0]   jtagdebug_csr_address,                          //                            jtagdebug_csr.address
		output wire         jtagdebug_csr_write,                            //                                         .write
		output wire         jtagdebug_csr_read,                             //                                         .read
		input  wire [31:0]  jtagdebug_csr_readdata,                         //                                         .readdata
		output wire [31:0]  jtagdebug_csr_writedata,                        //                                         .writedata
		output wire [3:0]   jtagdebug_csr_byteenable,                       //                                         .byteenable
		output wire         jtagdebug_descriptor_slave_write,               //               jtagdebug_descriptor_slave.write
		output wire [127:0] jtagdebug_descriptor_slave_writedata,           //                                         .writedata
		output wire [15:0]  jtagdebug_descriptor_slave_byteenable,          //                                         .byteenable
		input  wire         jtagdebug_descriptor_slave_waitrequest,         //                                         .waitrequest
		output wire [8:0]   nios2_gen2_0_debug_mem_slave_address,           //             nios2_gen2_0_debug_mem_slave.address
		output wire         nios2_gen2_0_debug_mem_slave_write,             //                                         .write
		output wire         nios2_gen2_0_debug_mem_slave_read,              //                                         .read
		input  wire [31:0]  nios2_gen2_0_debug_mem_slave_readdata,          //                                         .readdata
		output wire [31:0]  nios2_gen2_0_debug_mem_slave_writedata,         //                                         .writedata
		output wire [3:0]   nios2_gen2_0_debug_mem_slave_byteenable,        //                                         .byteenable
		input  wire         nios2_gen2_0_debug_mem_slave_waitrequest,       //                                         .waitrequest
		output wire         nios2_gen2_0_debug_mem_slave_debugaccess,       //                                         .debugaccess
		output wire [8:0]   onchip_memory2_0_s1_address,                    //                      onchip_memory2_0_s1.address
		output wire         onchip_memory2_0_s1_write,                      //                                         .write
		input  wire [31:0]  onchip_memory2_0_s1_readdata,                   //                                         .readdata
		output wire [31:0]  onchip_memory2_0_s1_writedata,                  //                                         .writedata
		output wire [3:0]   onchip_memory2_0_s1_byteenable,                 //                                         .byteenable
		output wire         onchip_memory2_0_s1_chipselect,                 //                                         .chipselect
		output wire         onchip_memory2_0_s1_clken,                      //                                         .clken
		output wire [1:0]   pio_0_s1_address,                               //                                 pio_0_s1.address
		output wire         pio_0_s1_write,                                 //                                         .write
		input  wire [31:0]  pio_0_s1_readdata,                              //                                         .readdata
		output wire [31:0]  pio_0_s1_writedata,                             //                                         .writedata
		output wire         pio_0_s1_chipselect,                            //                                         .chipselect
		output wire [2:0]   pio_1_s1_address,                               //                                 pio_1_s1.address
		output wire         pio_1_s1_write,                                 //                                         .write
		input  wire [31:0]  pio_1_s1_readdata,                              //                                         .readdata
		output wire [31:0]  pio_1_s1_writedata,                             //                                         .writedata
		output wire         pio_1_s1_chipselect,                            //                                         .chipselect
		output wire [2:0]   spi_0_spi_control_port_address,                 //                   spi_0_spi_control_port.address
		output wire         spi_0_spi_control_port_write,                   //                                         .write
		output wire         spi_0_spi_control_port_read,                    //                                         .read
		input  wire [15:0]  spi_0_spi_control_port_readdata,                //                                         .readdata
		output wire [15:0]  spi_0_spi_control_port_writedata,               //                                         .writedata
		output wire         spi_0_spi_control_port_chipselect               //                                         .chipselect
	);

	wire          nios2_gen2_0_data_master_translator_avalon_universal_master_0_waitrequest;                      // nios2_gen2_0_data_master_agent:av_waitrequest -> nios2_gen2_0_data_master_translator:uav_waitrequest
	wire   [31:0] nios2_gen2_0_data_master_translator_avalon_universal_master_0_readdata;                         // nios2_gen2_0_data_master_agent:av_readdata -> nios2_gen2_0_data_master_translator:uav_readdata
	wire          nios2_gen2_0_data_master_translator_avalon_universal_master_0_debugaccess;                      // nios2_gen2_0_data_master_translator:uav_debugaccess -> nios2_gen2_0_data_master_agent:av_debugaccess
	wire   [31:0] nios2_gen2_0_data_master_translator_avalon_universal_master_0_address;                          // nios2_gen2_0_data_master_translator:uav_address -> nios2_gen2_0_data_master_agent:av_address
	wire          nios2_gen2_0_data_master_translator_avalon_universal_master_0_read;                             // nios2_gen2_0_data_master_translator:uav_read -> nios2_gen2_0_data_master_agent:av_read
	wire    [3:0] nios2_gen2_0_data_master_translator_avalon_universal_master_0_byteenable;                       // nios2_gen2_0_data_master_translator:uav_byteenable -> nios2_gen2_0_data_master_agent:av_byteenable
	wire          nios2_gen2_0_data_master_translator_avalon_universal_master_0_readdatavalid;                    // nios2_gen2_0_data_master_agent:av_readdatavalid -> nios2_gen2_0_data_master_translator:uav_readdatavalid
	wire          nios2_gen2_0_data_master_translator_avalon_universal_master_0_lock;                             // nios2_gen2_0_data_master_translator:uav_lock -> nios2_gen2_0_data_master_agent:av_lock
	wire          nios2_gen2_0_data_master_translator_avalon_universal_master_0_write;                            // nios2_gen2_0_data_master_translator:uav_write -> nios2_gen2_0_data_master_agent:av_write
	wire   [31:0] nios2_gen2_0_data_master_translator_avalon_universal_master_0_writedata;                        // nios2_gen2_0_data_master_translator:uav_writedata -> nios2_gen2_0_data_master_agent:av_writedata
	wire    [2:0] nios2_gen2_0_data_master_translator_avalon_universal_master_0_burstcount;                       // nios2_gen2_0_data_master_translator:uav_burstcount -> nios2_gen2_0_data_master_agent:av_burstcount
	wire          rsp_mux_src_valid;                                                                              // rsp_mux:src_valid -> nios2_gen2_0_data_master_agent:rp_valid
	wire  [111:0] rsp_mux_src_data;                                                                               // rsp_mux:src_data -> nios2_gen2_0_data_master_agent:rp_data
	wire          rsp_mux_src_ready;                                                                              // nios2_gen2_0_data_master_agent:rp_ready -> rsp_mux:src_ready
	wire   [15:0] rsp_mux_src_channel;                                                                            // rsp_mux:src_channel -> nios2_gen2_0_data_master_agent:rp_channel
	wire          rsp_mux_src_startofpacket;                                                                      // rsp_mux:src_startofpacket -> nios2_gen2_0_data_master_agent:rp_startofpacket
	wire          rsp_mux_src_endofpacket;                                                                        // rsp_mux:src_endofpacket -> nios2_gen2_0_data_master_agent:rp_endofpacket
	wire          nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_waitrequest;               // nios2_gen2_0_instruction_master_agent:av_waitrequest -> nios2_gen2_0_instruction_master_translator:uav_waitrequest
	wire   [31:0] nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_readdata;                  // nios2_gen2_0_instruction_master_agent:av_readdata -> nios2_gen2_0_instruction_master_translator:uav_readdata
	wire          nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_debugaccess;               // nios2_gen2_0_instruction_master_translator:uav_debugaccess -> nios2_gen2_0_instruction_master_agent:av_debugaccess
	wire   [31:0] nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_address;                   // nios2_gen2_0_instruction_master_translator:uav_address -> nios2_gen2_0_instruction_master_agent:av_address
	wire          nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_read;                      // nios2_gen2_0_instruction_master_translator:uav_read -> nios2_gen2_0_instruction_master_agent:av_read
	wire    [3:0] nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_byteenable;                // nios2_gen2_0_instruction_master_translator:uav_byteenable -> nios2_gen2_0_instruction_master_agent:av_byteenable
	wire          nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_readdatavalid;             // nios2_gen2_0_instruction_master_agent:av_readdatavalid -> nios2_gen2_0_instruction_master_translator:uav_readdatavalid
	wire          nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_lock;                      // nios2_gen2_0_instruction_master_translator:uav_lock -> nios2_gen2_0_instruction_master_agent:av_lock
	wire          nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_write;                     // nios2_gen2_0_instruction_master_translator:uav_write -> nios2_gen2_0_instruction_master_agent:av_write
	wire   [31:0] nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_writedata;                 // nios2_gen2_0_instruction_master_translator:uav_writedata -> nios2_gen2_0_instruction_master_agent:av_writedata
	wire    [2:0] nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_burstcount;                // nios2_gen2_0_instruction_master_translator:uav_burstcount -> nios2_gen2_0_instruction_master_agent:av_burstcount
	wire          rsp_mux_001_src_valid;                                                                          // rsp_mux_001:src_valid -> nios2_gen2_0_instruction_master_agent:rp_valid
	wire  [111:0] rsp_mux_001_src_data;                                                                           // rsp_mux_001:src_data -> nios2_gen2_0_instruction_master_agent:rp_data
	wire          rsp_mux_001_src_ready;                                                                          // nios2_gen2_0_instruction_master_agent:rp_ready -> rsp_mux_001:src_ready
	wire   [15:0] rsp_mux_001_src_channel;                                                                        // rsp_mux_001:src_channel -> nios2_gen2_0_instruction_master_agent:rp_channel
	wire          rsp_mux_001_src_startofpacket;                                                                  // rsp_mux_001:src_startofpacket -> nios2_gen2_0_instruction_master_agent:rp_startofpacket
	wire          rsp_mux_001_src_endofpacket;                                                                    // rsp_mux_001:src_endofpacket -> nios2_gen2_0_instruction_master_agent:rp_endofpacket
	wire          audio_out_dma_mm_read_translator_avalon_universal_master_0_waitrequest;                         // audio_out_dma_mm_read_agent:av_waitrequest -> audio_out_dma_mm_read_translator:uav_waitrequest
	wire   [31:0] audio_out_dma_mm_read_translator_avalon_universal_master_0_readdata;                            // audio_out_dma_mm_read_agent:av_readdata -> audio_out_dma_mm_read_translator:uav_readdata
	wire          audio_out_dma_mm_read_translator_avalon_universal_master_0_debugaccess;                         // audio_out_dma_mm_read_translator:uav_debugaccess -> audio_out_dma_mm_read_agent:av_debugaccess
	wire   [31:0] audio_out_dma_mm_read_translator_avalon_universal_master_0_address;                             // audio_out_dma_mm_read_translator:uav_address -> audio_out_dma_mm_read_agent:av_address
	wire          audio_out_dma_mm_read_translator_avalon_universal_master_0_read;                                // audio_out_dma_mm_read_translator:uav_read -> audio_out_dma_mm_read_agent:av_read
	wire    [3:0] audio_out_dma_mm_read_translator_avalon_universal_master_0_byteenable;                          // audio_out_dma_mm_read_translator:uav_byteenable -> audio_out_dma_mm_read_agent:av_byteenable
	wire          audio_out_dma_mm_read_translator_avalon_universal_master_0_readdatavalid;                       // audio_out_dma_mm_read_agent:av_readdatavalid -> audio_out_dma_mm_read_translator:uav_readdatavalid
	wire          audio_out_dma_mm_read_translator_avalon_universal_master_0_lock;                                // audio_out_dma_mm_read_translator:uav_lock -> audio_out_dma_mm_read_agent:av_lock
	wire          audio_out_dma_mm_read_translator_avalon_universal_master_0_write;                               // audio_out_dma_mm_read_translator:uav_write -> audio_out_dma_mm_read_agent:av_write
	wire   [31:0] audio_out_dma_mm_read_translator_avalon_universal_master_0_writedata;                           // audio_out_dma_mm_read_translator:uav_writedata -> audio_out_dma_mm_read_agent:av_writedata
	wire    [2:0] audio_out_dma_mm_read_translator_avalon_universal_master_0_burstcount;                          // audio_out_dma_mm_read_translator:uav_burstcount -> audio_out_dma_mm_read_agent:av_burstcount
	wire          rsp_mux_002_src_valid;                                                                          // rsp_mux_002:src_valid -> audio_out_dma_mm_read_agent:rp_valid
	wire  [111:0] rsp_mux_002_src_data;                                                                           // rsp_mux_002:src_data -> audio_out_dma_mm_read_agent:rp_data
	wire          rsp_mux_002_src_ready;                                                                          // audio_out_dma_mm_read_agent:rp_ready -> rsp_mux_002:src_ready
	wire   [15:0] rsp_mux_002_src_channel;                                                                        // rsp_mux_002:src_channel -> audio_out_dma_mm_read_agent:rp_channel
	wire          rsp_mux_002_src_startofpacket;                                                                  // rsp_mux_002:src_startofpacket -> audio_out_dma_mm_read_agent:rp_startofpacket
	wire          rsp_mux_002_src_endofpacket;                                                                    // rsp_mux_002:src_endofpacket -> audio_out_dma_mm_read_agent:rp_endofpacket
	wire          audio_in_dma_mm_write_translator_avalon_universal_master_0_waitrequest;                         // audio_in_dma_mm_write_agent:av_waitrequest -> audio_in_dma_mm_write_translator:uav_waitrequest
	wire   [31:0] audio_in_dma_mm_write_translator_avalon_universal_master_0_readdata;                            // audio_in_dma_mm_write_agent:av_readdata -> audio_in_dma_mm_write_translator:uav_readdata
	wire          audio_in_dma_mm_write_translator_avalon_universal_master_0_debugaccess;                         // audio_in_dma_mm_write_translator:uav_debugaccess -> audio_in_dma_mm_write_agent:av_debugaccess
	wire   [31:0] audio_in_dma_mm_write_translator_avalon_universal_master_0_address;                             // audio_in_dma_mm_write_translator:uav_address -> audio_in_dma_mm_write_agent:av_address
	wire          audio_in_dma_mm_write_translator_avalon_universal_master_0_read;                                // audio_in_dma_mm_write_translator:uav_read -> audio_in_dma_mm_write_agent:av_read
	wire    [3:0] audio_in_dma_mm_write_translator_avalon_universal_master_0_byteenable;                          // audio_in_dma_mm_write_translator:uav_byteenable -> audio_in_dma_mm_write_agent:av_byteenable
	wire          audio_in_dma_mm_write_translator_avalon_universal_master_0_readdatavalid;                       // audio_in_dma_mm_write_agent:av_readdatavalid -> audio_in_dma_mm_write_translator:uav_readdatavalid
	wire          audio_in_dma_mm_write_translator_avalon_universal_master_0_lock;                                // audio_in_dma_mm_write_translator:uav_lock -> audio_in_dma_mm_write_agent:av_lock
	wire          audio_in_dma_mm_write_translator_avalon_universal_master_0_write;                               // audio_in_dma_mm_write_translator:uav_write -> audio_in_dma_mm_write_agent:av_write
	wire   [31:0] audio_in_dma_mm_write_translator_avalon_universal_master_0_writedata;                           // audio_in_dma_mm_write_translator:uav_writedata -> audio_in_dma_mm_write_agent:av_writedata
	wire    [2:0] audio_in_dma_mm_write_translator_avalon_universal_master_0_burstcount;                          // audio_in_dma_mm_write_translator:uav_burstcount -> audio_in_dma_mm_write_agent:av_burstcount
	wire          rsp_mux_003_src_valid;                                                                          // rsp_mux_003:src_valid -> audio_in_dma_mm_write_agent:rp_valid
	wire  [111:0] rsp_mux_003_src_data;                                                                           // rsp_mux_003:src_data -> audio_in_dma_mm_write_agent:rp_data
	wire          rsp_mux_003_src_ready;                                                                          // audio_in_dma_mm_write_agent:rp_ready -> rsp_mux_003:src_ready
	wire   [15:0] rsp_mux_003_src_channel;                                                                        // rsp_mux_003:src_channel -> audio_in_dma_mm_write_agent:rp_channel
	wire          rsp_mux_003_src_startofpacket;                                                                  // rsp_mux_003:src_startofpacket -> audio_in_dma_mm_write_agent:rp_startofpacket
	wire          rsp_mux_003_src_endofpacket;                                                                    // rsp_mux_003:src_endofpacket -> audio_in_dma_mm_write_agent:rp_endofpacket
	wire          jtagdebug_mm_write_translator_avalon_universal_master_0_waitrequest;                            // jtagdebug_mm_write_agent:av_waitrequest -> jtagdebug_mm_write_translator:uav_waitrequest
	wire    [7:0] jtagdebug_mm_write_translator_avalon_universal_master_0_readdata;                               // jtagdebug_mm_write_agent:av_readdata -> jtagdebug_mm_write_translator:uav_readdata
	wire          jtagdebug_mm_write_translator_avalon_universal_master_0_debugaccess;                            // jtagdebug_mm_write_translator:uav_debugaccess -> jtagdebug_mm_write_agent:av_debugaccess
	wire   [31:0] jtagdebug_mm_write_translator_avalon_universal_master_0_address;                                // jtagdebug_mm_write_translator:uav_address -> jtagdebug_mm_write_agent:av_address
	wire          jtagdebug_mm_write_translator_avalon_universal_master_0_read;                                   // jtagdebug_mm_write_translator:uav_read -> jtagdebug_mm_write_agent:av_read
	wire    [0:0] jtagdebug_mm_write_translator_avalon_universal_master_0_byteenable;                             // jtagdebug_mm_write_translator:uav_byteenable -> jtagdebug_mm_write_agent:av_byteenable
	wire          jtagdebug_mm_write_translator_avalon_universal_master_0_readdatavalid;                          // jtagdebug_mm_write_agent:av_readdatavalid -> jtagdebug_mm_write_translator:uav_readdatavalid
	wire          jtagdebug_mm_write_translator_avalon_universal_master_0_lock;                                   // jtagdebug_mm_write_translator:uav_lock -> jtagdebug_mm_write_agent:av_lock
	wire          jtagdebug_mm_write_translator_avalon_universal_master_0_write;                                  // jtagdebug_mm_write_translator:uav_write -> jtagdebug_mm_write_agent:av_write
	wire    [7:0] jtagdebug_mm_write_translator_avalon_universal_master_0_writedata;                              // jtagdebug_mm_write_translator:uav_writedata -> jtagdebug_mm_write_agent:av_writedata
	wire    [0:0] jtagdebug_mm_write_translator_avalon_universal_master_0_burstcount;                             // jtagdebug_mm_write_translator:uav_burstcount -> jtagdebug_mm_write_agent:av_burstcount
	wire          rsp_mux_004_src_valid;                                                                          // rsp_mux_004:src_valid -> jtagdebug_mm_write_agent:rp_valid
	wire   [84:0] rsp_mux_004_src_data;                                                                           // rsp_mux_004:src_data -> jtagdebug_mm_write_agent:rp_data
	wire          rsp_mux_004_src_ready;                                                                          // jtagdebug_mm_write_agent:rp_ready -> rsp_mux_004:src_ready
	wire   [15:0] rsp_mux_004_src_channel;                                                                        // rsp_mux_004:src_channel -> jtagdebug_mm_write_agent:rp_channel
	wire          rsp_mux_004_src_startofpacket;                                                                  // rsp_mux_004:src_startofpacket -> jtagdebug_mm_write_agent:rp_startofpacket
	wire          rsp_mux_004_src_endofpacket;                                                                    // rsp_mux_004:src_endofpacket -> jtagdebug_mm_write_agent:rp_endofpacket
	wire    [7:0] io_bridge_1_avalon_slave_0_agent_m0_readdata;                                                   // io_bridge_1_avalon_slave_0_translator:uav_readdata -> io_bridge_1_avalon_slave_0_agent:m0_readdata
	wire          io_bridge_1_avalon_slave_0_agent_m0_waitrequest;                                                // io_bridge_1_avalon_slave_0_translator:uav_waitrequest -> io_bridge_1_avalon_slave_0_agent:m0_waitrequest
	wire          io_bridge_1_avalon_slave_0_agent_m0_debugaccess;                                                // io_bridge_1_avalon_slave_0_agent:m0_debugaccess -> io_bridge_1_avalon_slave_0_translator:uav_debugaccess
	wire   [31:0] io_bridge_1_avalon_slave_0_agent_m0_address;                                                    // io_bridge_1_avalon_slave_0_agent:m0_address -> io_bridge_1_avalon_slave_0_translator:uav_address
	wire    [0:0] io_bridge_1_avalon_slave_0_agent_m0_byteenable;                                                 // io_bridge_1_avalon_slave_0_agent:m0_byteenable -> io_bridge_1_avalon_slave_0_translator:uav_byteenable
	wire          io_bridge_1_avalon_slave_0_agent_m0_read;                                                       // io_bridge_1_avalon_slave_0_agent:m0_read -> io_bridge_1_avalon_slave_0_translator:uav_read
	wire          io_bridge_1_avalon_slave_0_agent_m0_readdatavalid;                                              // io_bridge_1_avalon_slave_0_translator:uav_readdatavalid -> io_bridge_1_avalon_slave_0_agent:m0_readdatavalid
	wire          io_bridge_1_avalon_slave_0_agent_m0_lock;                                                       // io_bridge_1_avalon_slave_0_agent:m0_lock -> io_bridge_1_avalon_slave_0_translator:uav_lock
	wire    [7:0] io_bridge_1_avalon_slave_0_agent_m0_writedata;                                                  // io_bridge_1_avalon_slave_0_agent:m0_writedata -> io_bridge_1_avalon_slave_0_translator:uav_writedata
	wire          io_bridge_1_avalon_slave_0_agent_m0_write;                                                      // io_bridge_1_avalon_slave_0_agent:m0_write -> io_bridge_1_avalon_slave_0_translator:uav_write
	wire    [0:0] io_bridge_1_avalon_slave_0_agent_m0_burstcount;                                                 // io_bridge_1_avalon_slave_0_agent:m0_burstcount -> io_bridge_1_avalon_slave_0_translator:uav_burstcount
	wire          io_bridge_1_avalon_slave_0_agent_rf_source_valid;                                               // io_bridge_1_avalon_slave_0_agent:rf_source_valid -> io_bridge_1_avalon_slave_0_agent_rsp_fifo:in_valid
	wire   [85:0] io_bridge_1_avalon_slave_0_agent_rf_source_data;                                                // io_bridge_1_avalon_slave_0_agent:rf_source_data -> io_bridge_1_avalon_slave_0_agent_rsp_fifo:in_data
	wire          io_bridge_1_avalon_slave_0_agent_rf_source_ready;                                               // io_bridge_1_avalon_slave_0_agent_rsp_fifo:in_ready -> io_bridge_1_avalon_slave_0_agent:rf_source_ready
	wire          io_bridge_1_avalon_slave_0_agent_rf_source_startofpacket;                                       // io_bridge_1_avalon_slave_0_agent:rf_source_startofpacket -> io_bridge_1_avalon_slave_0_agent_rsp_fifo:in_startofpacket
	wire          io_bridge_1_avalon_slave_0_agent_rf_source_endofpacket;                                         // io_bridge_1_avalon_slave_0_agent:rf_source_endofpacket -> io_bridge_1_avalon_slave_0_agent_rsp_fifo:in_endofpacket
	wire          io_bridge_1_avalon_slave_0_agent_rsp_fifo_out_valid;                                            // io_bridge_1_avalon_slave_0_agent_rsp_fifo:out_valid -> io_bridge_1_avalon_slave_0_agent:rf_sink_valid
	wire   [85:0] io_bridge_1_avalon_slave_0_agent_rsp_fifo_out_data;                                             // io_bridge_1_avalon_slave_0_agent_rsp_fifo:out_data -> io_bridge_1_avalon_slave_0_agent:rf_sink_data
	wire          io_bridge_1_avalon_slave_0_agent_rsp_fifo_out_ready;                                            // io_bridge_1_avalon_slave_0_agent:rf_sink_ready -> io_bridge_1_avalon_slave_0_agent_rsp_fifo:out_ready
	wire          io_bridge_1_avalon_slave_0_agent_rsp_fifo_out_startofpacket;                                    // io_bridge_1_avalon_slave_0_agent_rsp_fifo:out_startofpacket -> io_bridge_1_avalon_slave_0_agent:rf_sink_startofpacket
	wire          io_bridge_1_avalon_slave_0_agent_rsp_fifo_out_endofpacket;                                      // io_bridge_1_avalon_slave_0_agent_rsp_fifo:out_endofpacket -> io_bridge_1_avalon_slave_0_agent:rf_sink_endofpacket
	wire   [31:0] avalon2mem_0_avalon_slave_0_agent_m0_readdata;                                                  // avalon2mem_0_avalon_slave_0_translator:uav_readdata -> avalon2mem_0_avalon_slave_0_agent:m0_readdata
	wire          avalon2mem_0_avalon_slave_0_agent_m0_waitrequest;                                               // avalon2mem_0_avalon_slave_0_translator:uav_waitrequest -> avalon2mem_0_avalon_slave_0_agent:m0_waitrequest
	wire          avalon2mem_0_avalon_slave_0_agent_m0_debugaccess;                                               // avalon2mem_0_avalon_slave_0_agent:m0_debugaccess -> avalon2mem_0_avalon_slave_0_translator:uav_debugaccess
	wire   [31:0] avalon2mem_0_avalon_slave_0_agent_m0_address;                                                   // avalon2mem_0_avalon_slave_0_agent:m0_address -> avalon2mem_0_avalon_slave_0_translator:uav_address
	wire    [3:0] avalon2mem_0_avalon_slave_0_agent_m0_byteenable;                                                // avalon2mem_0_avalon_slave_0_agent:m0_byteenable -> avalon2mem_0_avalon_slave_0_translator:uav_byteenable
	wire          avalon2mem_0_avalon_slave_0_agent_m0_read;                                                      // avalon2mem_0_avalon_slave_0_agent:m0_read -> avalon2mem_0_avalon_slave_0_translator:uav_read
	wire          avalon2mem_0_avalon_slave_0_agent_m0_readdatavalid;                                             // avalon2mem_0_avalon_slave_0_translator:uav_readdatavalid -> avalon2mem_0_avalon_slave_0_agent:m0_readdatavalid
	wire          avalon2mem_0_avalon_slave_0_agent_m0_lock;                                                      // avalon2mem_0_avalon_slave_0_agent:m0_lock -> avalon2mem_0_avalon_slave_0_translator:uav_lock
	wire   [31:0] avalon2mem_0_avalon_slave_0_agent_m0_writedata;                                                 // avalon2mem_0_avalon_slave_0_agent:m0_writedata -> avalon2mem_0_avalon_slave_0_translator:uav_writedata
	wire          avalon2mem_0_avalon_slave_0_agent_m0_write;                                                     // avalon2mem_0_avalon_slave_0_agent:m0_write -> avalon2mem_0_avalon_slave_0_translator:uav_write
	wire    [2:0] avalon2mem_0_avalon_slave_0_agent_m0_burstcount;                                                // avalon2mem_0_avalon_slave_0_agent:m0_burstcount -> avalon2mem_0_avalon_slave_0_translator:uav_burstcount
	wire          avalon2mem_0_avalon_slave_0_agent_rf_source_valid;                                              // avalon2mem_0_avalon_slave_0_agent:rf_source_valid -> avalon2mem_0_avalon_slave_0_agent_rsp_fifo:in_valid
	wire  [112:0] avalon2mem_0_avalon_slave_0_agent_rf_source_data;                                               // avalon2mem_0_avalon_slave_0_agent:rf_source_data -> avalon2mem_0_avalon_slave_0_agent_rsp_fifo:in_data
	wire          avalon2mem_0_avalon_slave_0_agent_rf_source_ready;                                              // avalon2mem_0_avalon_slave_0_agent_rsp_fifo:in_ready -> avalon2mem_0_avalon_slave_0_agent:rf_source_ready
	wire          avalon2mem_0_avalon_slave_0_agent_rf_source_startofpacket;                                      // avalon2mem_0_avalon_slave_0_agent:rf_source_startofpacket -> avalon2mem_0_avalon_slave_0_agent_rsp_fifo:in_startofpacket
	wire          avalon2mem_0_avalon_slave_0_agent_rf_source_endofpacket;                                        // avalon2mem_0_avalon_slave_0_agent:rf_source_endofpacket -> avalon2mem_0_avalon_slave_0_agent_rsp_fifo:in_endofpacket
	wire          avalon2mem_0_avalon_slave_0_agent_rsp_fifo_out_valid;                                           // avalon2mem_0_avalon_slave_0_agent_rsp_fifo:out_valid -> avalon2mem_0_avalon_slave_0_agent:rf_sink_valid
	wire  [112:0] avalon2mem_0_avalon_slave_0_agent_rsp_fifo_out_data;                                            // avalon2mem_0_avalon_slave_0_agent_rsp_fifo:out_data -> avalon2mem_0_avalon_slave_0_agent:rf_sink_data
	wire          avalon2mem_0_avalon_slave_0_agent_rsp_fifo_out_ready;                                           // avalon2mem_0_avalon_slave_0_agent:rf_sink_ready -> avalon2mem_0_avalon_slave_0_agent_rsp_fifo:out_ready
	wire          avalon2mem_0_avalon_slave_0_agent_rsp_fifo_out_startofpacket;                                   // avalon2mem_0_avalon_slave_0_agent_rsp_fifo:out_startofpacket -> avalon2mem_0_avalon_slave_0_agent:rf_sink_startofpacket
	wire          avalon2mem_0_avalon_slave_0_agent_rsp_fifo_out_endofpacket;                                     // avalon2mem_0_avalon_slave_0_agent_rsp_fifo:out_endofpacket -> avalon2mem_0_avalon_slave_0_agent:rf_sink_endofpacket
	wire          cmd_mux_001_src_valid;                                                                          // cmd_mux_001:src_valid -> avalon2mem_0_avalon_slave_0_agent:cp_valid
	wire  [111:0] cmd_mux_001_src_data;                                                                           // cmd_mux_001:src_data -> avalon2mem_0_avalon_slave_0_agent:cp_data
	wire          cmd_mux_001_src_ready;                                                                          // avalon2mem_0_avalon_slave_0_agent:cp_ready -> cmd_mux_001:src_ready
	wire   [15:0] cmd_mux_001_src_channel;                                                                        // cmd_mux_001:src_channel -> avalon2mem_0_avalon_slave_0_agent:cp_channel
	wire          cmd_mux_001_src_startofpacket;                                                                  // cmd_mux_001:src_startofpacket -> avalon2mem_0_avalon_slave_0_agent:cp_startofpacket
	wire          cmd_mux_001_src_endofpacket;                                                                    // cmd_mux_001:src_endofpacket -> avalon2mem_0_avalon_slave_0_agent:cp_endofpacket
	wire   [31:0] jtag_0_avalon_slave_0_agent_m0_readdata;                                                        // jtag_0_avalon_slave_0_translator:uav_readdata -> jtag_0_avalon_slave_0_agent:m0_readdata
	wire          jtag_0_avalon_slave_0_agent_m0_waitrequest;                                                     // jtag_0_avalon_slave_0_translator:uav_waitrequest -> jtag_0_avalon_slave_0_agent:m0_waitrequest
	wire          jtag_0_avalon_slave_0_agent_m0_debugaccess;                                                     // jtag_0_avalon_slave_0_agent:m0_debugaccess -> jtag_0_avalon_slave_0_translator:uav_debugaccess
	wire   [31:0] jtag_0_avalon_slave_0_agent_m0_address;                                                         // jtag_0_avalon_slave_0_agent:m0_address -> jtag_0_avalon_slave_0_translator:uav_address
	wire    [3:0] jtag_0_avalon_slave_0_agent_m0_byteenable;                                                      // jtag_0_avalon_slave_0_agent:m0_byteenable -> jtag_0_avalon_slave_0_translator:uav_byteenable
	wire          jtag_0_avalon_slave_0_agent_m0_read;                                                            // jtag_0_avalon_slave_0_agent:m0_read -> jtag_0_avalon_slave_0_translator:uav_read
	wire          jtag_0_avalon_slave_0_agent_m0_readdatavalid;                                                   // jtag_0_avalon_slave_0_translator:uav_readdatavalid -> jtag_0_avalon_slave_0_agent:m0_readdatavalid
	wire          jtag_0_avalon_slave_0_agent_m0_lock;                                                            // jtag_0_avalon_slave_0_agent:m0_lock -> jtag_0_avalon_slave_0_translator:uav_lock
	wire   [31:0] jtag_0_avalon_slave_0_agent_m0_writedata;                                                       // jtag_0_avalon_slave_0_agent:m0_writedata -> jtag_0_avalon_slave_0_translator:uav_writedata
	wire          jtag_0_avalon_slave_0_agent_m0_write;                                                           // jtag_0_avalon_slave_0_agent:m0_write -> jtag_0_avalon_slave_0_translator:uav_write
	wire    [2:0] jtag_0_avalon_slave_0_agent_m0_burstcount;                                                      // jtag_0_avalon_slave_0_agent:m0_burstcount -> jtag_0_avalon_slave_0_translator:uav_burstcount
	wire          jtag_0_avalon_slave_0_agent_rf_source_valid;                                                    // jtag_0_avalon_slave_0_agent:rf_source_valid -> jtag_0_avalon_slave_0_agent_rsp_fifo:in_valid
	wire  [112:0] jtag_0_avalon_slave_0_agent_rf_source_data;                                                     // jtag_0_avalon_slave_0_agent:rf_source_data -> jtag_0_avalon_slave_0_agent_rsp_fifo:in_data
	wire          jtag_0_avalon_slave_0_agent_rf_source_ready;                                                    // jtag_0_avalon_slave_0_agent_rsp_fifo:in_ready -> jtag_0_avalon_slave_0_agent:rf_source_ready
	wire          jtag_0_avalon_slave_0_agent_rf_source_startofpacket;                                            // jtag_0_avalon_slave_0_agent:rf_source_startofpacket -> jtag_0_avalon_slave_0_agent_rsp_fifo:in_startofpacket
	wire          jtag_0_avalon_slave_0_agent_rf_source_endofpacket;                                              // jtag_0_avalon_slave_0_agent:rf_source_endofpacket -> jtag_0_avalon_slave_0_agent_rsp_fifo:in_endofpacket
	wire          jtag_0_avalon_slave_0_agent_rsp_fifo_out_valid;                                                 // jtag_0_avalon_slave_0_agent_rsp_fifo:out_valid -> jtag_0_avalon_slave_0_agent:rf_sink_valid
	wire  [112:0] jtag_0_avalon_slave_0_agent_rsp_fifo_out_data;                                                  // jtag_0_avalon_slave_0_agent_rsp_fifo:out_data -> jtag_0_avalon_slave_0_agent:rf_sink_data
	wire          jtag_0_avalon_slave_0_agent_rsp_fifo_out_ready;                                                 // jtag_0_avalon_slave_0_agent:rf_sink_ready -> jtag_0_avalon_slave_0_agent_rsp_fifo:out_ready
	wire          jtag_0_avalon_slave_0_agent_rsp_fifo_out_startofpacket;                                         // jtag_0_avalon_slave_0_agent_rsp_fifo:out_startofpacket -> jtag_0_avalon_slave_0_agent:rf_sink_startofpacket
	wire          jtag_0_avalon_slave_0_agent_rsp_fifo_out_endofpacket;                                           // jtag_0_avalon_slave_0_agent_rsp_fifo:out_endofpacket -> jtag_0_avalon_slave_0_agent:rf_sink_endofpacket
	wire          cmd_mux_002_src_valid;                                                                          // cmd_mux_002:src_valid -> jtag_0_avalon_slave_0_agent:cp_valid
	wire  [111:0] cmd_mux_002_src_data;                                                                           // cmd_mux_002:src_data -> jtag_0_avalon_slave_0_agent:cp_data
	wire          cmd_mux_002_src_ready;                                                                          // jtag_0_avalon_slave_0_agent:cp_ready -> cmd_mux_002:src_ready
	wire   [15:0] cmd_mux_002_src_channel;                                                                        // cmd_mux_002:src_channel -> jtag_0_avalon_slave_0_agent:cp_channel
	wire          cmd_mux_002_src_startofpacket;                                                                  // cmd_mux_002:src_startofpacket -> jtag_0_avalon_slave_0_agent:cp_startofpacket
	wire          cmd_mux_002_src_endofpacket;                                                                    // cmd_mux_002:src_endofpacket -> jtag_0_avalon_slave_0_agent:cp_endofpacket
	wire   [31:0] jtag_1_avalon_slave_0_agent_m0_readdata;                                                        // jtag_1_avalon_slave_0_translator:uav_readdata -> jtag_1_avalon_slave_0_agent:m0_readdata
	wire          jtag_1_avalon_slave_0_agent_m0_waitrequest;                                                     // jtag_1_avalon_slave_0_translator:uav_waitrequest -> jtag_1_avalon_slave_0_agent:m0_waitrequest
	wire          jtag_1_avalon_slave_0_agent_m0_debugaccess;                                                     // jtag_1_avalon_slave_0_agent:m0_debugaccess -> jtag_1_avalon_slave_0_translator:uav_debugaccess
	wire   [31:0] jtag_1_avalon_slave_0_agent_m0_address;                                                         // jtag_1_avalon_slave_0_agent:m0_address -> jtag_1_avalon_slave_0_translator:uav_address
	wire    [3:0] jtag_1_avalon_slave_0_agent_m0_byteenable;                                                      // jtag_1_avalon_slave_0_agent:m0_byteenable -> jtag_1_avalon_slave_0_translator:uav_byteenable
	wire          jtag_1_avalon_slave_0_agent_m0_read;                                                            // jtag_1_avalon_slave_0_agent:m0_read -> jtag_1_avalon_slave_0_translator:uav_read
	wire          jtag_1_avalon_slave_0_agent_m0_readdatavalid;                                                   // jtag_1_avalon_slave_0_translator:uav_readdatavalid -> jtag_1_avalon_slave_0_agent:m0_readdatavalid
	wire          jtag_1_avalon_slave_0_agent_m0_lock;                                                            // jtag_1_avalon_slave_0_agent:m0_lock -> jtag_1_avalon_slave_0_translator:uav_lock
	wire   [31:0] jtag_1_avalon_slave_0_agent_m0_writedata;                                                       // jtag_1_avalon_slave_0_agent:m0_writedata -> jtag_1_avalon_slave_0_translator:uav_writedata
	wire          jtag_1_avalon_slave_0_agent_m0_write;                                                           // jtag_1_avalon_slave_0_agent:m0_write -> jtag_1_avalon_slave_0_translator:uav_write
	wire    [2:0] jtag_1_avalon_slave_0_agent_m0_burstcount;                                                      // jtag_1_avalon_slave_0_agent:m0_burstcount -> jtag_1_avalon_slave_0_translator:uav_burstcount
	wire          jtag_1_avalon_slave_0_agent_rf_source_valid;                                                    // jtag_1_avalon_slave_0_agent:rf_source_valid -> jtag_1_avalon_slave_0_agent_rsp_fifo:in_valid
	wire  [112:0] jtag_1_avalon_slave_0_agent_rf_source_data;                                                     // jtag_1_avalon_slave_0_agent:rf_source_data -> jtag_1_avalon_slave_0_agent_rsp_fifo:in_data
	wire          jtag_1_avalon_slave_0_agent_rf_source_ready;                                                    // jtag_1_avalon_slave_0_agent_rsp_fifo:in_ready -> jtag_1_avalon_slave_0_agent:rf_source_ready
	wire          jtag_1_avalon_slave_0_agent_rf_source_startofpacket;                                            // jtag_1_avalon_slave_0_agent:rf_source_startofpacket -> jtag_1_avalon_slave_0_agent_rsp_fifo:in_startofpacket
	wire          jtag_1_avalon_slave_0_agent_rf_source_endofpacket;                                              // jtag_1_avalon_slave_0_agent:rf_source_endofpacket -> jtag_1_avalon_slave_0_agent_rsp_fifo:in_endofpacket
	wire          jtag_1_avalon_slave_0_agent_rsp_fifo_out_valid;                                                 // jtag_1_avalon_slave_0_agent_rsp_fifo:out_valid -> jtag_1_avalon_slave_0_agent:rf_sink_valid
	wire  [112:0] jtag_1_avalon_slave_0_agent_rsp_fifo_out_data;                                                  // jtag_1_avalon_slave_0_agent_rsp_fifo:out_data -> jtag_1_avalon_slave_0_agent:rf_sink_data
	wire          jtag_1_avalon_slave_0_agent_rsp_fifo_out_ready;                                                 // jtag_1_avalon_slave_0_agent:rf_sink_ready -> jtag_1_avalon_slave_0_agent_rsp_fifo:out_ready
	wire          jtag_1_avalon_slave_0_agent_rsp_fifo_out_startofpacket;                                         // jtag_1_avalon_slave_0_agent_rsp_fifo:out_startofpacket -> jtag_1_avalon_slave_0_agent:rf_sink_startofpacket
	wire          jtag_1_avalon_slave_0_agent_rsp_fifo_out_endofpacket;                                           // jtag_1_avalon_slave_0_agent_rsp_fifo:out_endofpacket -> jtag_1_avalon_slave_0_agent:rf_sink_endofpacket
	wire          cmd_mux_003_src_valid;                                                                          // cmd_mux_003:src_valid -> jtag_1_avalon_slave_0_agent:cp_valid
	wire  [111:0] cmd_mux_003_src_data;                                                                           // cmd_mux_003:src_data -> jtag_1_avalon_slave_0_agent:cp_data
	wire          cmd_mux_003_src_ready;                                                                          // jtag_1_avalon_slave_0_agent:cp_ready -> cmd_mux_003:src_ready
	wire   [15:0] cmd_mux_003_src_channel;                                                                        // cmd_mux_003:src_channel -> jtag_1_avalon_slave_0_agent:cp_channel
	wire          cmd_mux_003_src_startofpacket;                                                                  // cmd_mux_003:src_startofpacket -> jtag_1_avalon_slave_0_agent:cp_startofpacket
	wire          cmd_mux_003_src_endofpacket;                                                                    // cmd_mux_003:src_endofpacket -> jtag_1_avalon_slave_0_agent:cp_endofpacket
	wire    [7:0] io_bridge_0_avalon_slave_0_agent_m0_readdata;                                                   // io_bridge_0_avalon_slave_0_translator:uav_readdata -> io_bridge_0_avalon_slave_0_agent:m0_readdata
	wire          io_bridge_0_avalon_slave_0_agent_m0_waitrequest;                                                // io_bridge_0_avalon_slave_0_translator:uav_waitrequest -> io_bridge_0_avalon_slave_0_agent:m0_waitrequest
	wire          io_bridge_0_avalon_slave_0_agent_m0_debugaccess;                                                // io_bridge_0_avalon_slave_0_agent:m0_debugaccess -> io_bridge_0_avalon_slave_0_translator:uav_debugaccess
	wire   [31:0] io_bridge_0_avalon_slave_0_agent_m0_address;                                                    // io_bridge_0_avalon_slave_0_agent:m0_address -> io_bridge_0_avalon_slave_0_translator:uav_address
	wire    [0:0] io_bridge_0_avalon_slave_0_agent_m0_byteenable;                                                 // io_bridge_0_avalon_slave_0_agent:m0_byteenable -> io_bridge_0_avalon_slave_0_translator:uav_byteenable
	wire          io_bridge_0_avalon_slave_0_agent_m0_read;                                                       // io_bridge_0_avalon_slave_0_agent:m0_read -> io_bridge_0_avalon_slave_0_translator:uav_read
	wire          io_bridge_0_avalon_slave_0_agent_m0_readdatavalid;                                              // io_bridge_0_avalon_slave_0_translator:uav_readdatavalid -> io_bridge_0_avalon_slave_0_agent:m0_readdatavalid
	wire          io_bridge_0_avalon_slave_0_agent_m0_lock;                                                       // io_bridge_0_avalon_slave_0_agent:m0_lock -> io_bridge_0_avalon_slave_0_translator:uav_lock
	wire    [7:0] io_bridge_0_avalon_slave_0_agent_m0_writedata;                                                  // io_bridge_0_avalon_slave_0_agent:m0_writedata -> io_bridge_0_avalon_slave_0_translator:uav_writedata
	wire          io_bridge_0_avalon_slave_0_agent_m0_write;                                                      // io_bridge_0_avalon_slave_0_agent:m0_write -> io_bridge_0_avalon_slave_0_translator:uav_write
	wire    [0:0] io_bridge_0_avalon_slave_0_agent_m0_burstcount;                                                 // io_bridge_0_avalon_slave_0_agent:m0_burstcount -> io_bridge_0_avalon_slave_0_translator:uav_burstcount
	wire          io_bridge_0_avalon_slave_0_agent_rf_source_valid;                                               // io_bridge_0_avalon_slave_0_agent:rf_source_valid -> io_bridge_0_avalon_slave_0_agent_rsp_fifo:in_valid
	wire   [85:0] io_bridge_0_avalon_slave_0_agent_rf_source_data;                                                // io_bridge_0_avalon_slave_0_agent:rf_source_data -> io_bridge_0_avalon_slave_0_agent_rsp_fifo:in_data
	wire          io_bridge_0_avalon_slave_0_agent_rf_source_ready;                                               // io_bridge_0_avalon_slave_0_agent_rsp_fifo:in_ready -> io_bridge_0_avalon_slave_0_agent:rf_source_ready
	wire          io_bridge_0_avalon_slave_0_agent_rf_source_startofpacket;                                       // io_bridge_0_avalon_slave_0_agent:rf_source_startofpacket -> io_bridge_0_avalon_slave_0_agent_rsp_fifo:in_startofpacket
	wire          io_bridge_0_avalon_slave_0_agent_rf_source_endofpacket;                                         // io_bridge_0_avalon_slave_0_agent:rf_source_endofpacket -> io_bridge_0_avalon_slave_0_agent_rsp_fifo:in_endofpacket
	wire          io_bridge_0_avalon_slave_0_agent_rsp_fifo_out_valid;                                            // io_bridge_0_avalon_slave_0_agent_rsp_fifo:out_valid -> io_bridge_0_avalon_slave_0_agent:rf_sink_valid
	wire   [85:0] io_bridge_0_avalon_slave_0_agent_rsp_fifo_out_data;                                             // io_bridge_0_avalon_slave_0_agent_rsp_fifo:out_data -> io_bridge_0_avalon_slave_0_agent:rf_sink_data
	wire          io_bridge_0_avalon_slave_0_agent_rsp_fifo_out_ready;                                            // io_bridge_0_avalon_slave_0_agent:rf_sink_ready -> io_bridge_0_avalon_slave_0_agent_rsp_fifo:out_ready
	wire          io_bridge_0_avalon_slave_0_agent_rsp_fifo_out_startofpacket;                                    // io_bridge_0_avalon_slave_0_agent_rsp_fifo:out_startofpacket -> io_bridge_0_avalon_slave_0_agent:rf_sink_startofpacket
	wire          io_bridge_0_avalon_slave_0_agent_rsp_fifo_out_endofpacket;                                      // io_bridge_0_avalon_slave_0_agent_rsp_fifo:out_endofpacket -> io_bridge_0_avalon_slave_0_agent:rf_sink_endofpacket
	wire   [31:0] audio_out_dma_csr_agent_m0_readdata;                                                            // audio_out_dma_csr_translator:uav_readdata -> audio_out_dma_csr_agent:m0_readdata
	wire          audio_out_dma_csr_agent_m0_waitrequest;                                                         // audio_out_dma_csr_translator:uav_waitrequest -> audio_out_dma_csr_agent:m0_waitrequest
	wire          audio_out_dma_csr_agent_m0_debugaccess;                                                         // audio_out_dma_csr_agent:m0_debugaccess -> audio_out_dma_csr_translator:uav_debugaccess
	wire   [31:0] audio_out_dma_csr_agent_m0_address;                                                             // audio_out_dma_csr_agent:m0_address -> audio_out_dma_csr_translator:uav_address
	wire    [3:0] audio_out_dma_csr_agent_m0_byteenable;                                                          // audio_out_dma_csr_agent:m0_byteenable -> audio_out_dma_csr_translator:uav_byteenable
	wire          audio_out_dma_csr_agent_m0_read;                                                                // audio_out_dma_csr_agent:m0_read -> audio_out_dma_csr_translator:uav_read
	wire          audio_out_dma_csr_agent_m0_readdatavalid;                                                       // audio_out_dma_csr_translator:uav_readdatavalid -> audio_out_dma_csr_agent:m0_readdatavalid
	wire          audio_out_dma_csr_agent_m0_lock;                                                                // audio_out_dma_csr_agent:m0_lock -> audio_out_dma_csr_translator:uav_lock
	wire   [31:0] audio_out_dma_csr_agent_m0_writedata;                                                           // audio_out_dma_csr_agent:m0_writedata -> audio_out_dma_csr_translator:uav_writedata
	wire          audio_out_dma_csr_agent_m0_write;                                                               // audio_out_dma_csr_agent:m0_write -> audio_out_dma_csr_translator:uav_write
	wire    [2:0] audio_out_dma_csr_agent_m0_burstcount;                                                          // audio_out_dma_csr_agent:m0_burstcount -> audio_out_dma_csr_translator:uav_burstcount
	wire          audio_out_dma_csr_agent_rf_source_valid;                                                        // audio_out_dma_csr_agent:rf_source_valid -> audio_out_dma_csr_agent_rsp_fifo:in_valid
	wire  [112:0] audio_out_dma_csr_agent_rf_source_data;                                                         // audio_out_dma_csr_agent:rf_source_data -> audio_out_dma_csr_agent_rsp_fifo:in_data
	wire          audio_out_dma_csr_agent_rf_source_ready;                                                        // audio_out_dma_csr_agent_rsp_fifo:in_ready -> audio_out_dma_csr_agent:rf_source_ready
	wire          audio_out_dma_csr_agent_rf_source_startofpacket;                                                // audio_out_dma_csr_agent:rf_source_startofpacket -> audio_out_dma_csr_agent_rsp_fifo:in_startofpacket
	wire          audio_out_dma_csr_agent_rf_source_endofpacket;                                                  // audio_out_dma_csr_agent:rf_source_endofpacket -> audio_out_dma_csr_agent_rsp_fifo:in_endofpacket
	wire          audio_out_dma_csr_agent_rsp_fifo_out_valid;                                                     // audio_out_dma_csr_agent_rsp_fifo:out_valid -> audio_out_dma_csr_agent:rf_sink_valid
	wire  [112:0] audio_out_dma_csr_agent_rsp_fifo_out_data;                                                      // audio_out_dma_csr_agent_rsp_fifo:out_data -> audio_out_dma_csr_agent:rf_sink_data
	wire          audio_out_dma_csr_agent_rsp_fifo_out_ready;                                                     // audio_out_dma_csr_agent:rf_sink_ready -> audio_out_dma_csr_agent_rsp_fifo:out_ready
	wire          audio_out_dma_csr_agent_rsp_fifo_out_startofpacket;                                             // audio_out_dma_csr_agent_rsp_fifo:out_startofpacket -> audio_out_dma_csr_agent:rf_sink_startofpacket
	wire          audio_out_dma_csr_agent_rsp_fifo_out_endofpacket;                                               // audio_out_dma_csr_agent_rsp_fifo:out_endofpacket -> audio_out_dma_csr_agent:rf_sink_endofpacket
	wire          cmd_mux_005_src_valid;                                                                          // cmd_mux_005:src_valid -> audio_out_dma_csr_agent:cp_valid
	wire  [111:0] cmd_mux_005_src_data;                                                                           // cmd_mux_005:src_data -> audio_out_dma_csr_agent:cp_data
	wire          cmd_mux_005_src_ready;                                                                          // audio_out_dma_csr_agent:cp_ready -> cmd_mux_005:src_ready
	wire   [15:0] cmd_mux_005_src_channel;                                                                        // cmd_mux_005:src_channel -> audio_out_dma_csr_agent:cp_channel
	wire          cmd_mux_005_src_startofpacket;                                                                  // cmd_mux_005:src_startofpacket -> audio_out_dma_csr_agent:cp_startofpacket
	wire          cmd_mux_005_src_endofpacket;                                                                    // cmd_mux_005:src_endofpacket -> audio_out_dma_csr_agent:cp_endofpacket
	wire   [31:0] audio_in_dma_csr_agent_m0_readdata;                                                             // audio_in_dma_csr_translator:uav_readdata -> audio_in_dma_csr_agent:m0_readdata
	wire          audio_in_dma_csr_agent_m0_waitrequest;                                                          // audio_in_dma_csr_translator:uav_waitrequest -> audio_in_dma_csr_agent:m0_waitrequest
	wire          audio_in_dma_csr_agent_m0_debugaccess;                                                          // audio_in_dma_csr_agent:m0_debugaccess -> audio_in_dma_csr_translator:uav_debugaccess
	wire   [31:0] audio_in_dma_csr_agent_m0_address;                                                              // audio_in_dma_csr_agent:m0_address -> audio_in_dma_csr_translator:uav_address
	wire    [3:0] audio_in_dma_csr_agent_m0_byteenable;                                                           // audio_in_dma_csr_agent:m0_byteenable -> audio_in_dma_csr_translator:uav_byteenable
	wire          audio_in_dma_csr_agent_m0_read;                                                                 // audio_in_dma_csr_agent:m0_read -> audio_in_dma_csr_translator:uav_read
	wire          audio_in_dma_csr_agent_m0_readdatavalid;                                                        // audio_in_dma_csr_translator:uav_readdatavalid -> audio_in_dma_csr_agent:m0_readdatavalid
	wire          audio_in_dma_csr_agent_m0_lock;                                                                 // audio_in_dma_csr_agent:m0_lock -> audio_in_dma_csr_translator:uav_lock
	wire   [31:0] audio_in_dma_csr_agent_m0_writedata;                                                            // audio_in_dma_csr_agent:m0_writedata -> audio_in_dma_csr_translator:uav_writedata
	wire          audio_in_dma_csr_agent_m0_write;                                                                // audio_in_dma_csr_agent:m0_write -> audio_in_dma_csr_translator:uav_write
	wire    [2:0] audio_in_dma_csr_agent_m0_burstcount;                                                           // audio_in_dma_csr_agent:m0_burstcount -> audio_in_dma_csr_translator:uav_burstcount
	wire          audio_in_dma_csr_agent_rf_source_valid;                                                         // audio_in_dma_csr_agent:rf_source_valid -> audio_in_dma_csr_agent_rsp_fifo:in_valid
	wire  [112:0] audio_in_dma_csr_agent_rf_source_data;                                                          // audio_in_dma_csr_agent:rf_source_data -> audio_in_dma_csr_agent_rsp_fifo:in_data
	wire          audio_in_dma_csr_agent_rf_source_ready;                                                         // audio_in_dma_csr_agent_rsp_fifo:in_ready -> audio_in_dma_csr_agent:rf_source_ready
	wire          audio_in_dma_csr_agent_rf_source_startofpacket;                                                 // audio_in_dma_csr_agent:rf_source_startofpacket -> audio_in_dma_csr_agent_rsp_fifo:in_startofpacket
	wire          audio_in_dma_csr_agent_rf_source_endofpacket;                                                   // audio_in_dma_csr_agent:rf_source_endofpacket -> audio_in_dma_csr_agent_rsp_fifo:in_endofpacket
	wire          audio_in_dma_csr_agent_rsp_fifo_out_valid;                                                      // audio_in_dma_csr_agent_rsp_fifo:out_valid -> audio_in_dma_csr_agent:rf_sink_valid
	wire  [112:0] audio_in_dma_csr_agent_rsp_fifo_out_data;                                                       // audio_in_dma_csr_agent_rsp_fifo:out_data -> audio_in_dma_csr_agent:rf_sink_data
	wire          audio_in_dma_csr_agent_rsp_fifo_out_ready;                                                      // audio_in_dma_csr_agent:rf_sink_ready -> audio_in_dma_csr_agent_rsp_fifo:out_ready
	wire          audio_in_dma_csr_agent_rsp_fifo_out_startofpacket;                                              // audio_in_dma_csr_agent_rsp_fifo:out_startofpacket -> audio_in_dma_csr_agent:rf_sink_startofpacket
	wire          audio_in_dma_csr_agent_rsp_fifo_out_endofpacket;                                                // audio_in_dma_csr_agent_rsp_fifo:out_endofpacket -> audio_in_dma_csr_agent:rf_sink_endofpacket
	wire          cmd_mux_006_src_valid;                                                                          // cmd_mux_006:src_valid -> audio_in_dma_csr_agent:cp_valid
	wire  [111:0] cmd_mux_006_src_data;                                                                           // cmd_mux_006:src_data -> audio_in_dma_csr_agent:cp_data
	wire          cmd_mux_006_src_ready;                                                                          // audio_in_dma_csr_agent:cp_ready -> cmd_mux_006:src_ready
	wire   [15:0] cmd_mux_006_src_channel;                                                                        // cmd_mux_006:src_channel -> audio_in_dma_csr_agent:cp_channel
	wire          cmd_mux_006_src_startofpacket;                                                                  // cmd_mux_006:src_startofpacket -> audio_in_dma_csr_agent:cp_startofpacket
	wire          cmd_mux_006_src_endofpacket;                                                                    // cmd_mux_006:src_endofpacket -> audio_in_dma_csr_agent:cp_endofpacket
	wire   [31:0] jtagdebug_csr_agent_m0_readdata;                                                                // jtagdebug_csr_translator:uav_readdata -> jtagdebug_csr_agent:m0_readdata
	wire          jtagdebug_csr_agent_m0_waitrequest;                                                             // jtagdebug_csr_translator:uav_waitrequest -> jtagdebug_csr_agent:m0_waitrequest
	wire          jtagdebug_csr_agent_m0_debugaccess;                                                             // jtagdebug_csr_agent:m0_debugaccess -> jtagdebug_csr_translator:uav_debugaccess
	wire   [31:0] jtagdebug_csr_agent_m0_address;                                                                 // jtagdebug_csr_agent:m0_address -> jtagdebug_csr_translator:uav_address
	wire    [3:0] jtagdebug_csr_agent_m0_byteenable;                                                              // jtagdebug_csr_agent:m0_byteenable -> jtagdebug_csr_translator:uav_byteenable
	wire          jtagdebug_csr_agent_m0_read;                                                                    // jtagdebug_csr_agent:m0_read -> jtagdebug_csr_translator:uav_read
	wire          jtagdebug_csr_agent_m0_readdatavalid;                                                           // jtagdebug_csr_translator:uav_readdatavalid -> jtagdebug_csr_agent:m0_readdatavalid
	wire          jtagdebug_csr_agent_m0_lock;                                                                    // jtagdebug_csr_agent:m0_lock -> jtagdebug_csr_translator:uav_lock
	wire   [31:0] jtagdebug_csr_agent_m0_writedata;                                                               // jtagdebug_csr_agent:m0_writedata -> jtagdebug_csr_translator:uav_writedata
	wire          jtagdebug_csr_agent_m0_write;                                                                   // jtagdebug_csr_agent:m0_write -> jtagdebug_csr_translator:uav_write
	wire    [2:0] jtagdebug_csr_agent_m0_burstcount;                                                              // jtagdebug_csr_agent:m0_burstcount -> jtagdebug_csr_translator:uav_burstcount
	wire          jtagdebug_csr_agent_rf_source_valid;                                                            // jtagdebug_csr_agent:rf_source_valid -> jtagdebug_csr_agent_rsp_fifo:in_valid
	wire  [112:0] jtagdebug_csr_agent_rf_source_data;                                                             // jtagdebug_csr_agent:rf_source_data -> jtagdebug_csr_agent_rsp_fifo:in_data
	wire          jtagdebug_csr_agent_rf_source_ready;                                                            // jtagdebug_csr_agent_rsp_fifo:in_ready -> jtagdebug_csr_agent:rf_source_ready
	wire          jtagdebug_csr_agent_rf_source_startofpacket;                                                    // jtagdebug_csr_agent:rf_source_startofpacket -> jtagdebug_csr_agent_rsp_fifo:in_startofpacket
	wire          jtagdebug_csr_agent_rf_source_endofpacket;                                                      // jtagdebug_csr_agent:rf_source_endofpacket -> jtagdebug_csr_agent_rsp_fifo:in_endofpacket
	wire          jtagdebug_csr_agent_rsp_fifo_out_valid;                                                         // jtagdebug_csr_agent_rsp_fifo:out_valid -> jtagdebug_csr_agent:rf_sink_valid
	wire  [112:0] jtagdebug_csr_agent_rsp_fifo_out_data;                                                          // jtagdebug_csr_agent_rsp_fifo:out_data -> jtagdebug_csr_agent:rf_sink_data
	wire          jtagdebug_csr_agent_rsp_fifo_out_ready;                                                         // jtagdebug_csr_agent:rf_sink_ready -> jtagdebug_csr_agent_rsp_fifo:out_ready
	wire          jtagdebug_csr_agent_rsp_fifo_out_startofpacket;                                                 // jtagdebug_csr_agent_rsp_fifo:out_startofpacket -> jtagdebug_csr_agent:rf_sink_startofpacket
	wire          jtagdebug_csr_agent_rsp_fifo_out_endofpacket;                                                   // jtagdebug_csr_agent_rsp_fifo:out_endofpacket -> jtagdebug_csr_agent:rf_sink_endofpacket
	wire          cmd_mux_007_src_valid;                                                                          // cmd_mux_007:src_valid -> jtagdebug_csr_agent:cp_valid
	wire  [111:0] cmd_mux_007_src_data;                                                                           // cmd_mux_007:src_data -> jtagdebug_csr_agent:cp_data
	wire          cmd_mux_007_src_ready;                                                                          // jtagdebug_csr_agent:cp_ready -> cmd_mux_007:src_ready
	wire   [15:0] cmd_mux_007_src_channel;                                                                        // cmd_mux_007:src_channel -> jtagdebug_csr_agent:cp_channel
	wire          cmd_mux_007_src_startofpacket;                                                                  // cmd_mux_007:src_startofpacket -> jtagdebug_csr_agent:cp_startofpacket
	wire          cmd_mux_007_src_endofpacket;                                                                    // cmd_mux_007:src_endofpacket -> jtagdebug_csr_agent:cp_endofpacket
	wire   [31:0] nios2_gen2_0_debug_mem_slave_agent_m0_readdata;                                                 // nios2_gen2_0_debug_mem_slave_translator:uav_readdata -> nios2_gen2_0_debug_mem_slave_agent:m0_readdata
	wire          nios2_gen2_0_debug_mem_slave_agent_m0_waitrequest;                                              // nios2_gen2_0_debug_mem_slave_translator:uav_waitrequest -> nios2_gen2_0_debug_mem_slave_agent:m0_waitrequest
	wire          nios2_gen2_0_debug_mem_slave_agent_m0_debugaccess;                                              // nios2_gen2_0_debug_mem_slave_agent:m0_debugaccess -> nios2_gen2_0_debug_mem_slave_translator:uav_debugaccess
	wire   [31:0] nios2_gen2_0_debug_mem_slave_agent_m0_address;                                                  // nios2_gen2_0_debug_mem_slave_agent:m0_address -> nios2_gen2_0_debug_mem_slave_translator:uav_address
	wire    [3:0] nios2_gen2_0_debug_mem_slave_agent_m0_byteenable;                                               // nios2_gen2_0_debug_mem_slave_agent:m0_byteenable -> nios2_gen2_0_debug_mem_slave_translator:uav_byteenable
	wire          nios2_gen2_0_debug_mem_slave_agent_m0_read;                                                     // nios2_gen2_0_debug_mem_slave_agent:m0_read -> nios2_gen2_0_debug_mem_slave_translator:uav_read
	wire          nios2_gen2_0_debug_mem_slave_agent_m0_readdatavalid;                                            // nios2_gen2_0_debug_mem_slave_translator:uav_readdatavalid -> nios2_gen2_0_debug_mem_slave_agent:m0_readdatavalid
	wire          nios2_gen2_0_debug_mem_slave_agent_m0_lock;                                                     // nios2_gen2_0_debug_mem_slave_agent:m0_lock -> nios2_gen2_0_debug_mem_slave_translator:uav_lock
	wire   [31:0] nios2_gen2_0_debug_mem_slave_agent_m0_writedata;                                                // nios2_gen2_0_debug_mem_slave_agent:m0_writedata -> nios2_gen2_0_debug_mem_slave_translator:uav_writedata
	wire          nios2_gen2_0_debug_mem_slave_agent_m0_write;                                                    // nios2_gen2_0_debug_mem_slave_agent:m0_write -> nios2_gen2_0_debug_mem_slave_translator:uav_write
	wire    [2:0] nios2_gen2_0_debug_mem_slave_agent_m0_burstcount;                                               // nios2_gen2_0_debug_mem_slave_agent:m0_burstcount -> nios2_gen2_0_debug_mem_slave_translator:uav_burstcount
	wire          nios2_gen2_0_debug_mem_slave_agent_rf_source_valid;                                             // nios2_gen2_0_debug_mem_slave_agent:rf_source_valid -> nios2_gen2_0_debug_mem_slave_agent_rsp_fifo:in_valid
	wire  [112:0] nios2_gen2_0_debug_mem_slave_agent_rf_source_data;                                              // nios2_gen2_0_debug_mem_slave_agent:rf_source_data -> nios2_gen2_0_debug_mem_slave_agent_rsp_fifo:in_data
	wire          nios2_gen2_0_debug_mem_slave_agent_rf_source_ready;                                             // nios2_gen2_0_debug_mem_slave_agent_rsp_fifo:in_ready -> nios2_gen2_0_debug_mem_slave_agent:rf_source_ready
	wire          nios2_gen2_0_debug_mem_slave_agent_rf_source_startofpacket;                                     // nios2_gen2_0_debug_mem_slave_agent:rf_source_startofpacket -> nios2_gen2_0_debug_mem_slave_agent_rsp_fifo:in_startofpacket
	wire          nios2_gen2_0_debug_mem_slave_agent_rf_source_endofpacket;                                       // nios2_gen2_0_debug_mem_slave_agent:rf_source_endofpacket -> nios2_gen2_0_debug_mem_slave_agent_rsp_fifo:in_endofpacket
	wire          nios2_gen2_0_debug_mem_slave_agent_rsp_fifo_out_valid;                                          // nios2_gen2_0_debug_mem_slave_agent_rsp_fifo:out_valid -> nios2_gen2_0_debug_mem_slave_agent:rf_sink_valid
	wire  [112:0] nios2_gen2_0_debug_mem_slave_agent_rsp_fifo_out_data;                                           // nios2_gen2_0_debug_mem_slave_agent_rsp_fifo:out_data -> nios2_gen2_0_debug_mem_slave_agent:rf_sink_data
	wire          nios2_gen2_0_debug_mem_slave_agent_rsp_fifo_out_ready;                                          // nios2_gen2_0_debug_mem_slave_agent:rf_sink_ready -> nios2_gen2_0_debug_mem_slave_agent_rsp_fifo:out_ready
	wire          nios2_gen2_0_debug_mem_slave_agent_rsp_fifo_out_startofpacket;                                  // nios2_gen2_0_debug_mem_slave_agent_rsp_fifo:out_startofpacket -> nios2_gen2_0_debug_mem_slave_agent:rf_sink_startofpacket
	wire          nios2_gen2_0_debug_mem_slave_agent_rsp_fifo_out_endofpacket;                                    // nios2_gen2_0_debug_mem_slave_agent_rsp_fifo:out_endofpacket -> nios2_gen2_0_debug_mem_slave_agent:rf_sink_endofpacket
	wire          cmd_mux_008_src_valid;                                                                          // cmd_mux_008:src_valid -> nios2_gen2_0_debug_mem_slave_agent:cp_valid
	wire  [111:0] cmd_mux_008_src_data;                                                                           // cmd_mux_008:src_data -> nios2_gen2_0_debug_mem_slave_agent:cp_data
	wire          cmd_mux_008_src_ready;                                                                          // nios2_gen2_0_debug_mem_slave_agent:cp_ready -> cmd_mux_008:src_ready
	wire   [15:0] cmd_mux_008_src_channel;                                                                        // cmd_mux_008:src_channel -> nios2_gen2_0_debug_mem_slave_agent:cp_channel
	wire          cmd_mux_008_src_startofpacket;                                                                  // cmd_mux_008:src_startofpacket -> nios2_gen2_0_debug_mem_slave_agent:cp_startofpacket
	wire          cmd_mux_008_src_endofpacket;                                                                    // cmd_mux_008:src_endofpacket -> nios2_gen2_0_debug_mem_slave_agent:cp_endofpacket
	wire  [127:0] audio_out_dma_descriptor_slave_agent_m0_readdata;                                               // audio_out_dma_descriptor_slave_translator:uav_readdata -> audio_out_dma_descriptor_slave_agent:m0_readdata
	wire          audio_out_dma_descriptor_slave_agent_m0_waitrequest;                                            // audio_out_dma_descriptor_slave_translator:uav_waitrequest -> audio_out_dma_descriptor_slave_agent:m0_waitrequest
	wire          audio_out_dma_descriptor_slave_agent_m0_debugaccess;                                            // audio_out_dma_descriptor_slave_agent:m0_debugaccess -> audio_out_dma_descriptor_slave_translator:uav_debugaccess
	wire   [31:0] audio_out_dma_descriptor_slave_agent_m0_address;                                                // audio_out_dma_descriptor_slave_agent:m0_address -> audio_out_dma_descriptor_slave_translator:uav_address
	wire   [15:0] audio_out_dma_descriptor_slave_agent_m0_byteenable;                                             // audio_out_dma_descriptor_slave_agent:m0_byteenable -> audio_out_dma_descriptor_slave_translator:uav_byteenable
	wire          audio_out_dma_descriptor_slave_agent_m0_read;                                                   // audio_out_dma_descriptor_slave_agent:m0_read -> audio_out_dma_descriptor_slave_translator:uav_read
	wire          audio_out_dma_descriptor_slave_agent_m0_readdatavalid;                                          // audio_out_dma_descriptor_slave_translator:uav_readdatavalid -> audio_out_dma_descriptor_slave_agent:m0_readdatavalid
	wire          audio_out_dma_descriptor_slave_agent_m0_lock;                                                   // audio_out_dma_descriptor_slave_agent:m0_lock -> audio_out_dma_descriptor_slave_translator:uav_lock
	wire  [127:0] audio_out_dma_descriptor_slave_agent_m0_writedata;                                              // audio_out_dma_descriptor_slave_agent:m0_writedata -> audio_out_dma_descriptor_slave_translator:uav_writedata
	wire          audio_out_dma_descriptor_slave_agent_m0_write;                                                  // audio_out_dma_descriptor_slave_agent:m0_write -> audio_out_dma_descriptor_slave_translator:uav_write
	wire    [4:0] audio_out_dma_descriptor_slave_agent_m0_burstcount;                                             // audio_out_dma_descriptor_slave_agent:m0_burstcount -> audio_out_dma_descriptor_slave_translator:uav_burstcount
	wire          audio_out_dma_descriptor_slave_agent_rf_source_valid;                                           // audio_out_dma_descriptor_slave_agent:rf_source_valid -> audio_out_dma_descriptor_slave_agent_rsp_fifo:in_valid
	wire  [220:0] audio_out_dma_descriptor_slave_agent_rf_source_data;                                            // audio_out_dma_descriptor_slave_agent:rf_source_data -> audio_out_dma_descriptor_slave_agent_rsp_fifo:in_data
	wire          audio_out_dma_descriptor_slave_agent_rf_source_ready;                                           // audio_out_dma_descriptor_slave_agent_rsp_fifo:in_ready -> audio_out_dma_descriptor_slave_agent:rf_source_ready
	wire          audio_out_dma_descriptor_slave_agent_rf_source_startofpacket;                                   // audio_out_dma_descriptor_slave_agent:rf_source_startofpacket -> audio_out_dma_descriptor_slave_agent_rsp_fifo:in_startofpacket
	wire          audio_out_dma_descriptor_slave_agent_rf_source_endofpacket;                                     // audio_out_dma_descriptor_slave_agent:rf_source_endofpacket -> audio_out_dma_descriptor_slave_agent_rsp_fifo:in_endofpacket
	wire          audio_out_dma_descriptor_slave_agent_rsp_fifo_out_valid;                                        // audio_out_dma_descriptor_slave_agent_rsp_fifo:out_valid -> audio_out_dma_descriptor_slave_agent:rf_sink_valid
	wire  [220:0] audio_out_dma_descriptor_slave_agent_rsp_fifo_out_data;                                         // audio_out_dma_descriptor_slave_agent_rsp_fifo:out_data -> audio_out_dma_descriptor_slave_agent:rf_sink_data
	wire          audio_out_dma_descriptor_slave_agent_rsp_fifo_out_ready;                                        // audio_out_dma_descriptor_slave_agent:rf_sink_ready -> audio_out_dma_descriptor_slave_agent_rsp_fifo:out_ready
	wire          audio_out_dma_descriptor_slave_agent_rsp_fifo_out_startofpacket;                                // audio_out_dma_descriptor_slave_agent_rsp_fifo:out_startofpacket -> audio_out_dma_descriptor_slave_agent:rf_sink_startofpacket
	wire          audio_out_dma_descriptor_slave_agent_rsp_fifo_out_endofpacket;                                  // audio_out_dma_descriptor_slave_agent_rsp_fifo:out_endofpacket -> audio_out_dma_descriptor_slave_agent:rf_sink_endofpacket
	wire          cmd_mux_009_src_valid;                                                                          // cmd_mux_009:src_valid -> audio_out_dma_descriptor_slave_agent:cp_valid
	wire  [219:0] cmd_mux_009_src_data;                                                                           // cmd_mux_009:src_data -> audio_out_dma_descriptor_slave_agent:cp_data
	wire          cmd_mux_009_src_ready;                                                                          // audio_out_dma_descriptor_slave_agent:cp_ready -> cmd_mux_009:src_ready
	wire   [15:0] cmd_mux_009_src_channel;                                                                        // cmd_mux_009:src_channel -> audio_out_dma_descriptor_slave_agent:cp_channel
	wire          cmd_mux_009_src_startofpacket;                                                                  // cmd_mux_009:src_startofpacket -> audio_out_dma_descriptor_slave_agent:cp_startofpacket
	wire          cmd_mux_009_src_endofpacket;                                                                    // cmd_mux_009:src_endofpacket -> audio_out_dma_descriptor_slave_agent:cp_endofpacket
	wire  [127:0] audio_in_dma_descriptor_slave_agent_m0_readdata;                                                // audio_in_dma_descriptor_slave_translator:uav_readdata -> audio_in_dma_descriptor_slave_agent:m0_readdata
	wire          audio_in_dma_descriptor_slave_agent_m0_waitrequest;                                             // audio_in_dma_descriptor_slave_translator:uav_waitrequest -> audio_in_dma_descriptor_slave_agent:m0_waitrequest
	wire          audio_in_dma_descriptor_slave_agent_m0_debugaccess;                                             // audio_in_dma_descriptor_slave_agent:m0_debugaccess -> audio_in_dma_descriptor_slave_translator:uav_debugaccess
	wire   [31:0] audio_in_dma_descriptor_slave_agent_m0_address;                                                 // audio_in_dma_descriptor_slave_agent:m0_address -> audio_in_dma_descriptor_slave_translator:uav_address
	wire   [15:0] audio_in_dma_descriptor_slave_agent_m0_byteenable;                                              // audio_in_dma_descriptor_slave_agent:m0_byteenable -> audio_in_dma_descriptor_slave_translator:uav_byteenable
	wire          audio_in_dma_descriptor_slave_agent_m0_read;                                                    // audio_in_dma_descriptor_slave_agent:m0_read -> audio_in_dma_descriptor_slave_translator:uav_read
	wire          audio_in_dma_descriptor_slave_agent_m0_readdatavalid;                                           // audio_in_dma_descriptor_slave_translator:uav_readdatavalid -> audio_in_dma_descriptor_slave_agent:m0_readdatavalid
	wire          audio_in_dma_descriptor_slave_agent_m0_lock;                                                    // audio_in_dma_descriptor_slave_agent:m0_lock -> audio_in_dma_descriptor_slave_translator:uav_lock
	wire  [127:0] audio_in_dma_descriptor_slave_agent_m0_writedata;                                               // audio_in_dma_descriptor_slave_agent:m0_writedata -> audio_in_dma_descriptor_slave_translator:uav_writedata
	wire          audio_in_dma_descriptor_slave_agent_m0_write;                                                   // audio_in_dma_descriptor_slave_agent:m0_write -> audio_in_dma_descriptor_slave_translator:uav_write
	wire    [4:0] audio_in_dma_descriptor_slave_agent_m0_burstcount;                                              // audio_in_dma_descriptor_slave_agent:m0_burstcount -> audio_in_dma_descriptor_slave_translator:uav_burstcount
	wire          audio_in_dma_descriptor_slave_agent_rf_source_valid;                                            // audio_in_dma_descriptor_slave_agent:rf_source_valid -> audio_in_dma_descriptor_slave_agent_rsp_fifo:in_valid
	wire  [220:0] audio_in_dma_descriptor_slave_agent_rf_source_data;                                             // audio_in_dma_descriptor_slave_agent:rf_source_data -> audio_in_dma_descriptor_slave_agent_rsp_fifo:in_data
	wire          audio_in_dma_descriptor_slave_agent_rf_source_ready;                                            // audio_in_dma_descriptor_slave_agent_rsp_fifo:in_ready -> audio_in_dma_descriptor_slave_agent:rf_source_ready
	wire          audio_in_dma_descriptor_slave_agent_rf_source_startofpacket;                                    // audio_in_dma_descriptor_slave_agent:rf_source_startofpacket -> audio_in_dma_descriptor_slave_agent_rsp_fifo:in_startofpacket
	wire          audio_in_dma_descriptor_slave_agent_rf_source_endofpacket;                                      // audio_in_dma_descriptor_slave_agent:rf_source_endofpacket -> audio_in_dma_descriptor_slave_agent_rsp_fifo:in_endofpacket
	wire          audio_in_dma_descriptor_slave_agent_rsp_fifo_out_valid;                                         // audio_in_dma_descriptor_slave_agent_rsp_fifo:out_valid -> audio_in_dma_descriptor_slave_agent:rf_sink_valid
	wire  [220:0] audio_in_dma_descriptor_slave_agent_rsp_fifo_out_data;                                          // audio_in_dma_descriptor_slave_agent_rsp_fifo:out_data -> audio_in_dma_descriptor_slave_agent:rf_sink_data
	wire          audio_in_dma_descriptor_slave_agent_rsp_fifo_out_ready;                                         // audio_in_dma_descriptor_slave_agent:rf_sink_ready -> audio_in_dma_descriptor_slave_agent_rsp_fifo:out_ready
	wire          audio_in_dma_descriptor_slave_agent_rsp_fifo_out_startofpacket;                                 // audio_in_dma_descriptor_slave_agent_rsp_fifo:out_startofpacket -> audio_in_dma_descriptor_slave_agent:rf_sink_startofpacket
	wire          audio_in_dma_descriptor_slave_agent_rsp_fifo_out_endofpacket;                                   // audio_in_dma_descriptor_slave_agent_rsp_fifo:out_endofpacket -> audio_in_dma_descriptor_slave_agent:rf_sink_endofpacket
	wire          cmd_mux_010_src_valid;                                                                          // cmd_mux_010:src_valid -> audio_in_dma_descriptor_slave_agent:cp_valid
	wire  [219:0] cmd_mux_010_src_data;                                                                           // cmd_mux_010:src_data -> audio_in_dma_descriptor_slave_agent:cp_data
	wire          cmd_mux_010_src_ready;                                                                          // audio_in_dma_descriptor_slave_agent:cp_ready -> cmd_mux_010:src_ready
	wire   [15:0] cmd_mux_010_src_channel;                                                                        // cmd_mux_010:src_channel -> audio_in_dma_descriptor_slave_agent:cp_channel
	wire          cmd_mux_010_src_startofpacket;                                                                  // cmd_mux_010:src_startofpacket -> audio_in_dma_descriptor_slave_agent:cp_startofpacket
	wire          cmd_mux_010_src_endofpacket;                                                                    // cmd_mux_010:src_endofpacket -> audio_in_dma_descriptor_slave_agent:cp_endofpacket
	wire  [127:0] jtagdebug_descriptor_slave_agent_m0_readdata;                                                   // jtagdebug_descriptor_slave_translator:uav_readdata -> jtagdebug_descriptor_slave_agent:m0_readdata
	wire          jtagdebug_descriptor_slave_agent_m0_waitrequest;                                                // jtagdebug_descriptor_slave_translator:uav_waitrequest -> jtagdebug_descriptor_slave_agent:m0_waitrequest
	wire          jtagdebug_descriptor_slave_agent_m0_debugaccess;                                                // jtagdebug_descriptor_slave_agent:m0_debugaccess -> jtagdebug_descriptor_slave_translator:uav_debugaccess
	wire   [31:0] jtagdebug_descriptor_slave_agent_m0_address;                                                    // jtagdebug_descriptor_slave_agent:m0_address -> jtagdebug_descriptor_slave_translator:uav_address
	wire   [15:0] jtagdebug_descriptor_slave_agent_m0_byteenable;                                                 // jtagdebug_descriptor_slave_agent:m0_byteenable -> jtagdebug_descriptor_slave_translator:uav_byteenable
	wire          jtagdebug_descriptor_slave_agent_m0_read;                                                       // jtagdebug_descriptor_slave_agent:m0_read -> jtagdebug_descriptor_slave_translator:uav_read
	wire          jtagdebug_descriptor_slave_agent_m0_readdatavalid;                                              // jtagdebug_descriptor_slave_translator:uav_readdatavalid -> jtagdebug_descriptor_slave_agent:m0_readdatavalid
	wire          jtagdebug_descriptor_slave_agent_m0_lock;                                                       // jtagdebug_descriptor_slave_agent:m0_lock -> jtagdebug_descriptor_slave_translator:uav_lock
	wire  [127:0] jtagdebug_descriptor_slave_agent_m0_writedata;                                                  // jtagdebug_descriptor_slave_agent:m0_writedata -> jtagdebug_descriptor_slave_translator:uav_writedata
	wire          jtagdebug_descriptor_slave_agent_m0_write;                                                      // jtagdebug_descriptor_slave_agent:m0_write -> jtagdebug_descriptor_slave_translator:uav_write
	wire    [4:0] jtagdebug_descriptor_slave_agent_m0_burstcount;                                                 // jtagdebug_descriptor_slave_agent:m0_burstcount -> jtagdebug_descriptor_slave_translator:uav_burstcount
	wire          jtagdebug_descriptor_slave_agent_rf_source_valid;                                               // jtagdebug_descriptor_slave_agent:rf_source_valid -> jtagdebug_descriptor_slave_agent_rsp_fifo:in_valid
	wire  [220:0] jtagdebug_descriptor_slave_agent_rf_source_data;                                                // jtagdebug_descriptor_slave_agent:rf_source_data -> jtagdebug_descriptor_slave_agent_rsp_fifo:in_data
	wire          jtagdebug_descriptor_slave_agent_rf_source_ready;                                               // jtagdebug_descriptor_slave_agent_rsp_fifo:in_ready -> jtagdebug_descriptor_slave_agent:rf_source_ready
	wire          jtagdebug_descriptor_slave_agent_rf_source_startofpacket;                                       // jtagdebug_descriptor_slave_agent:rf_source_startofpacket -> jtagdebug_descriptor_slave_agent_rsp_fifo:in_startofpacket
	wire          jtagdebug_descriptor_slave_agent_rf_source_endofpacket;                                         // jtagdebug_descriptor_slave_agent:rf_source_endofpacket -> jtagdebug_descriptor_slave_agent_rsp_fifo:in_endofpacket
	wire          jtagdebug_descriptor_slave_agent_rsp_fifo_out_valid;                                            // jtagdebug_descriptor_slave_agent_rsp_fifo:out_valid -> jtagdebug_descriptor_slave_agent:rf_sink_valid
	wire  [220:0] jtagdebug_descriptor_slave_agent_rsp_fifo_out_data;                                             // jtagdebug_descriptor_slave_agent_rsp_fifo:out_data -> jtagdebug_descriptor_slave_agent:rf_sink_data
	wire          jtagdebug_descriptor_slave_agent_rsp_fifo_out_ready;                                            // jtagdebug_descriptor_slave_agent:rf_sink_ready -> jtagdebug_descriptor_slave_agent_rsp_fifo:out_ready
	wire          jtagdebug_descriptor_slave_agent_rsp_fifo_out_startofpacket;                                    // jtagdebug_descriptor_slave_agent_rsp_fifo:out_startofpacket -> jtagdebug_descriptor_slave_agent:rf_sink_startofpacket
	wire          jtagdebug_descriptor_slave_agent_rsp_fifo_out_endofpacket;                                      // jtagdebug_descriptor_slave_agent_rsp_fifo:out_endofpacket -> jtagdebug_descriptor_slave_agent:rf_sink_endofpacket
	wire          cmd_mux_011_src_valid;                                                                          // cmd_mux_011:src_valid -> jtagdebug_descriptor_slave_agent:cp_valid
	wire  [219:0] cmd_mux_011_src_data;                                                                           // cmd_mux_011:src_data -> jtagdebug_descriptor_slave_agent:cp_data
	wire          cmd_mux_011_src_ready;                                                                          // jtagdebug_descriptor_slave_agent:cp_ready -> cmd_mux_011:src_ready
	wire   [15:0] cmd_mux_011_src_channel;                                                                        // cmd_mux_011:src_channel -> jtagdebug_descriptor_slave_agent:cp_channel
	wire          cmd_mux_011_src_startofpacket;                                                                  // cmd_mux_011:src_startofpacket -> jtagdebug_descriptor_slave_agent:cp_startofpacket
	wire          cmd_mux_011_src_endofpacket;                                                                    // cmd_mux_011:src_endofpacket -> jtagdebug_descriptor_slave_agent:cp_endofpacket
	wire   [31:0] onchip_memory2_0_s1_agent_m0_readdata;                                                          // onchip_memory2_0_s1_translator:uav_readdata -> onchip_memory2_0_s1_agent:m0_readdata
	wire          onchip_memory2_0_s1_agent_m0_waitrequest;                                                       // onchip_memory2_0_s1_translator:uav_waitrequest -> onchip_memory2_0_s1_agent:m0_waitrequest
	wire          onchip_memory2_0_s1_agent_m0_debugaccess;                                                       // onchip_memory2_0_s1_agent:m0_debugaccess -> onchip_memory2_0_s1_translator:uav_debugaccess
	wire   [31:0] onchip_memory2_0_s1_agent_m0_address;                                                           // onchip_memory2_0_s1_agent:m0_address -> onchip_memory2_0_s1_translator:uav_address
	wire    [3:0] onchip_memory2_0_s1_agent_m0_byteenable;                                                        // onchip_memory2_0_s1_agent:m0_byteenable -> onchip_memory2_0_s1_translator:uav_byteenable
	wire          onchip_memory2_0_s1_agent_m0_read;                                                              // onchip_memory2_0_s1_agent:m0_read -> onchip_memory2_0_s1_translator:uav_read
	wire          onchip_memory2_0_s1_agent_m0_readdatavalid;                                                     // onchip_memory2_0_s1_translator:uav_readdatavalid -> onchip_memory2_0_s1_agent:m0_readdatavalid
	wire          onchip_memory2_0_s1_agent_m0_lock;                                                              // onchip_memory2_0_s1_agent:m0_lock -> onchip_memory2_0_s1_translator:uav_lock
	wire   [31:0] onchip_memory2_0_s1_agent_m0_writedata;                                                         // onchip_memory2_0_s1_agent:m0_writedata -> onchip_memory2_0_s1_translator:uav_writedata
	wire          onchip_memory2_0_s1_agent_m0_write;                                                             // onchip_memory2_0_s1_agent:m0_write -> onchip_memory2_0_s1_translator:uav_write
	wire    [2:0] onchip_memory2_0_s1_agent_m0_burstcount;                                                        // onchip_memory2_0_s1_agent:m0_burstcount -> onchip_memory2_0_s1_translator:uav_burstcount
	wire          onchip_memory2_0_s1_agent_rf_source_valid;                                                      // onchip_memory2_0_s1_agent:rf_source_valid -> onchip_memory2_0_s1_agent_rsp_fifo:in_valid
	wire  [112:0] onchip_memory2_0_s1_agent_rf_source_data;                                                       // onchip_memory2_0_s1_agent:rf_source_data -> onchip_memory2_0_s1_agent_rsp_fifo:in_data
	wire          onchip_memory2_0_s1_agent_rf_source_ready;                                                      // onchip_memory2_0_s1_agent_rsp_fifo:in_ready -> onchip_memory2_0_s1_agent:rf_source_ready
	wire          onchip_memory2_0_s1_agent_rf_source_startofpacket;                                              // onchip_memory2_0_s1_agent:rf_source_startofpacket -> onchip_memory2_0_s1_agent_rsp_fifo:in_startofpacket
	wire          onchip_memory2_0_s1_agent_rf_source_endofpacket;                                                // onchip_memory2_0_s1_agent:rf_source_endofpacket -> onchip_memory2_0_s1_agent_rsp_fifo:in_endofpacket
	wire          onchip_memory2_0_s1_agent_rsp_fifo_out_valid;                                                   // onchip_memory2_0_s1_agent_rsp_fifo:out_valid -> onchip_memory2_0_s1_agent:rf_sink_valid
	wire  [112:0] onchip_memory2_0_s1_agent_rsp_fifo_out_data;                                                    // onchip_memory2_0_s1_agent_rsp_fifo:out_data -> onchip_memory2_0_s1_agent:rf_sink_data
	wire          onchip_memory2_0_s1_agent_rsp_fifo_out_ready;                                                   // onchip_memory2_0_s1_agent:rf_sink_ready -> onchip_memory2_0_s1_agent_rsp_fifo:out_ready
	wire          onchip_memory2_0_s1_agent_rsp_fifo_out_startofpacket;                                           // onchip_memory2_0_s1_agent_rsp_fifo:out_startofpacket -> onchip_memory2_0_s1_agent:rf_sink_startofpacket
	wire          onchip_memory2_0_s1_agent_rsp_fifo_out_endofpacket;                                             // onchip_memory2_0_s1_agent_rsp_fifo:out_endofpacket -> onchip_memory2_0_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_012_src_valid;                                                                          // cmd_mux_012:src_valid -> onchip_memory2_0_s1_agent:cp_valid
	wire  [111:0] cmd_mux_012_src_data;                                                                           // cmd_mux_012:src_data -> onchip_memory2_0_s1_agent:cp_data
	wire          cmd_mux_012_src_ready;                                                                          // onchip_memory2_0_s1_agent:cp_ready -> cmd_mux_012:src_ready
	wire   [15:0] cmd_mux_012_src_channel;                                                                        // cmd_mux_012:src_channel -> onchip_memory2_0_s1_agent:cp_channel
	wire          cmd_mux_012_src_startofpacket;                                                                  // cmd_mux_012:src_startofpacket -> onchip_memory2_0_s1_agent:cp_startofpacket
	wire          cmd_mux_012_src_endofpacket;                                                                    // cmd_mux_012:src_endofpacket -> onchip_memory2_0_s1_agent:cp_endofpacket
	wire   [31:0] pio_0_s1_agent_m0_readdata;                                                                     // pio_0_s1_translator:uav_readdata -> pio_0_s1_agent:m0_readdata
	wire          pio_0_s1_agent_m0_waitrequest;                                                                  // pio_0_s1_translator:uav_waitrequest -> pio_0_s1_agent:m0_waitrequest
	wire          pio_0_s1_agent_m0_debugaccess;                                                                  // pio_0_s1_agent:m0_debugaccess -> pio_0_s1_translator:uav_debugaccess
	wire   [31:0] pio_0_s1_agent_m0_address;                                                                      // pio_0_s1_agent:m0_address -> pio_0_s1_translator:uav_address
	wire    [3:0] pio_0_s1_agent_m0_byteenable;                                                                   // pio_0_s1_agent:m0_byteenable -> pio_0_s1_translator:uav_byteenable
	wire          pio_0_s1_agent_m0_read;                                                                         // pio_0_s1_agent:m0_read -> pio_0_s1_translator:uav_read
	wire          pio_0_s1_agent_m0_readdatavalid;                                                                // pio_0_s1_translator:uav_readdatavalid -> pio_0_s1_agent:m0_readdatavalid
	wire          pio_0_s1_agent_m0_lock;                                                                         // pio_0_s1_agent:m0_lock -> pio_0_s1_translator:uav_lock
	wire   [31:0] pio_0_s1_agent_m0_writedata;                                                                    // pio_0_s1_agent:m0_writedata -> pio_0_s1_translator:uav_writedata
	wire          pio_0_s1_agent_m0_write;                                                                        // pio_0_s1_agent:m0_write -> pio_0_s1_translator:uav_write
	wire    [2:0] pio_0_s1_agent_m0_burstcount;                                                                   // pio_0_s1_agent:m0_burstcount -> pio_0_s1_translator:uav_burstcount
	wire          pio_0_s1_agent_rf_source_valid;                                                                 // pio_0_s1_agent:rf_source_valid -> pio_0_s1_agent_rsp_fifo:in_valid
	wire  [112:0] pio_0_s1_agent_rf_source_data;                                                                  // pio_0_s1_agent:rf_source_data -> pio_0_s1_agent_rsp_fifo:in_data
	wire          pio_0_s1_agent_rf_source_ready;                                                                 // pio_0_s1_agent_rsp_fifo:in_ready -> pio_0_s1_agent:rf_source_ready
	wire          pio_0_s1_agent_rf_source_startofpacket;                                                         // pio_0_s1_agent:rf_source_startofpacket -> pio_0_s1_agent_rsp_fifo:in_startofpacket
	wire          pio_0_s1_agent_rf_source_endofpacket;                                                           // pio_0_s1_agent:rf_source_endofpacket -> pio_0_s1_agent_rsp_fifo:in_endofpacket
	wire          pio_0_s1_agent_rsp_fifo_out_valid;                                                              // pio_0_s1_agent_rsp_fifo:out_valid -> pio_0_s1_agent:rf_sink_valid
	wire  [112:0] pio_0_s1_agent_rsp_fifo_out_data;                                                               // pio_0_s1_agent_rsp_fifo:out_data -> pio_0_s1_agent:rf_sink_data
	wire          pio_0_s1_agent_rsp_fifo_out_ready;                                                              // pio_0_s1_agent:rf_sink_ready -> pio_0_s1_agent_rsp_fifo:out_ready
	wire          pio_0_s1_agent_rsp_fifo_out_startofpacket;                                                      // pio_0_s1_agent_rsp_fifo:out_startofpacket -> pio_0_s1_agent:rf_sink_startofpacket
	wire          pio_0_s1_agent_rsp_fifo_out_endofpacket;                                                        // pio_0_s1_agent_rsp_fifo:out_endofpacket -> pio_0_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_013_src_valid;                                                                          // cmd_mux_013:src_valid -> pio_0_s1_agent:cp_valid
	wire  [111:0] cmd_mux_013_src_data;                                                                           // cmd_mux_013:src_data -> pio_0_s1_agent:cp_data
	wire          cmd_mux_013_src_ready;                                                                          // pio_0_s1_agent:cp_ready -> cmd_mux_013:src_ready
	wire   [15:0] cmd_mux_013_src_channel;                                                                        // cmd_mux_013:src_channel -> pio_0_s1_agent:cp_channel
	wire          cmd_mux_013_src_startofpacket;                                                                  // cmd_mux_013:src_startofpacket -> pio_0_s1_agent:cp_startofpacket
	wire          cmd_mux_013_src_endofpacket;                                                                    // cmd_mux_013:src_endofpacket -> pio_0_s1_agent:cp_endofpacket
	wire   [31:0] pio_1_s1_agent_m0_readdata;                                                                     // pio_1_s1_translator:uav_readdata -> pio_1_s1_agent:m0_readdata
	wire          pio_1_s1_agent_m0_waitrequest;                                                                  // pio_1_s1_translator:uav_waitrequest -> pio_1_s1_agent:m0_waitrequest
	wire          pio_1_s1_agent_m0_debugaccess;                                                                  // pio_1_s1_agent:m0_debugaccess -> pio_1_s1_translator:uav_debugaccess
	wire   [31:0] pio_1_s1_agent_m0_address;                                                                      // pio_1_s1_agent:m0_address -> pio_1_s1_translator:uav_address
	wire    [3:0] pio_1_s1_agent_m0_byteenable;                                                                   // pio_1_s1_agent:m0_byteenable -> pio_1_s1_translator:uav_byteenable
	wire          pio_1_s1_agent_m0_read;                                                                         // pio_1_s1_agent:m0_read -> pio_1_s1_translator:uav_read
	wire          pio_1_s1_agent_m0_readdatavalid;                                                                // pio_1_s1_translator:uav_readdatavalid -> pio_1_s1_agent:m0_readdatavalid
	wire          pio_1_s1_agent_m0_lock;                                                                         // pio_1_s1_agent:m0_lock -> pio_1_s1_translator:uav_lock
	wire   [31:0] pio_1_s1_agent_m0_writedata;                                                                    // pio_1_s1_agent:m0_writedata -> pio_1_s1_translator:uav_writedata
	wire          pio_1_s1_agent_m0_write;                                                                        // pio_1_s1_agent:m0_write -> pio_1_s1_translator:uav_write
	wire    [2:0] pio_1_s1_agent_m0_burstcount;                                                                   // pio_1_s1_agent:m0_burstcount -> pio_1_s1_translator:uav_burstcount
	wire          pio_1_s1_agent_rf_source_valid;                                                                 // pio_1_s1_agent:rf_source_valid -> pio_1_s1_agent_rsp_fifo:in_valid
	wire  [112:0] pio_1_s1_agent_rf_source_data;                                                                  // pio_1_s1_agent:rf_source_data -> pio_1_s1_agent_rsp_fifo:in_data
	wire          pio_1_s1_agent_rf_source_ready;                                                                 // pio_1_s1_agent_rsp_fifo:in_ready -> pio_1_s1_agent:rf_source_ready
	wire          pio_1_s1_agent_rf_source_startofpacket;                                                         // pio_1_s1_agent:rf_source_startofpacket -> pio_1_s1_agent_rsp_fifo:in_startofpacket
	wire          pio_1_s1_agent_rf_source_endofpacket;                                                           // pio_1_s1_agent:rf_source_endofpacket -> pio_1_s1_agent_rsp_fifo:in_endofpacket
	wire          pio_1_s1_agent_rsp_fifo_out_valid;                                                              // pio_1_s1_agent_rsp_fifo:out_valid -> pio_1_s1_agent:rf_sink_valid
	wire  [112:0] pio_1_s1_agent_rsp_fifo_out_data;                                                               // pio_1_s1_agent_rsp_fifo:out_data -> pio_1_s1_agent:rf_sink_data
	wire          pio_1_s1_agent_rsp_fifo_out_ready;                                                              // pio_1_s1_agent:rf_sink_ready -> pio_1_s1_agent_rsp_fifo:out_ready
	wire          pio_1_s1_agent_rsp_fifo_out_startofpacket;                                                      // pio_1_s1_agent_rsp_fifo:out_startofpacket -> pio_1_s1_agent:rf_sink_startofpacket
	wire          pio_1_s1_agent_rsp_fifo_out_endofpacket;                                                        // pio_1_s1_agent_rsp_fifo:out_endofpacket -> pio_1_s1_agent:rf_sink_endofpacket
	wire          cmd_mux_014_src_valid;                                                                          // cmd_mux_014:src_valid -> pio_1_s1_agent:cp_valid
	wire  [111:0] cmd_mux_014_src_data;                                                                           // cmd_mux_014:src_data -> pio_1_s1_agent:cp_data
	wire          cmd_mux_014_src_ready;                                                                          // pio_1_s1_agent:cp_ready -> cmd_mux_014:src_ready
	wire   [15:0] cmd_mux_014_src_channel;                                                                        // cmd_mux_014:src_channel -> pio_1_s1_agent:cp_channel
	wire          cmd_mux_014_src_startofpacket;                                                                  // cmd_mux_014:src_startofpacket -> pio_1_s1_agent:cp_startofpacket
	wire          cmd_mux_014_src_endofpacket;                                                                    // cmd_mux_014:src_endofpacket -> pio_1_s1_agent:cp_endofpacket
	wire   [31:0] spi_0_spi_control_port_agent_m0_readdata;                                                       // spi_0_spi_control_port_translator:uav_readdata -> spi_0_spi_control_port_agent:m0_readdata
	wire          spi_0_spi_control_port_agent_m0_waitrequest;                                                    // spi_0_spi_control_port_translator:uav_waitrequest -> spi_0_spi_control_port_agent:m0_waitrequest
	wire          spi_0_spi_control_port_agent_m0_debugaccess;                                                    // spi_0_spi_control_port_agent:m0_debugaccess -> spi_0_spi_control_port_translator:uav_debugaccess
	wire   [31:0] spi_0_spi_control_port_agent_m0_address;                                                        // spi_0_spi_control_port_agent:m0_address -> spi_0_spi_control_port_translator:uav_address
	wire    [3:0] spi_0_spi_control_port_agent_m0_byteenable;                                                     // spi_0_spi_control_port_agent:m0_byteenable -> spi_0_spi_control_port_translator:uav_byteenable
	wire          spi_0_spi_control_port_agent_m0_read;                                                           // spi_0_spi_control_port_agent:m0_read -> spi_0_spi_control_port_translator:uav_read
	wire          spi_0_spi_control_port_agent_m0_readdatavalid;                                                  // spi_0_spi_control_port_translator:uav_readdatavalid -> spi_0_spi_control_port_agent:m0_readdatavalid
	wire          spi_0_spi_control_port_agent_m0_lock;                                                           // spi_0_spi_control_port_agent:m0_lock -> spi_0_spi_control_port_translator:uav_lock
	wire   [31:0] spi_0_spi_control_port_agent_m0_writedata;                                                      // spi_0_spi_control_port_agent:m0_writedata -> spi_0_spi_control_port_translator:uav_writedata
	wire          spi_0_spi_control_port_agent_m0_write;                                                          // spi_0_spi_control_port_agent:m0_write -> spi_0_spi_control_port_translator:uav_write
	wire    [2:0] spi_0_spi_control_port_agent_m0_burstcount;                                                     // spi_0_spi_control_port_agent:m0_burstcount -> spi_0_spi_control_port_translator:uav_burstcount
	wire          spi_0_spi_control_port_agent_rf_source_valid;                                                   // spi_0_spi_control_port_agent:rf_source_valid -> spi_0_spi_control_port_agent_rsp_fifo:in_valid
	wire  [112:0] spi_0_spi_control_port_agent_rf_source_data;                                                    // spi_0_spi_control_port_agent:rf_source_data -> spi_0_spi_control_port_agent_rsp_fifo:in_data
	wire          spi_0_spi_control_port_agent_rf_source_ready;                                                   // spi_0_spi_control_port_agent_rsp_fifo:in_ready -> spi_0_spi_control_port_agent:rf_source_ready
	wire          spi_0_spi_control_port_agent_rf_source_startofpacket;                                           // spi_0_spi_control_port_agent:rf_source_startofpacket -> spi_0_spi_control_port_agent_rsp_fifo:in_startofpacket
	wire          spi_0_spi_control_port_agent_rf_source_endofpacket;                                             // spi_0_spi_control_port_agent:rf_source_endofpacket -> spi_0_spi_control_port_agent_rsp_fifo:in_endofpacket
	wire          spi_0_spi_control_port_agent_rsp_fifo_out_valid;                                                // spi_0_spi_control_port_agent_rsp_fifo:out_valid -> spi_0_spi_control_port_agent:rf_sink_valid
	wire  [112:0] spi_0_spi_control_port_agent_rsp_fifo_out_data;                                                 // spi_0_spi_control_port_agent_rsp_fifo:out_data -> spi_0_spi_control_port_agent:rf_sink_data
	wire          spi_0_spi_control_port_agent_rsp_fifo_out_ready;                                                // spi_0_spi_control_port_agent:rf_sink_ready -> spi_0_spi_control_port_agent_rsp_fifo:out_ready
	wire          spi_0_spi_control_port_agent_rsp_fifo_out_startofpacket;                                        // spi_0_spi_control_port_agent_rsp_fifo:out_startofpacket -> spi_0_spi_control_port_agent:rf_sink_startofpacket
	wire          spi_0_spi_control_port_agent_rsp_fifo_out_endofpacket;                                          // spi_0_spi_control_port_agent_rsp_fifo:out_endofpacket -> spi_0_spi_control_port_agent:rf_sink_endofpacket
	wire          cmd_mux_015_src_valid;                                                                          // cmd_mux_015:src_valid -> spi_0_spi_control_port_agent:cp_valid
	wire  [111:0] cmd_mux_015_src_data;                                                                           // cmd_mux_015:src_data -> spi_0_spi_control_port_agent:cp_data
	wire          cmd_mux_015_src_ready;                                                                          // spi_0_spi_control_port_agent:cp_ready -> cmd_mux_015:src_ready
	wire   [15:0] cmd_mux_015_src_channel;                                                                        // cmd_mux_015:src_channel -> spi_0_spi_control_port_agent:cp_channel
	wire          cmd_mux_015_src_startofpacket;                                                                  // cmd_mux_015:src_startofpacket -> spi_0_spi_control_port_agent:cp_startofpacket
	wire          cmd_mux_015_src_endofpacket;                                                                    // cmd_mux_015:src_endofpacket -> spi_0_spi_control_port_agent:cp_endofpacket
	wire          nios2_gen2_0_data_master_agent_cp_valid;                                                        // nios2_gen2_0_data_master_agent:cp_valid -> router:sink_valid
	wire  [111:0] nios2_gen2_0_data_master_agent_cp_data;                                                         // nios2_gen2_0_data_master_agent:cp_data -> router:sink_data
	wire          nios2_gen2_0_data_master_agent_cp_ready;                                                        // router:sink_ready -> nios2_gen2_0_data_master_agent:cp_ready
	wire          nios2_gen2_0_data_master_agent_cp_startofpacket;                                                // nios2_gen2_0_data_master_agent:cp_startofpacket -> router:sink_startofpacket
	wire          nios2_gen2_0_data_master_agent_cp_endofpacket;                                                  // nios2_gen2_0_data_master_agent:cp_endofpacket -> router:sink_endofpacket
	wire          router_src_valid;                                                                               // router:src_valid -> cmd_demux:sink_valid
	wire  [111:0] router_src_data;                                                                                // router:src_data -> cmd_demux:sink_data
	wire          router_src_ready;                                                                               // cmd_demux:sink_ready -> router:src_ready
	wire   [15:0] router_src_channel;                                                                             // router:src_channel -> cmd_demux:sink_channel
	wire          router_src_startofpacket;                                                                       // router:src_startofpacket -> cmd_demux:sink_startofpacket
	wire          router_src_endofpacket;                                                                         // router:src_endofpacket -> cmd_demux:sink_endofpacket
	wire          nios2_gen2_0_instruction_master_agent_cp_valid;                                                 // nios2_gen2_0_instruction_master_agent:cp_valid -> router_001:sink_valid
	wire  [111:0] nios2_gen2_0_instruction_master_agent_cp_data;                                                  // nios2_gen2_0_instruction_master_agent:cp_data -> router_001:sink_data
	wire          nios2_gen2_0_instruction_master_agent_cp_ready;                                                 // router_001:sink_ready -> nios2_gen2_0_instruction_master_agent:cp_ready
	wire          nios2_gen2_0_instruction_master_agent_cp_startofpacket;                                         // nios2_gen2_0_instruction_master_agent:cp_startofpacket -> router_001:sink_startofpacket
	wire          nios2_gen2_0_instruction_master_agent_cp_endofpacket;                                           // nios2_gen2_0_instruction_master_agent:cp_endofpacket -> router_001:sink_endofpacket
	wire          router_001_src_valid;                                                                           // router_001:src_valid -> cmd_demux_001:sink_valid
	wire  [111:0] router_001_src_data;                                                                            // router_001:src_data -> cmd_demux_001:sink_data
	wire          router_001_src_ready;                                                                           // cmd_demux_001:sink_ready -> router_001:src_ready
	wire   [15:0] router_001_src_channel;                                                                         // router_001:src_channel -> cmd_demux_001:sink_channel
	wire          router_001_src_startofpacket;                                                                   // router_001:src_startofpacket -> cmd_demux_001:sink_startofpacket
	wire          router_001_src_endofpacket;                                                                     // router_001:src_endofpacket -> cmd_demux_001:sink_endofpacket
	wire          audio_out_dma_mm_read_agent_cp_valid;                                                           // audio_out_dma_mm_read_agent:cp_valid -> router_002:sink_valid
	wire  [111:0] audio_out_dma_mm_read_agent_cp_data;                                                            // audio_out_dma_mm_read_agent:cp_data -> router_002:sink_data
	wire          audio_out_dma_mm_read_agent_cp_ready;                                                           // router_002:sink_ready -> audio_out_dma_mm_read_agent:cp_ready
	wire          audio_out_dma_mm_read_agent_cp_startofpacket;                                                   // audio_out_dma_mm_read_agent:cp_startofpacket -> router_002:sink_startofpacket
	wire          audio_out_dma_mm_read_agent_cp_endofpacket;                                                     // audio_out_dma_mm_read_agent:cp_endofpacket -> router_002:sink_endofpacket
	wire          router_002_src_valid;                                                                           // router_002:src_valid -> cmd_demux_002:sink_valid
	wire  [111:0] router_002_src_data;                                                                            // router_002:src_data -> cmd_demux_002:sink_data
	wire          router_002_src_ready;                                                                           // cmd_demux_002:sink_ready -> router_002:src_ready
	wire   [15:0] router_002_src_channel;                                                                         // router_002:src_channel -> cmd_demux_002:sink_channel
	wire          router_002_src_startofpacket;                                                                   // router_002:src_startofpacket -> cmd_demux_002:sink_startofpacket
	wire          router_002_src_endofpacket;                                                                     // router_002:src_endofpacket -> cmd_demux_002:sink_endofpacket
	wire          audio_in_dma_mm_write_agent_cp_valid;                                                           // audio_in_dma_mm_write_agent:cp_valid -> router_003:sink_valid
	wire  [111:0] audio_in_dma_mm_write_agent_cp_data;                                                            // audio_in_dma_mm_write_agent:cp_data -> router_003:sink_data
	wire          audio_in_dma_mm_write_agent_cp_ready;                                                           // router_003:sink_ready -> audio_in_dma_mm_write_agent:cp_ready
	wire          audio_in_dma_mm_write_agent_cp_startofpacket;                                                   // audio_in_dma_mm_write_agent:cp_startofpacket -> router_003:sink_startofpacket
	wire          audio_in_dma_mm_write_agent_cp_endofpacket;                                                     // audio_in_dma_mm_write_agent:cp_endofpacket -> router_003:sink_endofpacket
	wire          router_003_src_valid;                                                                           // router_003:src_valid -> cmd_demux_003:sink_valid
	wire  [111:0] router_003_src_data;                                                                            // router_003:src_data -> cmd_demux_003:sink_data
	wire          router_003_src_ready;                                                                           // cmd_demux_003:sink_ready -> router_003:src_ready
	wire   [15:0] router_003_src_channel;                                                                         // router_003:src_channel -> cmd_demux_003:sink_channel
	wire          router_003_src_startofpacket;                                                                   // router_003:src_startofpacket -> cmd_demux_003:sink_startofpacket
	wire          router_003_src_endofpacket;                                                                     // router_003:src_endofpacket -> cmd_demux_003:sink_endofpacket
	wire          jtagdebug_mm_write_agent_cp_valid;                                                              // jtagdebug_mm_write_agent:cp_valid -> router_004:sink_valid
	wire   [84:0] jtagdebug_mm_write_agent_cp_data;                                                               // jtagdebug_mm_write_agent:cp_data -> router_004:sink_data
	wire          jtagdebug_mm_write_agent_cp_ready;                                                              // router_004:sink_ready -> jtagdebug_mm_write_agent:cp_ready
	wire          jtagdebug_mm_write_agent_cp_startofpacket;                                                      // jtagdebug_mm_write_agent:cp_startofpacket -> router_004:sink_startofpacket
	wire          jtagdebug_mm_write_agent_cp_endofpacket;                                                        // jtagdebug_mm_write_agent:cp_endofpacket -> router_004:sink_endofpacket
	wire          router_004_src_valid;                                                                           // router_004:src_valid -> cmd_demux_004:sink_valid
	wire   [84:0] router_004_src_data;                                                                            // router_004:src_data -> cmd_demux_004:sink_data
	wire          router_004_src_ready;                                                                           // cmd_demux_004:sink_ready -> router_004:src_ready
	wire   [15:0] router_004_src_channel;                                                                         // router_004:src_channel -> cmd_demux_004:sink_channel
	wire          router_004_src_startofpacket;                                                                   // router_004:src_startofpacket -> cmd_demux_004:sink_startofpacket
	wire          router_004_src_endofpacket;                                                                     // router_004:src_endofpacket -> cmd_demux_004:sink_endofpacket
	wire          io_bridge_1_avalon_slave_0_agent_rp_valid;                                                      // io_bridge_1_avalon_slave_0_agent:rp_valid -> router_005:sink_valid
	wire   [84:0] io_bridge_1_avalon_slave_0_agent_rp_data;                                                       // io_bridge_1_avalon_slave_0_agent:rp_data -> router_005:sink_data
	wire          io_bridge_1_avalon_slave_0_agent_rp_ready;                                                      // router_005:sink_ready -> io_bridge_1_avalon_slave_0_agent:rp_ready
	wire          io_bridge_1_avalon_slave_0_agent_rp_startofpacket;                                              // io_bridge_1_avalon_slave_0_agent:rp_startofpacket -> router_005:sink_startofpacket
	wire          io_bridge_1_avalon_slave_0_agent_rp_endofpacket;                                                // io_bridge_1_avalon_slave_0_agent:rp_endofpacket -> router_005:sink_endofpacket
	wire          router_005_src_valid;                                                                           // router_005:src_valid -> rsp_demux:sink_valid
	wire   [84:0] router_005_src_data;                                                                            // router_005:src_data -> rsp_demux:sink_data
	wire          router_005_src_ready;                                                                           // rsp_demux:sink_ready -> router_005:src_ready
	wire   [15:0] router_005_src_channel;                                                                         // router_005:src_channel -> rsp_demux:sink_channel
	wire          router_005_src_startofpacket;                                                                   // router_005:src_startofpacket -> rsp_demux:sink_startofpacket
	wire          router_005_src_endofpacket;                                                                     // router_005:src_endofpacket -> rsp_demux:sink_endofpacket
	wire          avalon2mem_0_avalon_slave_0_agent_rp_valid;                                                     // avalon2mem_0_avalon_slave_0_agent:rp_valid -> router_006:sink_valid
	wire  [111:0] avalon2mem_0_avalon_slave_0_agent_rp_data;                                                      // avalon2mem_0_avalon_slave_0_agent:rp_data -> router_006:sink_data
	wire          avalon2mem_0_avalon_slave_0_agent_rp_ready;                                                     // router_006:sink_ready -> avalon2mem_0_avalon_slave_0_agent:rp_ready
	wire          avalon2mem_0_avalon_slave_0_agent_rp_startofpacket;                                             // avalon2mem_0_avalon_slave_0_agent:rp_startofpacket -> router_006:sink_startofpacket
	wire          avalon2mem_0_avalon_slave_0_agent_rp_endofpacket;                                               // avalon2mem_0_avalon_slave_0_agent:rp_endofpacket -> router_006:sink_endofpacket
	wire          router_006_src_valid;                                                                           // router_006:src_valid -> rsp_demux_001:sink_valid
	wire  [111:0] router_006_src_data;                                                                            // router_006:src_data -> rsp_demux_001:sink_data
	wire          router_006_src_ready;                                                                           // rsp_demux_001:sink_ready -> router_006:src_ready
	wire   [15:0] router_006_src_channel;                                                                         // router_006:src_channel -> rsp_demux_001:sink_channel
	wire          router_006_src_startofpacket;                                                                   // router_006:src_startofpacket -> rsp_demux_001:sink_startofpacket
	wire          router_006_src_endofpacket;                                                                     // router_006:src_endofpacket -> rsp_demux_001:sink_endofpacket
	wire          jtag_0_avalon_slave_0_agent_rp_valid;                                                           // jtag_0_avalon_slave_0_agent:rp_valid -> router_007:sink_valid
	wire  [111:0] jtag_0_avalon_slave_0_agent_rp_data;                                                            // jtag_0_avalon_slave_0_agent:rp_data -> router_007:sink_data
	wire          jtag_0_avalon_slave_0_agent_rp_ready;                                                           // router_007:sink_ready -> jtag_0_avalon_slave_0_agent:rp_ready
	wire          jtag_0_avalon_slave_0_agent_rp_startofpacket;                                                   // jtag_0_avalon_slave_0_agent:rp_startofpacket -> router_007:sink_startofpacket
	wire          jtag_0_avalon_slave_0_agent_rp_endofpacket;                                                     // jtag_0_avalon_slave_0_agent:rp_endofpacket -> router_007:sink_endofpacket
	wire          router_007_src_valid;                                                                           // router_007:src_valid -> rsp_demux_002:sink_valid
	wire  [111:0] router_007_src_data;                                                                            // router_007:src_data -> rsp_demux_002:sink_data
	wire          router_007_src_ready;                                                                           // rsp_demux_002:sink_ready -> router_007:src_ready
	wire   [15:0] router_007_src_channel;                                                                         // router_007:src_channel -> rsp_demux_002:sink_channel
	wire          router_007_src_startofpacket;                                                                   // router_007:src_startofpacket -> rsp_demux_002:sink_startofpacket
	wire          router_007_src_endofpacket;                                                                     // router_007:src_endofpacket -> rsp_demux_002:sink_endofpacket
	wire          jtag_1_avalon_slave_0_agent_rp_valid;                                                           // jtag_1_avalon_slave_0_agent:rp_valid -> router_008:sink_valid
	wire  [111:0] jtag_1_avalon_slave_0_agent_rp_data;                                                            // jtag_1_avalon_slave_0_agent:rp_data -> router_008:sink_data
	wire          jtag_1_avalon_slave_0_agent_rp_ready;                                                           // router_008:sink_ready -> jtag_1_avalon_slave_0_agent:rp_ready
	wire          jtag_1_avalon_slave_0_agent_rp_startofpacket;                                                   // jtag_1_avalon_slave_0_agent:rp_startofpacket -> router_008:sink_startofpacket
	wire          jtag_1_avalon_slave_0_agent_rp_endofpacket;                                                     // jtag_1_avalon_slave_0_agent:rp_endofpacket -> router_008:sink_endofpacket
	wire          router_008_src_valid;                                                                           // router_008:src_valid -> rsp_demux_003:sink_valid
	wire  [111:0] router_008_src_data;                                                                            // router_008:src_data -> rsp_demux_003:sink_data
	wire          router_008_src_ready;                                                                           // rsp_demux_003:sink_ready -> router_008:src_ready
	wire   [15:0] router_008_src_channel;                                                                         // router_008:src_channel -> rsp_demux_003:sink_channel
	wire          router_008_src_startofpacket;                                                                   // router_008:src_startofpacket -> rsp_demux_003:sink_startofpacket
	wire          router_008_src_endofpacket;                                                                     // router_008:src_endofpacket -> rsp_demux_003:sink_endofpacket
	wire          io_bridge_0_avalon_slave_0_agent_rp_valid;                                                      // io_bridge_0_avalon_slave_0_agent:rp_valid -> router_009:sink_valid
	wire   [84:0] io_bridge_0_avalon_slave_0_agent_rp_data;                                                       // io_bridge_0_avalon_slave_0_agent:rp_data -> router_009:sink_data
	wire          io_bridge_0_avalon_slave_0_agent_rp_ready;                                                      // router_009:sink_ready -> io_bridge_0_avalon_slave_0_agent:rp_ready
	wire          io_bridge_0_avalon_slave_0_agent_rp_startofpacket;                                              // io_bridge_0_avalon_slave_0_agent:rp_startofpacket -> router_009:sink_startofpacket
	wire          io_bridge_0_avalon_slave_0_agent_rp_endofpacket;                                                // io_bridge_0_avalon_slave_0_agent:rp_endofpacket -> router_009:sink_endofpacket
	wire          router_009_src_valid;                                                                           // router_009:src_valid -> rsp_demux_004:sink_valid
	wire   [84:0] router_009_src_data;                                                                            // router_009:src_data -> rsp_demux_004:sink_data
	wire          router_009_src_ready;                                                                           // rsp_demux_004:sink_ready -> router_009:src_ready
	wire   [15:0] router_009_src_channel;                                                                         // router_009:src_channel -> rsp_demux_004:sink_channel
	wire          router_009_src_startofpacket;                                                                   // router_009:src_startofpacket -> rsp_demux_004:sink_startofpacket
	wire          router_009_src_endofpacket;                                                                     // router_009:src_endofpacket -> rsp_demux_004:sink_endofpacket
	wire          audio_out_dma_csr_agent_rp_valid;                                                               // audio_out_dma_csr_agent:rp_valid -> router_010:sink_valid
	wire  [111:0] audio_out_dma_csr_agent_rp_data;                                                                // audio_out_dma_csr_agent:rp_data -> router_010:sink_data
	wire          audio_out_dma_csr_agent_rp_ready;                                                               // router_010:sink_ready -> audio_out_dma_csr_agent:rp_ready
	wire          audio_out_dma_csr_agent_rp_startofpacket;                                                       // audio_out_dma_csr_agent:rp_startofpacket -> router_010:sink_startofpacket
	wire          audio_out_dma_csr_agent_rp_endofpacket;                                                         // audio_out_dma_csr_agent:rp_endofpacket -> router_010:sink_endofpacket
	wire          router_010_src_valid;                                                                           // router_010:src_valid -> rsp_demux_005:sink_valid
	wire  [111:0] router_010_src_data;                                                                            // router_010:src_data -> rsp_demux_005:sink_data
	wire          router_010_src_ready;                                                                           // rsp_demux_005:sink_ready -> router_010:src_ready
	wire   [15:0] router_010_src_channel;                                                                         // router_010:src_channel -> rsp_demux_005:sink_channel
	wire          router_010_src_startofpacket;                                                                   // router_010:src_startofpacket -> rsp_demux_005:sink_startofpacket
	wire          router_010_src_endofpacket;                                                                     // router_010:src_endofpacket -> rsp_demux_005:sink_endofpacket
	wire          audio_in_dma_csr_agent_rp_valid;                                                                // audio_in_dma_csr_agent:rp_valid -> router_011:sink_valid
	wire  [111:0] audio_in_dma_csr_agent_rp_data;                                                                 // audio_in_dma_csr_agent:rp_data -> router_011:sink_data
	wire          audio_in_dma_csr_agent_rp_ready;                                                                // router_011:sink_ready -> audio_in_dma_csr_agent:rp_ready
	wire          audio_in_dma_csr_agent_rp_startofpacket;                                                        // audio_in_dma_csr_agent:rp_startofpacket -> router_011:sink_startofpacket
	wire          audio_in_dma_csr_agent_rp_endofpacket;                                                          // audio_in_dma_csr_agent:rp_endofpacket -> router_011:sink_endofpacket
	wire          router_011_src_valid;                                                                           // router_011:src_valid -> rsp_demux_006:sink_valid
	wire  [111:0] router_011_src_data;                                                                            // router_011:src_data -> rsp_demux_006:sink_data
	wire          router_011_src_ready;                                                                           // rsp_demux_006:sink_ready -> router_011:src_ready
	wire   [15:0] router_011_src_channel;                                                                         // router_011:src_channel -> rsp_demux_006:sink_channel
	wire          router_011_src_startofpacket;                                                                   // router_011:src_startofpacket -> rsp_demux_006:sink_startofpacket
	wire          router_011_src_endofpacket;                                                                     // router_011:src_endofpacket -> rsp_demux_006:sink_endofpacket
	wire          jtagdebug_csr_agent_rp_valid;                                                                   // jtagdebug_csr_agent:rp_valid -> router_012:sink_valid
	wire  [111:0] jtagdebug_csr_agent_rp_data;                                                                    // jtagdebug_csr_agent:rp_data -> router_012:sink_data
	wire          jtagdebug_csr_agent_rp_ready;                                                                   // router_012:sink_ready -> jtagdebug_csr_agent:rp_ready
	wire          jtagdebug_csr_agent_rp_startofpacket;                                                           // jtagdebug_csr_agent:rp_startofpacket -> router_012:sink_startofpacket
	wire          jtagdebug_csr_agent_rp_endofpacket;                                                             // jtagdebug_csr_agent:rp_endofpacket -> router_012:sink_endofpacket
	wire          router_012_src_valid;                                                                           // router_012:src_valid -> rsp_demux_007:sink_valid
	wire  [111:0] router_012_src_data;                                                                            // router_012:src_data -> rsp_demux_007:sink_data
	wire          router_012_src_ready;                                                                           // rsp_demux_007:sink_ready -> router_012:src_ready
	wire   [15:0] router_012_src_channel;                                                                         // router_012:src_channel -> rsp_demux_007:sink_channel
	wire          router_012_src_startofpacket;                                                                   // router_012:src_startofpacket -> rsp_demux_007:sink_startofpacket
	wire          router_012_src_endofpacket;                                                                     // router_012:src_endofpacket -> rsp_demux_007:sink_endofpacket
	wire          nios2_gen2_0_debug_mem_slave_agent_rp_valid;                                                    // nios2_gen2_0_debug_mem_slave_agent:rp_valid -> router_013:sink_valid
	wire  [111:0] nios2_gen2_0_debug_mem_slave_agent_rp_data;                                                     // nios2_gen2_0_debug_mem_slave_agent:rp_data -> router_013:sink_data
	wire          nios2_gen2_0_debug_mem_slave_agent_rp_ready;                                                    // router_013:sink_ready -> nios2_gen2_0_debug_mem_slave_agent:rp_ready
	wire          nios2_gen2_0_debug_mem_slave_agent_rp_startofpacket;                                            // nios2_gen2_0_debug_mem_slave_agent:rp_startofpacket -> router_013:sink_startofpacket
	wire          nios2_gen2_0_debug_mem_slave_agent_rp_endofpacket;                                              // nios2_gen2_0_debug_mem_slave_agent:rp_endofpacket -> router_013:sink_endofpacket
	wire          router_013_src_valid;                                                                           // router_013:src_valid -> rsp_demux_008:sink_valid
	wire  [111:0] router_013_src_data;                                                                            // router_013:src_data -> rsp_demux_008:sink_data
	wire          router_013_src_ready;                                                                           // rsp_demux_008:sink_ready -> router_013:src_ready
	wire   [15:0] router_013_src_channel;                                                                         // router_013:src_channel -> rsp_demux_008:sink_channel
	wire          router_013_src_startofpacket;                                                                   // router_013:src_startofpacket -> rsp_demux_008:sink_startofpacket
	wire          router_013_src_endofpacket;                                                                     // router_013:src_endofpacket -> rsp_demux_008:sink_endofpacket
	wire          audio_out_dma_descriptor_slave_agent_rp_valid;                                                  // audio_out_dma_descriptor_slave_agent:rp_valid -> router_014:sink_valid
	wire  [219:0] audio_out_dma_descriptor_slave_agent_rp_data;                                                   // audio_out_dma_descriptor_slave_agent:rp_data -> router_014:sink_data
	wire          audio_out_dma_descriptor_slave_agent_rp_ready;                                                  // router_014:sink_ready -> audio_out_dma_descriptor_slave_agent:rp_ready
	wire          audio_out_dma_descriptor_slave_agent_rp_startofpacket;                                          // audio_out_dma_descriptor_slave_agent:rp_startofpacket -> router_014:sink_startofpacket
	wire          audio_out_dma_descriptor_slave_agent_rp_endofpacket;                                            // audio_out_dma_descriptor_slave_agent:rp_endofpacket -> router_014:sink_endofpacket
	wire          router_014_src_valid;                                                                           // router_014:src_valid -> rsp_demux_009:sink_valid
	wire  [219:0] router_014_src_data;                                                                            // router_014:src_data -> rsp_demux_009:sink_data
	wire          router_014_src_ready;                                                                           // rsp_demux_009:sink_ready -> router_014:src_ready
	wire   [15:0] router_014_src_channel;                                                                         // router_014:src_channel -> rsp_demux_009:sink_channel
	wire          router_014_src_startofpacket;                                                                   // router_014:src_startofpacket -> rsp_demux_009:sink_startofpacket
	wire          router_014_src_endofpacket;                                                                     // router_014:src_endofpacket -> rsp_demux_009:sink_endofpacket
	wire          audio_in_dma_descriptor_slave_agent_rp_valid;                                                   // audio_in_dma_descriptor_slave_agent:rp_valid -> router_015:sink_valid
	wire  [219:0] audio_in_dma_descriptor_slave_agent_rp_data;                                                    // audio_in_dma_descriptor_slave_agent:rp_data -> router_015:sink_data
	wire          audio_in_dma_descriptor_slave_agent_rp_ready;                                                   // router_015:sink_ready -> audio_in_dma_descriptor_slave_agent:rp_ready
	wire          audio_in_dma_descriptor_slave_agent_rp_startofpacket;                                           // audio_in_dma_descriptor_slave_agent:rp_startofpacket -> router_015:sink_startofpacket
	wire          audio_in_dma_descriptor_slave_agent_rp_endofpacket;                                             // audio_in_dma_descriptor_slave_agent:rp_endofpacket -> router_015:sink_endofpacket
	wire          router_015_src_valid;                                                                           // router_015:src_valid -> rsp_demux_010:sink_valid
	wire  [219:0] router_015_src_data;                                                                            // router_015:src_data -> rsp_demux_010:sink_data
	wire          router_015_src_ready;                                                                           // rsp_demux_010:sink_ready -> router_015:src_ready
	wire   [15:0] router_015_src_channel;                                                                         // router_015:src_channel -> rsp_demux_010:sink_channel
	wire          router_015_src_startofpacket;                                                                   // router_015:src_startofpacket -> rsp_demux_010:sink_startofpacket
	wire          router_015_src_endofpacket;                                                                     // router_015:src_endofpacket -> rsp_demux_010:sink_endofpacket
	wire          jtagdebug_descriptor_slave_agent_rp_valid;                                                      // jtagdebug_descriptor_slave_agent:rp_valid -> router_016:sink_valid
	wire  [219:0] jtagdebug_descriptor_slave_agent_rp_data;                                                       // jtagdebug_descriptor_slave_agent:rp_data -> router_016:sink_data
	wire          jtagdebug_descriptor_slave_agent_rp_ready;                                                      // router_016:sink_ready -> jtagdebug_descriptor_slave_agent:rp_ready
	wire          jtagdebug_descriptor_slave_agent_rp_startofpacket;                                              // jtagdebug_descriptor_slave_agent:rp_startofpacket -> router_016:sink_startofpacket
	wire          jtagdebug_descriptor_slave_agent_rp_endofpacket;                                                // jtagdebug_descriptor_slave_agent:rp_endofpacket -> router_016:sink_endofpacket
	wire          router_016_src_valid;                                                                           // router_016:src_valid -> rsp_demux_011:sink_valid
	wire  [219:0] router_016_src_data;                                                                            // router_016:src_data -> rsp_demux_011:sink_data
	wire          router_016_src_ready;                                                                           // rsp_demux_011:sink_ready -> router_016:src_ready
	wire   [15:0] router_016_src_channel;                                                                         // router_016:src_channel -> rsp_demux_011:sink_channel
	wire          router_016_src_startofpacket;                                                                   // router_016:src_startofpacket -> rsp_demux_011:sink_startofpacket
	wire          router_016_src_endofpacket;                                                                     // router_016:src_endofpacket -> rsp_demux_011:sink_endofpacket
	wire          onchip_memory2_0_s1_agent_rp_valid;                                                             // onchip_memory2_0_s1_agent:rp_valid -> router_017:sink_valid
	wire  [111:0] onchip_memory2_0_s1_agent_rp_data;                                                              // onchip_memory2_0_s1_agent:rp_data -> router_017:sink_data
	wire          onchip_memory2_0_s1_agent_rp_ready;                                                             // router_017:sink_ready -> onchip_memory2_0_s1_agent:rp_ready
	wire          onchip_memory2_0_s1_agent_rp_startofpacket;                                                     // onchip_memory2_0_s1_agent:rp_startofpacket -> router_017:sink_startofpacket
	wire          onchip_memory2_0_s1_agent_rp_endofpacket;                                                       // onchip_memory2_0_s1_agent:rp_endofpacket -> router_017:sink_endofpacket
	wire          router_017_src_valid;                                                                           // router_017:src_valid -> rsp_demux_012:sink_valid
	wire  [111:0] router_017_src_data;                                                                            // router_017:src_data -> rsp_demux_012:sink_data
	wire          router_017_src_ready;                                                                           // rsp_demux_012:sink_ready -> router_017:src_ready
	wire   [15:0] router_017_src_channel;                                                                         // router_017:src_channel -> rsp_demux_012:sink_channel
	wire          router_017_src_startofpacket;                                                                   // router_017:src_startofpacket -> rsp_demux_012:sink_startofpacket
	wire          router_017_src_endofpacket;                                                                     // router_017:src_endofpacket -> rsp_demux_012:sink_endofpacket
	wire          pio_0_s1_agent_rp_valid;                                                                        // pio_0_s1_agent:rp_valid -> router_018:sink_valid
	wire  [111:0] pio_0_s1_agent_rp_data;                                                                         // pio_0_s1_agent:rp_data -> router_018:sink_data
	wire          pio_0_s1_agent_rp_ready;                                                                        // router_018:sink_ready -> pio_0_s1_agent:rp_ready
	wire          pio_0_s1_agent_rp_startofpacket;                                                                // pio_0_s1_agent:rp_startofpacket -> router_018:sink_startofpacket
	wire          pio_0_s1_agent_rp_endofpacket;                                                                  // pio_0_s1_agent:rp_endofpacket -> router_018:sink_endofpacket
	wire          router_018_src_valid;                                                                           // router_018:src_valid -> rsp_demux_013:sink_valid
	wire  [111:0] router_018_src_data;                                                                            // router_018:src_data -> rsp_demux_013:sink_data
	wire          router_018_src_ready;                                                                           // rsp_demux_013:sink_ready -> router_018:src_ready
	wire   [15:0] router_018_src_channel;                                                                         // router_018:src_channel -> rsp_demux_013:sink_channel
	wire          router_018_src_startofpacket;                                                                   // router_018:src_startofpacket -> rsp_demux_013:sink_startofpacket
	wire          router_018_src_endofpacket;                                                                     // router_018:src_endofpacket -> rsp_demux_013:sink_endofpacket
	wire          pio_1_s1_agent_rp_valid;                                                                        // pio_1_s1_agent:rp_valid -> router_019:sink_valid
	wire  [111:0] pio_1_s1_agent_rp_data;                                                                         // pio_1_s1_agent:rp_data -> router_019:sink_data
	wire          pio_1_s1_agent_rp_ready;                                                                        // router_019:sink_ready -> pio_1_s1_agent:rp_ready
	wire          pio_1_s1_agent_rp_startofpacket;                                                                // pio_1_s1_agent:rp_startofpacket -> router_019:sink_startofpacket
	wire          pio_1_s1_agent_rp_endofpacket;                                                                  // pio_1_s1_agent:rp_endofpacket -> router_019:sink_endofpacket
	wire          router_019_src_valid;                                                                           // router_019:src_valid -> rsp_demux_014:sink_valid
	wire  [111:0] router_019_src_data;                                                                            // router_019:src_data -> rsp_demux_014:sink_data
	wire          router_019_src_ready;                                                                           // rsp_demux_014:sink_ready -> router_019:src_ready
	wire   [15:0] router_019_src_channel;                                                                         // router_019:src_channel -> rsp_demux_014:sink_channel
	wire          router_019_src_startofpacket;                                                                   // router_019:src_startofpacket -> rsp_demux_014:sink_startofpacket
	wire          router_019_src_endofpacket;                                                                     // router_019:src_endofpacket -> rsp_demux_014:sink_endofpacket
	wire          spi_0_spi_control_port_agent_rp_valid;                                                          // spi_0_spi_control_port_agent:rp_valid -> router_020:sink_valid
	wire  [111:0] spi_0_spi_control_port_agent_rp_data;                                                           // spi_0_spi_control_port_agent:rp_data -> router_020:sink_data
	wire          spi_0_spi_control_port_agent_rp_ready;                                                          // router_020:sink_ready -> spi_0_spi_control_port_agent:rp_ready
	wire          spi_0_spi_control_port_agent_rp_startofpacket;                                                  // spi_0_spi_control_port_agent:rp_startofpacket -> router_020:sink_startofpacket
	wire          spi_0_spi_control_port_agent_rp_endofpacket;                                                    // spi_0_spi_control_port_agent:rp_endofpacket -> router_020:sink_endofpacket
	wire          router_020_src_valid;                                                                           // router_020:src_valid -> rsp_demux_015:sink_valid
	wire  [111:0] router_020_src_data;                                                                            // router_020:src_data -> rsp_demux_015:sink_data
	wire          router_020_src_ready;                                                                           // rsp_demux_015:sink_ready -> router_020:src_ready
	wire   [15:0] router_020_src_channel;                                                                         // router_020:src_channel -> rsp_demux_015:sink_channel
	wire          router_020_src_startofpacket;                                                                   // router_020:src_startofpacket -> rsp_demux_015:sink_startofpacket
	wire          router_020_src_endofpacket;                                                                     // router_020:src_endofpacket -> rsp_demux_015:sink_endofpacket
	wire          cmd_mux_src_valid;                                                                              // cmd_mux:src_valid -> io_bridge_1_avalon_slave_0_burst_adapter:sink0_valid
	wire   [84:0] cmd_mux_src_data;                                                                               // cmd_mux:src_data -> io_bridge_1_avalon_slave_0_burst_adapter:sink0_data
	wire          cmd_mux_src_ready;                                                                              // io_bridge_1_avalon_slave_0_burst_adapter:sink0_ready -> cmd_mux:src_ready
	wire   [15:0] cmd_mux_src_channel;                                                                            // cmd_mux:src_channel -> io_bridge_1_avalon_slave_0_burst_adapter:sink0_channel
	wire          cmd_mux_src_startofpacket;                                                                      // cmd_mux:src_startofpacket -> io_bridge_1_avalon_slave_0_burst_adapter:sink0_startofpacket
	wire          cmd_mux_src_endofpacket;                                                                        // cmd_mux:src_endofpacket -> io_bridge_1_avalon_slave_0_burst_adapter:sink0_endofpacket
	wire          io_bridge_1_avalon_slave_0_burst_adapter_source0_valid;                                         // io_bridge_1_avalon_slave_0_burst_adapter:source0_valid -> io_bridge_1_avalon_slave_0_agent:cp_valid
	wire   [84:0] io_bridge_1_avalon_slave_0_burst_adapter_source0_data;                                          // io_bridge_1_avalon_slave_0_burst_adapter:source0_data -> io_bridge_1_avalon_slave_0_agent:cp_data
	wire          io_bridge_1_avalon_slave_0_burst_adapter_source0_ready;                                         // io_bridge_1_avalon_slave_0_agent:cp_ready -> io_bridge_1_avalon_slave_0_burst_adapter:source0_ready
	wire   [15:0] io_bridge_1_avalon_slave_0_burst_adapter_source0_channel;                                       // io_bridge_1_avalon_slave_0_burst_adapter:source0_channel -> io_bridge_1_avalon_slave_0_agent:cp_channel
	wire          io_bridge_1_avalon_slave_0_burst_adapter_source0_startofpacket;                                 // io_bridge_1_avalon_slave_0_burst_adapter:source0_startofpacket -> io_bridge_1_avalon_slave_0_agent:cp_startofpacket
	wire          io_bridge_1_avalon_slave_0_burst_adapter_source0_endofpacket;                                   // io_bridge_1_avalon_slave_0_burst_adapter:source0_endofpacket -> io_bridge_1_avalon_slave_0_agent:cp_endofpacket
	wire          cmd_mux_004_src_valid;                                                                          // cmd_mux_004:src_valid -> io_bridge_0_avalon_slave_0_burst_adapter:sink0_valid
	wire   [84:0] cmd_mux_004_src_data;                                                                           // cmd_mux_004:src_data -> io_bridge_0_avalon_slave_0_burst_adapter:sink0_data
	wire          cmd_mux_004_src_ready;                                                                          // io_bridge_0_avalon_slave_0_burst_adapter:sink0_ready -> cmd_mux_004:src_ready
	wire   [15:0] cmd_mux_004_src_channel;                                                                        // cmd_mux_004:src_channel -> io_bridge_0_avalon_slave_0_burst_adapter:sink0_channel
	wire          cmd_mux_004_src_startofpacket;                                                                  // cmd_mux_004:src_startofpacket -> io_bridge_0_avalon_slave_0_burst_adapter:sink0_startofpacket
	wire          cmd_mux_004_src_endofpacket;                                                                    // cmd_mux_004:src_endofpacket -> io_bridge_0_avalon_slave_0_burst_adapter:sink0_endofpacket
	wire          io_bridge_0_avalon_slave_0_burst_adapter_source0_valid;                                         // io_bridge_0_avalon_slave_0_burst_adapter:source0_valid -> io_bridge_0_avalon_slave_0_agent:cp_valid
	wire   [84:0] io_bridge_0_avalon_slave_0_burst_adapter_source0_data;                                          // io_bridge_0_avalon_slave_0_burst_adapter:source0_data -> io_bridge_0_avalon_slave_0_agent:cp_data
	wire          io_bridge_0_avalon_slave_0_burst_adapter_source0_ready;                                         // io_bridge_0_avalon_slave_0_agent:cp_ready -> io_bridge_0_avalon_slave_0_burst_adapter:source0_ready
	wire   [15:0] io_bridge_0_avalon_slave_0_burst_adapter_source0_channel;                                       // io_bridge_0_avalon_slave_0_burst_adapter:source0_channel -> io_bridge_0_avalon_slave_0_agent:cp_channel
	wire          io_bridge_0_avalon_slave_0_burst_adapter_source0_startofpacket;                                 // io_bridge_0_avalon_slave_0_burst_adapter:source0_startofpacket -> io_bridge_0_avalon_slave_0_agent:cp_startofpacket
	wire          io_bridge_0_avalon_slave_0_burst_adapter_source0_endofpacket;                                   // io_bridge_0_avalon_slave_0_burst_adapter:source0_endofpacket -> io_bridge_0_avalon_slave_0_agent:cp_endofpacket
	wire          cmd_demux_src1_valid;                                                                           // cmd_demux:src1_valid -> cmd_mux_001:sink0_valid
	wire  [111:0] cmd_demux_src1_data;                                                                            // cmd_demux:src1_data -> cmd_mux_001:sink0_data
	wire          cmd_demux_src1_ready;                                                                           // cmd_mux_001:sink0_ready -> cmd_demux:src1_ready
	wire   [15:0] cmd_demux_src1_channel;                                                                         // cmd_demux:src1_channel -> cmd_mux_001:sink0_channel
	wire          cmd_demux_src1_startofpacket;                                                                   // cmd_demux:src1_startofpacket -> cmd_mux_001:sink0_startofpacket
	wire          cmd_demux_src1_endofpacket;                                                                     // cmd_demux:src1_endofpacket -> cmd_mux_001:sink0_endofpacket
	wire          cmd_demux_src2_valid;                                                                           // cmd_demux:src2_valid -> cmd_mux_002:sink0_valid
	wire  [111:0] cmd_demux_src2_data;                                                                            // cmd_demux:src2_data -> cmd_mux_002:sink0_data
	wire          cmd_demux_src2_ready;                                                                           // cmd_mux_002:sink0_ready -> cmd_demux:src2_ready
	wire   [15:0] cmd_demux_src2_channel;                                                                         // cmd_demux:src2_channel -> cmd_mux_002:sink0_channel
	wire          cmd_demux_src2_startofpacket;                                                                   // cmd_demux:src2_startofpacket -> cmd_mux_002:sink0_startofpacket
	wire          cmd_demux_src2_endofpacket;                                                                     // cmd_demux:src2_endofpacket -> cmd_mux_002:sink0_endofpacket
	wire          cmd_demux_src3_valid;                                                                           // cmd_demux:src3_valid -> cmd_mux_003:sink0_valid
	wire  [111:0] cmd_demux_src3_data;                                                                            // cmd_demux:src3_data -> cmd_mux_003:sink0_data
	wire          cmd_demux_src3_ready;                                                                           // cmd_mux_003:sink0_ready -> cmd_demux:src3_ready
	wire   [15:0] cmd_demux_src3_channel;                                                                         // cmd_demux:src3_channel -> cmd_mux_003:sink0_channel
	wire          cmd_demux_src3_startofpacket;                                                                   // cmd_demux:src3_startofpacket -> cmd_mux_003:sink0_startofpacket
	wire          cmd_demux_src3_endofpacket;                                                                     // cmd_demux:src3_endofpacket -> cmd_mux_003:sink0_endofpacket
	wire          cmd_demux_src5_valid;                                                                           // cmd_demux:src5_valid -> cmd_mux_005:sink0_valid
	wire  [111:0] cmd_demux_src5_data;                                                                            // cmd_demux:src5_data -> cmd_mux_005:sink0_data
	wire          cmd_demux_src5_ready;                                                                           // cmd_mux_005:sink0_ready -> cmd_demux:src5_ready
	wire   [15:0] cmd_demux_src5_channel;                                                                         // cmd_demux:src5_channel -> cmd_mux_005:sink0_channel
	wire          cmd_demux_src5_startofpacket;                                                                   // cmd_demux:src5_startofpacket -> cmd_mux_005:sink0_startofpacket
	wire          cmd_demux_src5_endofpacket;                                                                     // cmd_demux:src5_endofpacket -> cmd_mux_005:sink0_endofpacket
	wire          cmd_demux_src6_valid;                                                                           // cmd_demux:src6_valid -> cmd_mux_006:sink0_valid
	wire  [111:0] cmd_demux_src6_data;                                                                            // cmd_demux:src6_data -> cmd_mux_006:sink0_data
	wire          cmd_demux_src6_ready;                                                                           // cmd_mux_006:sink0_ready -> cmd_demux:src6_ready
	wire   [15:0] cmd_demux_src6_channel;                                                                         // cmd_demux:src6_channel -> cmd_mux_006:sink0_channel
	wire          cmd_demux_src6_startofpacket;                                                                   // cmd_demux:src6_startofpacket -> cmd_mux_006:sink0_startofpacket
	wire          cmd_demux_src6_endofpacket;                                                                     // cmd_demux:src6_endofpacket -> cmd_mux_006:sink0_endofpacket
	wire          cmd_demux_src7_valid;                                                                           // cmd_demux:src7_valid -> cmd_mux_007:sink0_valid
	wire  [111:0] cmd_demux_src7_data;                                                                            // cmd_demux:src7_data -> cmd_mux_007:sink0_data
	wire          cmd_demux_src7_ready;                                                                           // cmd_mux_007:sink0_ready -> cmd_demux:src7_ready
	wire   [15:0] cmd_demux_src7_channel;                                                                         // cmd_demux:src7_channel -> cmd_mux_007:sink0_channel
	wire          cmd_demux_src7_startofpacket;                                                                   // cmd_demux:src7_startofpacket -> cmd_mux_007:sink0_startofpacket
	wire          cmd_demux_src7_endofpacket;                                                                     // cmd_demux:src7_endofpacket -> cmd_mux_007:sink0_endofpacket
	wire          cmd_demux_src8_valid;                                                                           // cmd_demux:src8_valid -> cmd_mux_008:sink0_valid
	wire  [111:0] cmd_demux_src8_data;                                                                            // cmd_demux:src8_data -> cmd_mux_008:sink0_data
	wire          cmd_demux_src8_ready;                                                                           // cmd_mux_008:sink0_ready -> cmd_demux:src8_ready
	wire   [15:0] cmd_demux_src8_channel;                                                                         // cmd_demux:src8_channel -> cmd_mux_008:sink0_channel
	wire          cmd_demux_src8_startofpacket;                                                                   // cmd_demux:src8_startofpacket -> cmd_mux_008:sink0_startofpacket
	wire          cmd_demux_src8_endofpacket;                                                                     // cmd_demux:src8_endofpacket -> cmd_mux_008:sink0_endofpacket
	wire          cmd_demux_src12_valid;                                                                          // cmd_demux:src12_valid -> cmd_mux_012:sink0_valid
	wire  [111:0] cmd_demux_src12_data;                                                                           // cmd_demux:src12_data -> cmd_mux_012:sink0_data
	wire          cmd_demux_src12_ready;                                                                          // cmd_mux_012:sink0_ready -> cmd_demux:src12_ready
	wire   [15:0] cmd_demux_src12_channel;                                                                        // cmd_demux:src12_channel -> cmd_mux_012:sink0_channel
	wire          cmd_demux_src12_startofpacket;                                                                  // cmd_demux:src12_startofpacket -> cmd_mux_012:sink0_startofpacket
	wire          cmd_demux_src12_endofpacket;                                                                    // cmd_demux:src12_endofpacket -> cmd_mux_012:sink0_endofpacket
	wire          cmd_demux_src13_valid;                                                                          // cmd_demux:src13_valid -> cmd_mux_013:sink0_valid
	wire  [111:0] cmd_demux_src13_data;                                                                           // cmd_demux:src13_data -> cmd_mux_013:sink0_data
	wire          cmd_demux_src13_ready;                                                                          // cmd_mux_013:sink0_ready -> cmd_demux:src13_ready
	wire   [15:0] cmd_demux_src13_channel;                                                                        // cmd_demux:src13_channel -> cmd_mux_013:sink0_channel
	wire          cmd_demux_src13_startofpacket;                                                                  // cmd_demux:src13_startofpacket -> cmd_mux_013:sink0_startofpacket
	wire          cmd_demux_src13_endofpacket;                                                                    // cmd_demux:src13_endofpacket -> cmd_mux_013:sink0_endofpacket
	wire          cmd_demux_src14_valid;                                                                          // cmd_demux:src14_valid -> cmd_mux_014:sink0_valid
	wire  [111:0] cmd_demux_src14_data;                                                                           // cmd_demux:src14_data -> cmd_mux_014:sink0_data
	wire          cmd_demux_src14_ready;                                                                          // cmd_mux_014:sink0_ready -> cmd_demux:src14_ready
	wire   [15:0] cmd_demux_src14_channel;                                                                        // cmd_demux:src14_channel -> cmd_mux_014:sink0_channel
	wire          cmd_demux_src14_startofpacket;                                                                  // cmd_demux:src14_startofpacket -> cmd_mux_014:sink0_startofpacket
	wire          cmd_demux_src14_endofpacket;                                                                    // cmd_demux:src14_endofpacket -> cmd_mux_014:sink0_endofpacket
	wire          cmd_demux_src15_valid;                                                                          // cmd_demux:src15_valid -> cmd_mux_015:sink0_valid
	wire  [111:0] cmd_demux_src15_data;                                                                           // cmd_demux:src15_data -> cmd_mux_015:sink0_data
	wire          cmd_demux_src15_ready;                                                                          // cmd_mux_015:sink0_ready -> cmd_demux:src15_ready
	wire   [15:0] cmd_demux_src15_channel;                                                                        // cmd_demux:src15_channel -> cmd_mux_015:sink0_channel
	wire          cmd_demux_src15_startofpacket;                                                                  // cmd_demux:src15_startofpacket -> cmd_mux_015:sink0_startofpacket
	wire          cmd_demux_src15_endofpacket;                                                                    // cmd_demux:src15_endofpacket -> cmd_mux_015:sink0_endofpacket
	wire          cmd_demux_001_src0_valid;                                                                       // cmd_demux_001:src0_valid -> cmd_mux_001:sink1_valid
	wire  [111:0] cmd_demux_001_src0_data;                                                                        // cmd_demux_001:src0_data -> cmd_mux_001:sink1_data
	wire          cmd_demux_001_src0_ready;                                                                       // cmd_mux_001:sink1_ready -> cmd_demux_001:src0_ready
	wire   [15:0] cmd_demux_001_src0_channel;                                                                     // cmd_demux_001:src0_channel -> cmd_mux_001:sink1_channel
	wire          cmd_demux_001_src0_startofpacket;                                                               // cmd_demux_001:src0_startofpacket -> cmd_mux_001:sink1_startofpacket
	wire          cmd_demux_001_src0_endofpacket;                                                                 // cmd_demux_001:src0_endofpacket -> cmd_mux_001:sink1_endofpacket
	wire          cmd_demux_001_src1_valid;                                                                       // cmd_demux_001:src1_valid -> cmd_mux_008:sink1_valid
	wire  [111:0] cmd_demux_001_src1_data;                                                                        // cmd_demux_001:src1_data -> cmd_mux_008:sink1_data
	wire          cmd_demux_001_src1_ready;                                                                       // cmd_mux_008:sink1_ready -> cmd_demux_001:src1_ready
	wire   [15:0] cmd_demux_001_src1_channel;                                                                     // cmd_demux_001:src1_channel -> cmd_mux_008:sink1_channel
	wire          cmd_demux_001_src1_startofpacket;                                                               // cmd_demux_001:src1_startofpacket -> cmd_mux_008:sink1_startofpacket
	wire          cmd_demux_001_src1_endofpacket;                                                                 // cmd_demux_001:src1_endofpacket -> cmd_mux_008:sink1_endofpacket
	wire          cmd_demux_001_src2_valid;                                                                       // cmd_demux_001:src2_valid -> cmd_mux_012:sink1_valid
	wire  [111:0] cmd_demux_001_src2_data;                                                                        // cmd_demux_001:src2_data -> cmd_mux_012:sink1_data
	wire          cmd_demux_001_src2_ready;                                                                       // cmd_mux_012:sink1_ready -> cmd_demux_001:src2_ready
	wire   [15:0] cmd_demux_001_src2_channel;                                                                     // cmd_demux_001:src2_channel -> cmd_mux_012:sink1_channel
	wire          cmd_demux_001_src2_startofpacket;                                                               // cmd_demux_001:src2_startofpacket -> cmd_mux_012:sink1_startofpacket
	wire          cmd_demux_001_src2_endofpacket;                                                                 // cmd_demux_001:src2_endofpacket -> cmd_mux_012:sink1_endofpacket
	wire          cmd_demux_002_src0_valid;                                                                       // cmd_demux_002:src0_valid -> cmd_mux_001:sink2_valid
	wire  [111:0] cmd_demux_002_src0_data;                                                                        // cmd_demux_002:src0_data -> cmd_mux_001:sink2_data
	wire          cmd_demux_002_src0_ready;                                                                       // cmd_mux_001:sink2_ready -> cmd_demux_002:src0_ready
	wire   [15:0] cmd_demux_002_src0_channel;                                                                     // cmd_demux_002:src0_channel -> cmd_mux_001:sink2_channel
	wire          cmd_demux_002_src0_startofpacket;                                                               // cmd_demux_002:src0_startofpacket -> cmd_mux_001:sink2_startofpacket
	wire          cmd_demux_002_src0_endofpacket;                                                                 // cmd_demux_002:src0_endofpacket -> cmd_mux_001:sink2_endofpacket
	wire          cmd_demux_003_src0_valid;                                                                       // cmd_demux_003:src0_valid -> cmd_mux_001:sink3_valid
	wire  [111:0] cmd_demux_003_src0_data;                                                                        // cmd_demux_003:src0_data -> cmd_mux_001:sink3_data
	wire          cmd_demux_003_src0_ready;                                                                       // cmd_mux_001:sink3_ready -> cmd_demux_003:src0_ready
	wire   [15:0] cmd_demux_003_src0_channel;                                                                     // cmd_demux_003:src0_channel -> cmd_mux_001:sink3_channel
	wire          cmd_demux_003_src0_startofpacket;                                                               // cmd_demux_003:src0_startofpacket -> cmd_mux_001:sink3_startofpacket
	wire          cmd_demux_003_src0_endofpacket;                                                                 // cmd_demux_003:src0_endofpacket -> cmd_mux_001:sink3_endofpacket
	wire          rsp_demux_001_src0_valid;                                                                       // rsp_demux_001:src0_valid -> rsp_mux:sink1_valid
	wire  [111:0] rsp_demux_001_src0_data;                                                                        // rsp_demux_001:src0_data -> rsp_mux:sink1_data
	wire          rsp_demux_001_src0_ready;                                                                       // rsp_mux:sink1_ready -> rsp_demux_001:src0_ready
	wire   [15:0] rsp_demux_001_src0_channel;                                                                     // rsp_demux_001:src0_channel -> rsp_mux:sink1_channel
	wire          rsp_demux_001_src0_startofpacket;                                                               // rsp_demux_001:src0_startofpacket -> rsp_mux:sink1_startofpacket
	wire          rsp_demux_001_src0_endofpacket;                                                                 // rsp_demux_001:src0_endofpacket -> rsp_mux:sink1_endofpacket
	wire          rsp_demux_001_src1_valid;                                                                       // rsp_demux_001:src1_valid -> rsp_mux_001:sink0_valid
	wire  [111:0] rsp_demux_001_src1_data;                                                                        // rsp_demux_001:src1_data -> rsp_mux_001:sink0_data
	wire          rsp_demux_001_src1_ready;                                                                       // rsp_mux_001:sink0_ready -> rsp_demux_001:src1_ready
	wire   [15:0] rsp_demux_001_src1_channel;                                                                     // rsp_demux_001:src1_channel -> rsp_mux_001:sink0_channel
	wire          rsp_demux_001_src1_startofpacket;                                                               // rsp_demux_001:src1_startofpacket -> rsp_mux_001:sink0_startofpacket
	wire          rsp_demux_001_src1_endofpacket;                                                                 // rsp_demux_001:src1_endofpacket -> rsp_mux_001:sink0_endofpacket
	wire          rsp_demux_001_src2_valid;                                                                       // rsp_demux_001:src2_valid -> rsp_mux_002:sink0_valid
	wire  [111:0] rsp_demux_001_src2_data;                                                                        // rsp_demux_001:src2_data -> rsp_mux_002:sink0_data
	wire          rsp_demux_001_src2_ready;                                                                       // rsp_mux_002:sink0_ready -> rsp_demux_001:src2_ready
	wire   [15:0] rsp_demux_001_src2_channel;                                                                     // rsp_demux_001:src2_channel -> rsp_mux_002:sink0_channel
	wire          rsp_demux_001_src2_startofpacket;                                                               // rsp_demux_001:src2_startofpacket -> rsp_mux_002:sink0_startofpacket
	wire          rsp_demux_001_src2_endofpacket;                                                                 // rsp_demux_001:src2_endofpacket -> rsp_mux_002:sink0_endofpacket
	wire          rsp_demux_001_src3_valid;                                                                       // rsp_demux_001:src3_valid -> rsp_mux_003:sink0_valid
	wire  [111:0] rsp_demux_001_src3_data;                                                                        // rsp_demux_001:src3_data -> rsp_mux_003:sink0_data
	wire          rsp_demux_001_src3_ready;                                                                       // rsp_mux_003:sink0_ready -> rsp_demux_001:src3_ready
	wire   [15:0] rsp_demux_001_src3_channel;                                                                     // rsp_demux_001:src3_channel -> rsp_mux_003:sink0_channel
	wire          rsp_demux_001_src3_startofpacket;                                                               // rsp_demux_001:src3_startofpacket -> rsp_mux_003:sink0_startofpacket
	wire          rsp_demux_001_src3_endofpacket;                                                                 // rsp_demux_001:src3_endofpacket -> rsp_mux_003:sink0_endofpacket
	wire          rsp_demux_002_src0_valid;                                                                       // rsp_demux_002:src0_valid -> rsp_mux:sink2_valid
	wire  [111:0] rsp_demux_002_src0_data;                                                                        // rsp_demux_002:src0_data -> rsp_mux:sink2_data
	wire          rsp_demux_002_src0_ready;                                                                       // rsp_mux:sink2_ready -> rsp_demux_002:src0_ready
	wire   [15:0] rsp_demux_002_src0_channel;                                                                     // rsp_demux_002:src0_channel -> rsp_mux:sink2_channel
	wire          rsp_demux_002_src0_startofpacket;                                                               // rsp_demux_002:src0_startofpacket -> rsp_mux:sink2_startofpacket
	wire          rsp_demux_002_src0_endofpacket;                                                                 // rsp_demux_002:src0_endofpacket -> rsp_mux:sink2_endofpacket
	wire          rsp_demux_003_src0_valid;                                                                       // rsp_demux_003:src0_valid -> rsp_mux:sink3_valid
	wire  [111:0] rsp_demux_003_src0_data;                                                                        // rsp_demux_003:src0_data -> rsp_mux:sink3_data
	wire          rsp_demux_003_src0_ready;                                                                       // rsp_mux:sink3_ready -> rsp_demux_003:src0_ready
	wire   [15:0] rsp_demux_003_src0_channel;                                                                     // rsp_demux_003:src0_channel -> rsp_mux:sink3_channel
	wire          rsp_demux_003_src0_startofpacket;                                                               // rsp_demux_003:src0_startofpacket -> rsp_mux:sink3_startofpacket
	wire          rsp_demux_003_src0_endofpacket;                                                                 // rsp_demux_003:src0_endofpacket -> rsp_mux:sink3_endofpacket
	wire          rsp_demux_005_src0_valid;                                                                       // rsp_demux_005:src0_valid -> rsp_mux:sink5_valid
	wire  [111:0] rsp_demux_005_src0_data;                                                                        // rsp_demux_005:src0_data -> rsp_mux:sink5_data
	wire          rsp_demux_005_src0_ready;                                                                       // rsp_mux:sink5_ready -> rsp_demux_005:src0_ready
	wire   [15:0] rsp_demux_005_src0_channel;                                                                     // rsp_demux_005:src0_channel -> rsp_mux:sink5_channel
	wire          rsp_demux_005_src0_startofpacket;                                                               // rsp_demux_005:src0_startofpacket -> rsp_mux:sink5_startofpacket
	wire          rsp_demux_005_src0_endofpacket;                                                                 // rsp_demux_005:src0_endofpacket -> rsp_mux:sink5_endofpacket
	wire          rsp_demux_006_src0_valid;                                                                       // rsp_demux_006:src0_valid -> rsp_mux:sink6_valid
	wire  [111:0] rsp_demux_006_src0_data;                                                                        // rsp_demux_006:src0_data -> rsp_mux:sink6_data
	wire          rsp_demux_006_src0_ready;                                                                       // rsp_mux:sink6_ready -> rsp_demux_006:src0_ready
	wire   [15:0] rsp_demux_006_src0_channel;                                                                     // rsp_demux_006:src0_channel -> rsp_mux:sink6_channel
	wire          rsp_demux_006_src0_startofpacket;                                                               // rsp_demux_006:src0_startofpacket -> rsp_mux:sink6_startofpacket
	wire          rsp_demux_006_src0_endofpacket;                                                                 // rsp_demux_006:src0_endofpacket -> rsp_mux:sink6_endofpacket
	wire          rsp_demux_007_src0_valid;                                                                       // rsp_demux_007:src0_valid -> rsp_mux:sink7_valid
	wire  [111:0] rsp_demux_007_src0_data;                                                                        // rsp_demux_007:src0_data -> rsp_mux:sink7_data
	wire          rsp_demux_007_src0_ready;                                                                       // rsp_mux:sink7_ready -> rsp_demux_007:src0_ready
	wire   [15:0] rsp_demux_007_src0_channel;                                                                     // rsp_demux_007:src0_channel -> rsp_mux:sink7_channel
	wire          rsp_demux_007_src0_startofpacket;                                                               // rsp_demux_007:src0_startofpacket -> rsp_mux:sink7_startofpacket
	wire          rsp_demux_007_src0_endofpacket;                                                                 // rsp_demux_007:src0_endofpacket -> rsp_mux:sink7_endofpacket
	wire          rsp_demux_008_src0_valid;                                                                       // rsp_demux_008:src0_valid -> rsp_mux:sink8_valid
	wire  [111:0] rsp_demux_008_src0_data;                                                                        // rsp_demux_008:src0_data -> rsp_mux:sink8_data
	wire          rsp_demux_008_src0_ready;                                                                       // rsp_mux:sink8_ready -> rsp_demux_008:src0_ready
	wire   [15:0] rsp_demux_008_src0_channel;                                                                     // rsp_demux_008:src0_channel -> rsp_mux:sink8_channel
	wire          rsp_demux_008_src0_startofpacket;                                                               // rsp_demux_008:src0_startofpacket -> rsp_mux:sink8_startofpacket
	wire          rsp_demux_008_src0_endofpacket;                                                                 // rsp_demux_008:src0_endofpacket -> rsp_mux:sink8_endofpacket
	wire          rsp_demux_008_src1_valid;                                                                       // rsp_demux_008:src1_valid -> rsp_mux_001:sink1_valid
	wire  [111:0] rsp_demux_008_src1_data;                                                                        // rsp_demux_008:src1_data -> rsp_mux_001:sink1_data
	wire          rsp_demux_008_src1_ready;                                                                       // rsp_mux_001:sink1_ready -> rsp_demux_008:src1_ready
	wire   [15:0] rsp_demux_008_src1_channel;                                                                     // rsp_demux_008:src1_channel -> rsp_mux_001:sink1_channel
	wire          rsp_demux_008_src1_startofpacket;                                                               // rsp_demux_008:src1_startofpacket -> rsp_mux_001:sink1_startofpacket
	wire          rsp_demux_008_src1_endofpacket;                                                                 // rsp_demux_008:src1_endofpacket -> rsp_mux_001:sink1_endofpacket
	wire          rsp_demux_012_src0_valid;                                                                       // rsp_demux_012:src0_valid -> rsp_mux:sink12_valid
	wire  [111:0] rsp_demux_012_src0_data;                                                                        // rsp_demux_012:src0_data -> rsp_mux:sink12_data
	wire          rsp_demux_012_src0_ready;                                                                       // rsp_mux:sink12_ready -> rsp_demux_012:src0_ready
	wire   [15:0] rsp_demux_012_src0_channel;                                                                     // rsp_demux_012:src0_channel -> rsp_mux:sink12_channel
	wire          rsp_demux_012_src0_startofpacket;                                                               // rsp_demux_012:src0_startofpacket -> rsp_mux:sink12_startofpacket
	wire          rsp_demux_012_src0_endofpacket;                                                                 // rsp_demux_012:src0_endofpacket -> rsp_mux:sink12_endofpacket
	wire          rsp_demux_012_src1_valid;                                                                       // rsp_demux_012:src1_valid -> rsp_mux_001:sink2_valid
	wire  [111:0] rsp_demux_012_src1_data;                                                                        // rsp_demux_012:src1_data -> rsp_mux_001:sink2_data
	wire          rsp_demux_012_src1_ready;                                                                       // rsp_mux_001:sink2_ready -> rsp_demux_012:src1_ready
	wire   [15:0] rsp_demux_012_src1_channel;                                                                     // rsp_demux_012:src1_channel -> rsp_mux_001:sink2_channel
	wire          rsp_demux_012_src1_startofpacket;                                                               // rsp_demux_012:src1_startofpacket -> rsp_mux_001:sink2_startofpacket
	wire          rsp_demux_012_src1_endofpacket;                                                                 // rsp_demux_012:src1_endofpacket -> rsp_mux_001:sink2_endofpacket
	wire          rsp_demux_013_src0_valid;                                                                       // rsp_demux_013:src0_valid -> rsp_mux:sink13_valid
	wire  [111:0] rsp_demux_013_src0_data;                                                                        // rsp_demux_013:src0_data -> rsp_mux:sink13_data
	wire          rsp_demux_013_src0_ready;                                                                       // rsp_mux:sink13_ready -> rsp_demux_013:src0_ready
	wire   [15:0] rsp_demux_013_src0_channel;                                                                     // rsp_demux_013:src0_channel -> rsp_mux:sink13_channel
	wire          rsp_demux_013_src0_startofpacket;                                                               // rsp_demux_013:src0_startofpacket -> rsp_mux:sink13_startofpacket
	wire          rsp_demux_013_src0_endofpacket;                                                                 // rsp_demux_013:src0_endofpacket -> rsp_mux:sink13_endofpacket
	wire          rsp_demux_014_src0_valid;                                                                       // rsp_demux_014:src0_valid -> rsp_mux:sink14_valid
	wire  [111:0] rsp_demux_014_src0_data;                                                                        // rsp_demux_014:src0_data -> rsp_mux:sink14_data
	wire          rsp_demux_014_src0_ready;                                                                       // rsp_mux:sink14_ready -> rsp_demux_014:src0_ready
	wire   [15:0] rsp_demux_014_src0_channel;                                                                     // rsp_demux_014:src0_channel -> rsp_mux:sink14_channel
	wire          rsp_demux_014_src0_startofpacket;                                                               // rsp_demux_014:src0_startofpacket -> rsp_mux:sink14_startofpacket
	wire          rsp_demux_014_src0_endofpacket;                                                                 // rsp_demux_014:src0_endofpacket -> rsp_mux:sink14_endofpacket
	wire          rsp_demux_015_src0_valid;                                                                       // rsp_demux_015:src0_valid -> rsp_mux:sink15_valid
	wire  [111:0] rsp_demux_015_src0_data;                                                                        // rsp_demux_015:src0_data -> rsp_mux:sink15_data
	wire          rsp_demux_015_src0_ready;                                                                       // rsp_mux:sink15_ready -> rsp_demux_015:src0_ready
	wire   [15:0] rsp_demux_015_src0_channel;                                                                     // rsp_demux_015:src0_channel -> rsp_mux:sink15_channel
	wire          rsp_demux_015_src0_startofpacket;                                                               // rsp_demux_015:src0_startofpacket -> rsp_mux:sink15_startofpacket
	wire          rsp_demux_015_src0_endofpacket;                                                                 // rsp_demux_015:src0_endofpacket -> rsp_mux:sink15_endofpacket
	wire          cmd_demux_src0_valid;                                                                           // cmd_demux:src0_valid -> nios2_gen2_0_data_master_to_io_bridge_1_avalon_slave_0_cmd_width_adapter:in_valid
	wire  [111:0] cmd_demux_src0_data;                                                                            // cmd_demux:src0_data -> nios2_gen2_0_data_master_to_io_bridge_1_avalon_slave_0_cmd_width_adapter:in_data
	wire          cmd_demux_src0_ready;                                                                           // nios2_gen2_0_data_master_to_io_bridge_1_avalon_slave_0_cmd_width_adapter:in_ready -> cmd_demux:src0_ready
	wire   [15:0] cmd_demux_src0_channel;                                                                         // cmd_demux:src0_channel -> nios2_gen2_0_data_master_to_io_bridge_1_avalon_slave_0_cmd_width_adapter:in_channel
	wire          cmd_demux_src0_startofpacket;                                                                   // cmd_demux:src0_startofpacket -> nios2_gen2_0_data_master_to_io_bridge_1_avalon_slave_0_cmd_width_adapter:in_startofpacket
	wire          cmd_demux_src0_endofpacket;                                                                     // cmd_demux:src0_endofpacket -> nios2_gen2_0_data_master_to_io_bridge_1_avalon_slave_0_cmd_width_adapter:in_endofpacket
	wire          nios2_gen2_0_data_master_to_io_bridge_1_avalon_slave_0_cmd_width_adapter_src_valid;             // nios2_gen2_0_data_master_to_io_bridge_1_avalon_slave_0_cmd_width_adapter:out_valid -> cmd_mux:sink0_valid
	wire   [84:0] nios2_gen2_0_data_master_to_io_bridge_1_avalon_slave_0_cmd_width_adapter_src_data;              // nios2_gen2_0_data_master_to_io_bridge_1_avalon_slave_0_cmd_width_adapter:out_data -> cmd_mux:sink0_data
	wire          nios2_gen2_0_data_master_to_io_bridge_1_avalon_slave_0_cmd_width_adapter_src_ready;             // cmd_mux:sink0_ready -> nios2_gen2_0_data_master_to_io_bridge_1_avalon_slave_0_cmd_width_adapter:out_ready
	wire   [15:0] nios2_gen2_0_data_master_to_io_bridge_1_avalon_slave_0_cmd_width_adapter_src_channel;           // nios2_gen2_0_data_master_to_io_bridge_1_avalon_slave_0_cmd_width_adapter:out_channel -> cmd_mux:sink0_channel
	wire          nios2_gen2_0_data_master_to_io_bridge_1_avalon_slave_0_cmd_width_adapter_src_startofpacket;     // nios2_gen2_0_data_master_to_io_bridge_1_avalon_slave_0_cmd_width_adapter:out_startofpacket -> cmd_mux:sink0_startofpacket
	wire          nios2_gen2_0_data_master_to_io_bridge_1_avalon_slave_0_cmd_width_adapter_src_endofpacket;       // nios2_gen2_0_data_master_to_io_bridge_1_avalon_slave_0_cmd_width_adapter:out_endofpacket -> cmd_mux:sink0_endofpacket
	wire          cmd_demux_src4_valid;                                                                           // cmd_demux:src4_valid -> nios2_gen2_0_data_master_to_io_bridge_0_avalon_slave_0_cmd_width_adapter:in_valid
	wire  [111:0] cmd_demux_src4_data;                                                                            // cmd_demux:src4_data -> nios2_gen2_0_data_master_to_io_bridge_0_avalon_slave_0_cmd_width_adapter:in_data
	wire          cmd_demux_src4_ready;                                                                           // nios2_gen2_0_data_master_to_io_bridge_0_avalon_slave_0_cmd_width_adapter:in_ready -> cmd_demux:src4_ready
	wire   [15:0] cmd_demux_src4_channel;                                                                         // cmd_demux:src4_channel -> nios2_gen2_0_data_master_to_io_bridge_0_avalon_slave_0_cmd_width_adapter:in_channel
	wire          cmd_demux_src4_startofpacket;                                                                   // cmd_demux:src4_startofpacket -> nios2_gen2_0_data_master_to_io_bridge_0_avalon_slave_0_cmd_width_adapter:in_startofpacket
	wire          cmd_demux_src4_endofpacket;                                                                     // cmd_demux:src4_endofpacket -> nios2_gen2_0_data_master_to_io_bridge_0_avalon_slave_0_cmd_width_adapter:in_endofpacket
	wire          nios2_gen2_0_data_master_to_io_bridge_0_avalon_slave_0_cmd_width_adapter_src_valid;             // nios2_gen2_0_data_master_to_io_bridge_0_avalon_slave_0_cmd_width_adapter:out_valid -> cmd_mux_004:sink0_valid
	wire   [84:0] nios2_gen2_0_data_master_to_io_bridge_0_avalon_slave_0_cmd_width_adapter_src_data;              // nios2_gen2_0_data_master_to_io_bridge_0_avalon_slave_0_cmd_width_adapter:out_data -> cmd_mux_004:sink0_data
	wire          nios2_gen2_0_data_master_to_io_bridge_0_avalon_slave_0_cmd_width_adapter_src_ready;             // cmd_mux_004:sink0_ready -> nios2_gen2_0_data_master_to_io_bridge_0_avalon_slave_0_cmd_width_adapter:out_ready
	wire   [15:0] nios2_gen2_0_data_master_to_io_bridge_0_avalon_slave_0_cmd_width_adapter_src_channel;           // nios2_gen2_0_data_master_to_io_bridge_0_avalon_slave_0_cmd_width_adapter:out_channel -> cmd_mux_004:sink0_channel
	wire          nios2_gen2_0_data_master_to_io_bridge_0_avalon_slave_0_cmd_width_adapter_src_startofpacket;     // nios2_gen2_0_data_master_to_io_bridge_0_avalon_slave_0_cmd_width_adapter:out_startofpacket -> cmd_mux_004:sink0_startofpacket
	wire          nios2_gen2_0_data_master_to_io_bridge_0_avalon_slave_0_cmd_width_adapter_src_endofpacket;       // nios2_gen2_0_data_master_to_io_bridge_0_avalon_slave_0_cmd_width_adapter:out_endofpacket -> cmd_mux_004:sink0_endofpacket
	wire          cmd_demux_src9_valid;                                                                           // cmd_demux:src9_valid -> nios2_gen2_0_data_master_to_audio_out_dma_descriptor_slave_cmd_width_adapter:in_valid
	wire  [111:0] cmd_demux_src9_data;                                                                            // cmd_demux:src9_data -> nios2_gen2_0_data_master_to_audio_out_dma_descriptor_slave_cmd_width_adapter:in_data
	wire          cmd_demux_src9_ready;                                                                           // nios2_gen2_0_data_master_to_audio_out_dma_descriptor_slave_cmd_width_adapter:in_ready -> cmd_demux:src9_ready
	wire   [15:0] cmd_demux_src9_channel;                                                                         // cmd_demux:src9_channel -> nios2_gen2_0_data_master_to_audio_out_dma_descriptor_slave_cmd_width_adapter:in_channel
	wire          cmd_demux_src9_startofpacket;                                                                   // cmd_demux:src9_startofpacket -> nios2_gen2_0_data_master_to_audio_out_dma_descriptor_slave_cmd_width_adapter:in_startofpacket
	wire          cmd_demux_src9_endofpacket;                                                                     // cmd_demux:src9_endofpacket -> nios2_gen2_0_data_master_to_audio_out_dma_descriptor_slave_cmd_width_adapter:in_endofpacket
	wire          nios2_gen2_0_data_master_to_audio_out_dma_descriptor_slave_cmd_width_adapter_src_valid;         // nios2_gen2_0_data_master_to_audio_out_dma_descriptor_slave_cmd_width_adapter:out_valid -> cmd_mux_009:sink0_valid
	wire  [219:0] nios2_gen2_0_data_master_to_audio_out_dma_descriptor_slave_cmd_width_adapter_src_data;          // nios2_gen2_0_data_master_to_audio_out_dma_descriptor_slave_cmd_width_adapter:out_data -> cmd_mux_009:sink0_data
	wire          nios2_gen2_0_data_master_to_audio_out_dma_descriptor_slave_cmd_width_adapter_src_ready;         // cmd_mux_009:sink0_ready -> nios2_gen2_0_data_master_to_audio_out_dma_descriptor_slave_cmd_width_adapter:out_ready
	wire   [15:0] nios2_gen2_0_data_master_to_audio_out_dma_descriptor_slave_cmd_width_adapter_src_channel;       // nios2_gen2_0_data_master_to_audio_out_dma_descriptor_slave_cmd_width_adapter:out_channel -> cmd_mux_009:sink0_channel
	wire          nios2_gen2_0_data_master_to_audio_out_dma_descriptor_slave_cmd_width_adapter_src_startofpacket; // nios2_gen2_0_data_master_to_audio_out_dma_descriptor_slave_cmd_width_adapter:out_startofpacket -> cmd_mux_009:sink0_startofpacket
	wire          nios2_gen2_0_data_master_to_audio_out_dma_descriptor_slave_cmd_width_adapter_src_endofpacket;   // nios2_gen2_0_data_master_to_audio_out_dma_descriptor_slave_cmd_width_adapter:out_endofpacket -> cmd_mux_009:sink0_endofpacket
	wire          cmd_demux_src10_valid;                                                                          // cmd_demux:src10_valid -> nios2_gen2_0_data_master_to_audio_in_dma_descriptor_slave_cmd_width_adapter:in_valid
	wire  [111:0] cmd_demux_src10_data;                                                                           // cmd_demux:src10_data -> nios2_gen2_0_data_master_to_audio_in_dma_descriptor_slave_cmd_width_adapter:in_data
	wire          cmd_demux_src10_ready;                                                                          // nios2_gen2_0_data_master_to_audio_in_dma_descriptor_slave_cmd_width_adapter:in_ready -> cmd_demux:src10_ready
	wire   [15:0] cmd_demux_src10_channel;                                                                        // cmd_demux:src10_channel -> nios2_gen2_0_data_master_to_audio_in_dma_descriptor_slave_cmd_width_adapter:in_channel
	wire          cmd_demux_src10_startofpacket;                                                                  // cmd_demux:src10_startofpacket -> nios2_gen2_0_data_master_to_audio_in_dma_descriptor_slave_cmd_width_adapter:in_startofpacket
	wire          cmd_demux_src10_endofpacket;                                                                    // cmd_demux:src10_endofpacket -> nios2_gen2_0_data_master_to_audio_in_dma_descriptor_slave_cmd_width_adapter:in_endofpacket
	wire          nios2_gen2_0_data_master_to_audio_in_dma_descriptor_slave_cmd_width_adapter_src_valid;          // nios2_gen2_0_data_master_to_audio_in_dma_descriptor_slave_cmd_width_adapter:out_valid -> cmd_mux_010:sink0_valid
	wire  [219:0] nios2_gen2_0_data_master_to_audio_in_dma_descriptor_slave_cmd_width_adapter_src_data;           // nios2_gen2_0_data_master_to_audio_in_dma_descriptor_slave_cmd_width_adapter:out_data -> cmd_mux_010:sink0_data
	wire          nios2_gen2_0_data_master_to_audio_in_dma_descriptor_slave_cmd_width_adapter_src_ready;          // cmd_mux_010:sink0_ready -> nios2_gen2_0_data_master_to_audio_in_dma_descriptor_slave_cmd_width_adapter:out_ready
	wire   [15:0] nios2_gen2_0_data_master_to_audio_in_dma_descriptor_slave_cmd_width_adapter_src_channel;        // nios2_gen2_0_data_master_to_audio_in_dma_descriptor_slave_cmd_width_adapter:out_channel -> cmd_mux_010:sink0_channel
	wire          nios2_gen2_0_data_master_to_audio_in_dma_descriptor_slave_cmd_width_adapter_src_startofpacket;  // nios2_gen2_0_data_master_to_audio_in_dma_descriptor_slave_cmd_width_adapter:out_startofpacket -> cmd_mux_010:sink0_startofpacket
	wire          nios2_gen2_0_data_master_to_audio_in_dma_descriptor_slave_cmd_width_adapter_src_endofpacket;    // nios2_gen2_0_data_master_to_audio_in_dma_descriptor_slave_cmd_width_adapter:out_endofpacket -> cmd_mux_010:sink0_endofpacket
	wire          cmd_demux_src11_valid;                                                                          // cmd_demux:src11_valid -> nios2_gen2_0_data_master_to_jtagdebug_descriptor_slave_cmd_width_adapter:in_valid
	wire  [111:0] cmd_demux_src11_data;                                                                           // cmd_demux:src11_data -> nios2_gen2_0_data_master_to_jtagdebug_descriptor_slave_cmd_width_adapter:in_data
	wire          cmd_demux_src11_ready;                                                                          // nios2_gen2_0_data_master_to_jtagdebug_descriptor_slave_cmd_width_adapter:in_ready -> cmd_demux:src11_ready
	wire   [15:0] cmd_demux_src11_channel;                                                                        // cmd_demux:src11_channel -> nios2_gen2_0_data_master_to_jtagdebug_descriptor_slave_cmd_width_adapter:in_channel
	wire          cmd_demux_src11_startofpacket;                                                                  // cmd_demux:src11_startofpacket -> nios2_gen2_0_data_master_to_jtagdebug_descriptor_slave_cmd_width_adapter:in_startofpacket
	wire          cmd_demux_src11_endofpacket;                                                                    // cmd_demux:src11_endofpacket -> nios2_gen2_0_data_master_to_jtagdebug_descriptor_slave_cmd_width_adapter:in_endofpacket
	wire          nios2_gen2_0_data_master_to_jtagdebug_descriptor_slave_cmd_width_adapter_src_valid;             // nios2_gen2_0_data_master_to_jtagdebug_descriptor_slave_cmd_width_adapter:out_valid -> cmd_mux_011:sink0_valid
	wire  [219:0] nios2_gen2_0_data_master_to_jtagdebug_descriptor_slave_cmd_width_adapter_src_data;              // nios2_gen2_0_data_master_to_jtagdebug_descriptor_slave_cmd_width_adapter:out_data -> cmd_mux_011:sink0_data
	wire          nios2_gen2_0_data_master_to_jtagdebug_descriptor_slave_cmd_width_adapter_src_ready;             // cmd_mux_011:sink0_ready -> nios2_gen2_0_data_master_to_jtagdebug_descriptor_slave_cmd_width_adapter:out_ready
	wire   [15:0] nios2_gen2_0_data_master_to_jtagdebug_descriptor_slave_cmd_width_adapter_src_channel;           // nios2_gen2_0_data_master_to_jtagdebug_descriptor_slave_cmd_width_adapter:out_channel -> cmd_mux_011:sink0_channel
	wire          nios2_gen2_0_data_master_to_jtagdebug_descriptor_slave_cmd_width_adapter_src_startofpacket;     // nios2_gen2_0_data_master_to_jtagdebug_descriptor_slave_cmd_width_adapter:out_startofpacket -> cmd_mux_011:sink0_startofpacket
	wire          nios2_gen2_0_data_master_to_jtagdebug_descriptor_slave_cmd_width_adapter_src_endofpacket;       // nios2_gen2_0_data_master_to_jtagdebug_descriptor_slave_cmd_width_adapter:out_endofpacket -> cmd_mux_011:sink0_endofpacket
	wire          cmd_demux_004_src0_valid;                                                                       // cmd_demux_004:src0_valid -> jtagdebug_mm_write_to_avalon2mem_0_avalon_slave_0_cmd_width_adapter:in_valid
	wire   [84:0] cmd_demux_004_src0_data;                                                                        // cmd_demux_004:src0_data -> jtagdebug_mm_write_to_avalon2mem_0_avalon_slave_0_cmd_width_adapter:in_data
	wire          cmd_demux_004_src0_ready;                                                                       // jtagdebug_mm_write_to_avalon2mem_0_avalon_slave_0_cmd_width_adapter:in_ready -> cmd_demux_004:src0_ready
	wire   [15:0] cmd_demux_004_src0_channel;                                                                     // cmd_demux_004:src0_channel -> jtagdebug_mm_write_to_avalon2mem_0_avalon_slave_0_cmd_width_adapter:in_channel
	wire          cmd_demux_004_src0_startofpacket;                                                               // cmd_demux_004:src0_startofpacket -> jtagdebug_mm_write_to_avalon2mem_0_avalon_slave_0_cmd_width_adapter:in_startofpacket
	wire          cmd_demux_004_src0_endofpacket;                                                                 // cmd_demux_004:src0_endofpacket -> jtagdebug_mm_write_to_avalon2mem_0_avalon_slave_0_cmd_width_adapter:in_endofpacket
	wire          jtagdebug_mm_write_to_avalon2mem_0_avalon_slave_0_cmd_width_adapter_src_valid;                  // jtagdebug_mm_write_to_avalon2mem_0_avalon_slave_0_cmd_width_adapter:out_valid -> cmd_mux_001:sink4_valid
	wire  [111:0] jtagdebug_mm_write_to_avalon2mem_0_avalon_slave_0_cmd_width_adapter_src_data;                   // jtagdebug_mm_write_to_avalon2mem_0_avalon_slave_0_cmd_width_adapter:out_data -> cmd_mux_001:sink4_data
	wire          jtagdebug_mm_write_to_avalon2mem_0_avalon_slave_0_cmd_width_adapter_src_ready;                  // cmd_mux_001:sink4_ready -> jtagdebug_mm_write_to_avalon2mem_0_avalon_slave_0_cmd_width_adapter:out_ready
	wire   [15:0] jtagdebug_mm_write_to_avalon2mem_0_avalon_slave_0_cmd_width_adapter_src_channel;                // jtagdebug_mm_write_to_avalon2mem_0_avalon_slave_0_cmd_width_adapter:out_channel -> cmd_mux_001:sink4_channel
	wire          jtagdebug_mm_write_to_avalon2mem_0_avalon_slave_0_cmd_width_adapter_src_startofpacket;          // jtagdebug_mm_write_to_avalon2mem_0_avalon_slave_0_cmd_width_adapter:out_startofpacket -> cmd_mux_001:sink4_startofpacket
	wire          jtagdebug_mm_write_to_avalon2mem_0_avalon_slave_0_cmd_width_adapter_src_endofpacket;            // jtagdebug_mm_write_to_avalon2mem_0_avalon_slave_0_cmd_width_adapter:out_endofpacket -> cmd_mux_001:sink4_endofpacket
	wire          rsp_demux_src0_valid;                                                                           // rsp_demux:src0_valid -> io_bridge_1_avalon_slave_0_to_nios2_gen2_0_data_master_rsp_width_adapter:in_valid
	wire   [84:0] rsp_demux_src0_data;                                                                            // rsp_demux:src0_data -> io_bridge_1_avalon_slave_0_to_nios2_gen2_0_data_master_rsp_width_adapter:in_data
	wire          rsp_demux_src0_ready;                                                                           // io_bridge_1_avalon_slave_0_to_nios2_gen2_0_data_master_rsp_width_adapter:in_ready -> rsp_demux:src0_ready
	wire   [15:0] rsp_demux_src0_channel;                                                                         // rsp_demux:src0_channel -> io_bridge_1_avalon_slave_0_to_nios2_gen2_0_data_master_rsp_width_adapter:in_channel
	wire          rsp_demux_src0_startofpacket;                                                                   // rsp_demux:src0_startofpacket -> io_bridge_1_avalon_slave_0_to_nios2_gen2_0_data_master_rsp_width_adapter:in_startofpacket
	wire          rsp_demux_src0_endofpacket;                                                                     // rsp_demux:src0_endofpacket -> io_bridge_1_avalon_slave_0_to_nios2_gen2_0_data_master_rsp_width_adapter:in_endofpacket
	wire          io_bridge_1_avalon_slave_0_to_nios2_gen2_0_data_master_rsp_width_adapter_src_valid;             // io_bridge_1_avalon_slave_0_to_nios2_gen2_0_data_master_rsp_width_adapter:out_valid -> rsp_mux:sink0_valid
	wire  [111:0] io_bridge_1_avalon_slave_0_to_nios2_gen2_0_data_master_rsp_width_adapter_src_data;              // io_bridge_1_avalon_slave_0_to_nios2_gen2_0_data_master_rsp_width_adapter:out_data -> rsp_mux:sink0_data
	wire          io_bridge_1_avalon_slave_0_to_nios2_gen2_0_data_master_rsp_width_adapter_src_ready;             // rsp_mux:sink0_ready -> io_bridge_1_avalon_slave_0_to_nios2_gen2_0_data_master_rsp_width_adapter:out_ready
	wire   [15:0] io_bridge_1_avalon_slave_0_to_nios2_gen2_0_data_master_rsp_width_adapter_src_channel;           // io_bridge_1_avalon_slave_0_to_nios2_gen2_0_data_master_rsp_width_adapter:out_channel -> rsp_mux:sink0_channel
	wire          io_bridge_1_avalon_slave_0_to_nios2_gen2_0_data_master_rsp_width_adapter_src_startofpacket;     // io_bridge_1_avalon_slave_0_to_nios2_gen2_0_data_master_rsp_width_adapter:out_startofpacket -> rsp_mux:sink0_startofpacket
	wire          io_bridge_1_avalon_slave_0_to_nios2_gen2_0_data_master_rsp_width_adapter_src_endofpacket;       // io_bridge_1_avalon_slave_0_to_nios2_gen2_0_data_master_rsp_width_adapter:out_endofpacket -> rsp_mux:sink0_endofpacket
	wire          rsp_demux_001_src4_valid;                                                                       // rsp_demux_001:src4_valid -> avalon2mem_0_avalon_slave_0_to_jtagdebug_mm_write_rsp_width_adapter:in_valid
	wire  [111:0] rsp_demux_001_src4_data;                                                                        // rsp_demux_001:src4_data -> avalon2mem_0_avalon_slave_0_to_jtagdebug_mm_write_rsp_width_adapter:in_data
	wire          rsp_demux_001_src4_ready;                                                                       // avalon2mem_0_avalon_slave_0_to_jtagdebug_mm_write_rsp_width_adapter:in_ready -> rsp_demux_001:src4_ready
	wire   [15:0] rsp_demux_001_src4_channel;                                                                     // rsp_demux_001:src4_channel -> avalon2mem_0_avalon_slave_0_to_jtagdebug_mm_write_rsp_width_adapter:in_channel
	wire          rsp_demux_001_src4_startofpacket;                                                               // rsp_demux_001:src4_startofpacket -> avalon2mem_0_avalon_slave_0_to_jtagdebug_mm_write_rsp_width_adapter:in_startofpacket
	wire          rsp_demux_001_src4_endofpacket;                                                                 // rsp_demux_001:src4_endofpacket -> avalon2mem_0_avalon_slave_0_to_jtagdebug_mm_write_rsp_width_adapter:in_endofpacket
	wire          avalon2mem_0_avalon_slave_0_to_jtagdebug_mm_write_rsp_width_adapter_src_valid;                  // avalon2mem_0_avalon_slave_0_to_jtagdebug_mm_write_rsp_width_adapter:out_valid -> rsp_mux_004:sink0_valid
	wire   [84:0] avalon2mem_0_avalon_slave_0_to_jtagdebug_mm_write_rsp_width_adapter_src_data;                   // avalon2mem_0_avalon_slave_0_to_jtagdebug_mm_write_rsp_width_adapter:out_data -> rsp_mux_004:sink0_data
	wire          avalon2mem_0_avalon_slave_0_to_jtagdebug_mm_write_rsp_width_adapter_src_ready;                  // rsp_mux_004:sink0_ready -> avalon2mem_0_avalon_slave_0_to_jtagdebug_mm_write_rsp_width_adapter:out_ready
	wire   [15:0] avalon2mem_0_avalon_slave_0_to_jtagdebug_mm_write_rsp_width_adapter_src_channel;                // avalon2mem_0_avalon_slave_0_to_jtagdebug_mm_write_rsp_width_adapter:out_channel -> rsp_mux_004:sink0_channel
	wire          avalon2mem_0_avalon_slave_0_to_jtagdebug_mm_write_rsp_width_adapter_src_startofpacket;          // avalon2mem_0_avalon_slave_0_to_jtagdebug_mm_write_rsp_width_adapter:out_startofpacket -> rsp_mux_004:sink0_startofpacket
	wire          avalon2mem_0_avalon_slave_0_to_jtagdebug_mm_write_rsp_width_adapter_src_endofpacket;            // avalon2mem_0_avalon_slave_0_to_jtagdebug_mm_write_rsp_width_adapter:out_endofpacket -> rsp_mux_004:sink0_endofpacket
	wire          rsp_demux_004_src0_valid;                                                                       // rsp_demux_004:src0_valid -> io_bridge_0_avalon_slave_0_to_nios2_gen2_0_data_master_rsp_width_adapter:in_valid
	wire   [84:0] rsp_demux_004_src0_data;                                                                        // rsp_demux_004:src0_data -> io_bridge_0_avalon_slave_0_to_nios2_gen2_0_data_master_rsp_width_adapter:in_data
	wire          rsp_demux_004_src0_ready;                                                                       // io_bridge_0_avalon_slave_0_to_nios2_gen2_0_data_master_rsp_width_adapter:in_ready -> rsp_demux_004:src0_ready
	wire   [15:0] rsp_demux_004_src0_channel;                                                                     // rsp_demux_004:src0_channel -> io_bridge_0_avalon_slave_0_to_nios2_gen2_0_data_master_rsp_width_adapter:in_channel
	wire          rsp_demux_004_src0_startofpacket;                                                               // rsp_demux_004:src0_startofpacket -> io_bridge_0_avalon_slave_0_to_nios2_gen2_0_data_master_rsp_width_adapter:in_startofpacket
	wire          rsp_demux_004_src0_endofpacket;                                                                 // rsp_demux_004:src0_endofpacket -> io_bridge_0_avalon_slave_0_to_nios2_gen2_0_data_master_rsp_width_adapter:in_endofpacket
	wire          io_bridge_0_avalon_slave_0_to_nios2_gen2_0_data_master_rsp_width_adapter_src_valid;             // io_bridge_0_avalon_slave_0_to_nios2_gen2_0_data_master_rsp_width_adapter:out_valid -> rsp_mux:sink4_valid
	wire  [111:0] io_bridge_0_avalon_slave_0_to_nios2_gen2_0_data_master_rsp_width_adapter_src_data;              // io_bridge_0_avalon_slave_0_to_nios2_gen2_0_data_master_rsp_width_adapter:out_data -> rsp_mux:sink4_data
	wire          io_bridge_0_avalon_slave_0_to_nios2_gen2_0_data_master_rsp_width_adapter_src_ready;             // rsp_mux:sink4_ready -> io_bridge_0_avalon_slave_0_to_nios2_gen2_0_data_master_rsp_width_adapter:out_ready
	wire   [15:0] io_bridge_0_avalon_slave_0_to_nios2_gen2_0_data_master_rsp_width_adapter_src_channel;           // io_bridge_0_avalon_slave_0_to_nios2_gen2_0_data_master_rsp_width_adapter:out_channel -> rsp_mux:sink4_channel
	wire          io_bridge_0_avalon_slave_0_to_nios2_gen2_0_data_master_rsp_width_adapter_src_startofpacket;     // io_bridge_0_avalon_slave_0_to_nios2_gen2_0_data_master_rsp_width_adapter:out_startofpacket -> rsp_mux:sink4_startofpacket
	wire          io_bridge_0_avalon_slave_0_to_nios2_gen2_0_data_master_rsp_width_adapter_src_endofpacket;       // io_bridge_0_avalon_slave_0_to_nios2_gen2_0_data_master_rsp_width_adapter:out_endofpacket -> rsp_mux:sink4_endofpacket
	wire          rsp_demux_009_src0_valid;                                                                       // rsp_demux_009:src0_valid -> audio_out_dma_descriptor_slave_to_nios2_gen2_0_data_master_rsp_width_adapter:in_valid
	wire  [219:0] rsp_demux_009_src0_data;                                                                        // rsp_demux_009:src0_data -> audio_out_dma_descriptor_slave_to_nios2_gen2_0_data_master_rsp_width_adapter:in_data
	wire          rsp_demux_009_src0_ready;                                                                       // audio_out_dma_descriptor_slave_to_nios2_gen2_0_data_master_rsp_width_adapter:in_ready -> rsp_demux_009:src0_ready
	wire   [15:0] rsp_demux_009_src0_channel;                                                                     // rsp_demux_009:src0_channel -> audio_out_dma_descriptor_slave_to_nios2_gen2_0_data_master_rsp_width_adapter:in_channel
	wire          rsp_demux_009_src0_startofpacket;                                                               // rsp_demux_009:src0_startofpacket -> audio_out_dma_descriptor_slave_to_nios2_gen2_0_data_master_rsp_width_adapter:in_startofpacket
	wire          rsp_demux_009_src0_endofpacket;                                                                 // rsp_demux_009:src0_endofpacket -> audio_out_dma_descriptor_slave_to_nios2_gen2_0_data_master_rsp_width_adapter:in_endofpacket
	wire          audio_out_dma_descriptor_slave_to_nios2_gen2_0_data_master_rsp_width_adapter_src_valid;         // audio_out_dma_descriptor_slave_to_nios2_gen2_0_data_master_rsp_width_adapter:out_valid -> rsp_mux:sink9_valid
	wire  [111:0] audio_out_dma_descriptor_slave_to_nios2_gen2_0_data_master_rsp_width_adapter_src_data;          // audio_out_dma_descriptor_slave_to_nios2_gen2_0_data_master_rsp_width_adapter:out_data -> rsp_mux:sink9_data
	wire          audio_out_dma_descriptor_slave_to_nios2_gen2_0_data_master_rsp_width_adapter_src_ready;         // rsp_mux:sink9_ready -> audio_out_dma_descriptor_slave_to_nios2_gen2_0_data_master_rsp_width_adapter:out_ready
	wire   [15:0] audio_out_dma_descriptor_slave_to_nios2_gen2_0_data_master_rsp_width_adapter_src_channel;       // audio_out_dma_descriptor_slave_to_nios2_gen2_0_data_master_rsp_width_adapter:out_channel -> rsp_mux:sink9_channel
	wire          audio_out_dma_descriptor_slave_to_nios2_gen2_0_data_master_rsp_width_adapter_src_startofpacket; // audio_out_dma_descriptor_slave_to_nios2_gen2_0_data_master_rsp_width_adapter:out_startofpacket -> rsp_mux:sink9_startofpacket
	wire          audio_out_dma_descriptor_slave_to_nios2_gen2_0_data_master_rsp_width_adapter_src_endofpacket;   // audio_out_dma_descriptor_slave_to_nios2_gen2_0_data_master_rsp_width_adapter:out_endofpacket -> rsp_mux:sink9_endofpacket
	wire          rsp_demux_010_src0_valid;                                                                       // rsp_demux_010:src0_valid -> audio_in_dma_descriptor_slave_to_nios2_gen2_0_data_master_rsp_width_adapter:in_valid
	wire  [219:0] rsp_demux_010_src0_data;                                                                        // rsp_demux_010:src0_data -> audio_in_dma_descriptor_slave_to_nios2_gen2_0_data_master_rsp_width_adapter:in_data
	wire          rsp_demux_010_src0_ready;                                                                       // audio_in_dma_descriptor_slave_to_nios2_gen2_0_data_master_rsp_width_adapter:in_ready -> rsp_demux_010:src0_ready
	wire   [15:0] rsp_demux_010_src0_channel;                                                                     // rsp_demux_010:src0_channel -> audio_in_dma_descriptor_slave_to_nios2_gen2_0_data_master_rsp_width_adapter:in_channel
	wire          rsp_demux_010_src0_startofpacket;                                                               // rsp_demux_010:src0_startofpacket -> audio_in_dma_descriptor_slave_to_nios2_gen2_0_data_master_rsp_width_adapter:in_startofpacket
	wire          rsp_demux_010_src0_endofpacket;                                                                 // rsp_demux_010:src0_endofpacket -> audio_in_dma_descriptor_slave_to_nios2_gen2_0_data_master_rsp_width_adapter:in_endofpacket
	wire          audio_in_dma_descriptor_slave_to_nios2_gen2_0_data_master_rsp_width_adapter_src_valid;          // audio_in_dma_descriptor_slave_to_nios2_gen2_0_data_master_rsp_width_adapter:out_valid -> rsp_mux:sink10_valid
	wire  [111:0] audio_in_dma_descriptor_slave_to_nios2_gen2_0_data_master_rsp_width_adapter_src_data;           // audio_in_dma_descriptor_slave_to_nios2_gen2_0_data_master_rsp_width_adapter:out_data -> rsp_mux:sink10_data
	wire          audio_in_dma_descriptor_slave_to_nios2_gen2_0_data_master_rsp_width_adapter_src_ready;          // rsp_mux:sink10_ready -> audio_in_dma_descriptor_slave_to_nios2_gen2_0_data_master_rsp_width_adapter:out_ready
	wire   [15:0] audio_in_dma_descriptor_slave_to_nios2_gen2_0_data_master_rsp_width_adapter_src_channel;        // audio_in_dma_descriptor_slave_to_nios2_gen2_0_data_master_rsp_width_adapter:out_channel -> rsp_mux:sink10_channel
	wire          audio_in_dma_descriptor_slave_to_nios2_gen2_0_data_master_rsp_width_adapter_src_startofpacket;  // audio_in_dma_descriptor_slave_to_nios2_gen2_0_data_master_rsp_width_adapter:out_startofpacket -> rsp_mux:sink10_startofpacket
	wire          audio_in_dma_descriptor_slave_to_nios2_gen2_0_data_master_rsp_width_adapter_src_endofpacket;    // audio_in_dma_descriptor_slave_to_nios2_gen2_0_data_master_rsp_width_adapter:out_endofpacket -> rsp_mux:sink10_endofpacket
	wire          rsp_demux_011_src0_valid;                                                                       // rsp_demux_011:src0_valid -> jtagdebug_descriptor_slave_to_nios2_gen2_0_data_master_rsp_width_adapter:in_valid
	wire  [219:0] rsp_demux_011_src0_data;                                                                        // rsp_demux_011:src0_data -> jtagdebug_descriptor_slave_to_nios2_gen2_0_data_master_rsp_width_adapter:in_data
	wire          rsp_demux_011_src0_ready;                                                                       // jtagdebug_descriptor_slave_to_nios2_gen2_0_data_master_rsp_width_adapter:in_ready -> rsp_demux_011:src0_ready
	wire   [15:0] rsp_demux_011_src0_channel;                                                                     // rsp_demux_011:src0_channel -> jtagdebug_descriptor_slave_to_nios2_gen2_0_data_master_rsp_width_adapter:in_channel
	wire          rsp_demux_011_src0_startofpacket;                                                               // rsp_demux_011:src0_startofpacket -> jtagdebug_descriptor_slave_to_nios2_gen2_0_data_master_rsp_width_adapter:in_startofpacket
	wire          rsp_demux_011_src0_endofpacket;                                                                 // rsp_demux_011:src0_endofpacket -> jtagdebug_descriptor_slave_to_nios2_gen2_0_data_master_rsp_width_adapter:in_endofpacket
	wire          jtagdebug_descriptor_slave_to_nios2_gen2_0_data_master_rsp_width_adapter_src_valid;             // jtagdebug_descriptor_slave_to_nios2_gen2_0_data_master_rsp_width_adapter:out_valid -> rsp_mux:sink11_valid
	wire  [111:0] jtagdebug_descriptor_slave_to_nios2_gen2_0_data_master_rsp_width_adapter_src_data;              // jtagdebug_descriptor_slave_to_nios2_gen2_0_data_master_rsp_width_adapter:out_data -> rsp_mux:sink11_data
	wire          jtagdebug_descriptor_slave_to_nios2_gen2_0_data_master_rsp_width_adapter_src_ready;             // rsp_mux:sink11_ready -> jtagdebug_descriptor_slave_to_nios2_gen2_0_data_master_rsp_width_adapter:out_ready
	wire   [15:0] jtagdebug_descriptor_slave_to_nios2_gen2_0_data_master_rsp_width_adapter_src_channel;           // jtagdebug_descriptor_slave_to_nios2_gen2_0_data_master_rsp_width_adapter:out_channel -> rsp_mux:sink11_channel
	wire          jtagdebug_descriptor_slave_to_nios2_gen2_0_data_master_rsp_width_adapter_src_startofpacket;     // jtagdebug_descriptor_slave_to_nios2_gen2_0_data_master_rsp_width_adapter:out_startofpacket -> rsp_mux:sink11_startofpacket
	wire          jtagdebug_descriptor_slave_to_nios2_gen2_0_data_master_rsp_width_adapter_src_endofpacket;       // jtagdebug_descriptor_slave_to_nios2_gen2_0_data_master_rsp_width_adapter:out_endofpacket -> rsp_mux:sink11_endofpacket
	wire          io_bridge_1_avalon_slave_0_agent_rdata_fifo_src_valid;                                          // io_bridge_1_avalon_slave_0_agent:rdata_fifo_src_valid -> avalon_st_adapter:in_0_valid
	wire    [9:0] io_bridge_1_avalon_slave_0_agent_rdata_fifo_src_data;                                           // io_bridge_1_avalon_slave_0_agent:rdata_fifo_src_data -> avalon_st_adapter:in_0_data
	wire          io_bridge_1_avalon_slave_0_agent_rdata_fifo_src_ready;                                          // avalon_st_adapter:in_0_ready -> io_bridge_1_avalon_slave_0_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_out_0_valid;                                                                  // avalon_st_adapter:out_0_valid -> io_bridge_1_avalon_slave_0_agent:rdata_fifo_sink_valid
	wire    [9:0] avalon_st_adapter_out_0_data;                                                                   // avalon_st_adapter:out_0_data -> io_bridge_1_avalon_slave_0_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_out_0_ready;                                                                  // io_bridge_1_avalon_slave_0_agent:rdata_fifo_sink_ready -> avalon_st_adapter:out_0_ready
	wire    [0:0] avalon_st_adapter_out_0_error;                                                                  // avalon_st_adapter:out_0_error -> io_bridge_1_avalon_slave_0_agent:rdata_fifo_sink_error
	wire          avalon2mem_0_avalon_slave_0_agent_rdata_fifo_src_valid;                                         // avalon2mem_0_avalon_slave_0_agent:rdata_fifo_src_valid -> avalon_st_adapter_001:in_0_valid
	wire   [33:0] avalon2mem_0_avalon_slave_0_agent_rdata_fifo_src_data;                                          // avalon2mem_0_avalon_slave_0_agent:rdata_fifo_src_data -> avalon_st_adapter_001:in_0_data
	wire          avalon2mem_0_avalon_slave_0_agent_rdata_fifo_src_ready;                                         // avalon_st_adapter_001:in_0_ready -> avalon2mem_0_avalon_slave_0_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_001_out_0_valid;                                                              // avalon_st_adapter_001:out_0_valid -> avalon2mem_0_avalon_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_001_out_0_data;                                                               // avalon_st_adapter_001:out_0_data -> avalon2mem_0_avalon_slave_0_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_001_out_0_ready;                                                              // avalon2mem_0_avalon_slave_0_agent:rdata_fifo_sink_ready -> avalon_st_adapter_001:out_0_ready
	wire    [0:0] avalon_st_adapter_001_out_0_error;                                                              // avalon_st_adapter_001:out_0_error -> avalon2mem_0_avalon_slave_0_agent:rdata_fifo_sink_error
	wire          jtag_0_avalon_slave_0_agent_rdata_fifo_src_valid;                                               // jtag_0_avalon_slave_0_agent:rdata_fifo_src_valid -> avalon_st_adapter_002:in_0_valid
	wire   [33:0] jtag_0_avalon_slave_0_agent_rdata_fifo_src_data;                                                // jtag_0_avalon_slave_0_agent:rdata_fifo_src_data -> avalon_st_adapter_002:in_0_data
	wire          jtag_0_avalon_slave_0_agent_rdata_fifo_src_ready;                                               // avalon_st_adapter_002:in_0_ready -> jtag_0_avalon_slave_0_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_002_out_0_valid;                                                              // avalon_st_adapter_002:out_0_valid -> jtag_0_avalon_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_002_out_0_data;                                                               // avalon_st_adapter_002:out_0_data -> jtag_0_avalon_slave_0_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_002_out_0_ready;                                                              // jtag_0_avalon_slave_0_agent:rdata_fifo_sink_ready -> avalon_st_adapter_002:out_0_ready
	wire    [0:0] avalon_st_adapter_002_out_0_error;                                                              // avalon_st_adapter_002:out_0_error -> jtag_0_avalon_slave_0_agent:rdata_fifo_sink_error
	wire          jtag_1_avalon_slave_0_agent_rdata_fifo_src_valid;                                               // jtag_1_avalon_slave_0_agent:rdata_fifo_src_valid -> avalon_st_adapter_003:in_0_valid
	wire   [33:0] jtag_1_avalon_slave_0_agent_rdata_fifo_src_data;                                                // jtag_1_avalon_slave_0_agent:rdata_fifo_src_data -> avalon_st_adapter_003:in_0_data
	wire          jtag_1_avalon_slave_0_agent_rdata_fifo_src_ready;                                               // avalon_st_adapter_003:in_0_ready -> jtag_1_avalon_slave_0_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_003_out_0_valid;                                                              // avalon_st_adapter_003:out_0_valid -> jtag_1_avalon_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_003_out_0_data;                                                               // avalon_st_adapter_003:out_0_data -> jtag_1_avalon_slave_0_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_003_out_0_ready;                                                              // jtag_1_avalon_slave_0_agent:rdata_fifo_sink_ready -> avalon_st_adapter_003:out_0_ready
	wire    [0:0] avalon_st_adapter_003_out_0_error;                                                              // avalon_st_adapter_003:out_0_error -> jtag_1_avalon_slave_0_agent:rdata_fifo_sink_error
	wire          io_bridge_0_avalon_slave_0_agent_rdata_fifo_src_valid;                                          // io_bridge_0_avalon_slave_0_agent:rdata_fifo_src_valid -> avalon_st_adapter_004:in_0_valid
	wire    [9:0] io_bridge_0_avalon_slave_0_agent_rdata_fifo_src_data;                                           // io_bridge_0_avalon_slave_0_agent:rdata_fifo_src_data -> avalon_st_adapter_004:in_0_data
	wire          io_bridge_0_avalon_slave_0_agent_rdata_fifo_src_ready;                                          // avalon_st_adapter_004:in_0_ready -> io_bridge_0_avalon_slave_0_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_004_out_0_valid;                                                              // avalon_st_adapter_004:out_0_valid -> io_bridge_0_avalon_slave_0_agent:rdata_fifo_sink_valid
	wire    [9:0] avalon_st_adapter_004_out_0_data;                                                               // avalon_st_adapter_004:out_0_data -> io_bridge_0_avalon_slave_0_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_004_out_0_ready;                                                              // io_bridge_0_avalon_slave_0_agent:rdata_fifo_sink_ready -> avalon_st_adapter_004:out_0_ready
	wire    [0:0] avalon_st_adapter_004_out_0_error;                                                              // avalon_st_adapter_004:out_0_error -> io_bridge_0_avalon_slave_0_agent:rdata_fifo_sink_error
	wire          audio_out_dma_csr_agent_rdata_fifo_src_valid;                                                   // audio_out_dma_csr_agent:rdata_fifo_src_valid -> avalon_st_adapter_005:in_0_valid
	wire   [33:0] audio_out_dma_csr_agent_rdata_fifo_src_data;                                                    // audio_out_dma_csr_agent:rdata_fifo_src_data -> avalon_st_adapter_005:in_0_data
	wire          audio_out_dma_csr_agent_rdata_fifo_src_ready;                                                   // avalon_st_adapter_005:in_0_ready -> audio_out_dma_csr_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_005_out_0_valid;                                                              // avalon_st_adapter_005:out_0_valid -> audio_out_dma_csr_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_005_out_0_data;                                                               // avalon_st_adapter_005:out_0_data -> audio_out_dma_csr_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_005_out_0_ready;                                                              // audio_out_dma_csr_agent:rdata_fifo_sink_ready -> avalon_st_adapter_005:out_0_ready
	wire    [0:0] avalon_st_adapter_005_out_0_error;                                                              // avalon_st_adapter_005:out_0_error -> audio_out_dma_csr_agent:rdata_fifo_sink_error
	wire          audio_in_dma_csr_agent_rdata_fifo_src_valid;                                                    // audio_in_dma_csr_agent:rdata_fifo_src_valid -> avalon_st_adapter_006:in_0_valid
	wire   [33:0] audio_in_dma_csr_agent_rdata_fifo_src_data;                                                     // audio_in_dma_csr_agent:rdata_fifo_src_data -> avalon_st_adapter_006:in_0_data
	wire          audio_in_dma_csr_agent_rdata_fifo_src_ready;                                                    // avalon_st_adapter_006:in_0_ready -> audio_in_dma_csr_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_006_out_0_valid;                                                              // avalon_st_adapter_006:out_0_valid -> audio_in_dma_csr_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_006_out_0_data;                                                               // avalon_st_adapter_006:out_0_data -> audio_in_dma_csr_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_006_out_0_ready;                                                              // audio_in_dma_csr_agent:rdata_fifo_sink_ready -> avalon_st_adapter_006:out_0_ready
	wire    [0:0] avalon_st_adapter_006_out_0_error;                                                              // avalon_st_adapter_006:out_0_error -> audio_in_dma_csr_agent:rdata_fifo_sink_error
	wire          jtagdebug_csr_agent_rdata_fifo_src_valid;                                                       // jtagdebug_csr_agent:rdata_fifo_src_valid -> avalon_st_adapter_007:in_0_valid
	wire   [33:0] jtagdebug_csr_agent_rdata_fifo_src_data;                                                        // jtagdebug_csr_agent:rdata_fifo_src_data -> avalon_st_adapter_007:in_0_data
	wire          jtagdebug_csr_agent_rdata_fifo_src_ready;                                                       // avalon_st_adapter_007:in_0_ready -> jtagdebug_csr_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_007_out_0_valid;                                                              // avalon_st_adapter_007:out_0_valid -> jtagdebug_csr_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_007_out_0_data;                                                               // avalon_st_adapter_007:out_0_data -> jtagdebug_csr_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_007_out_0_ready;                                                              // jtagdebug_csr_agent:rdata_fifo_sink_ready -> avalon_st_adapter_007:out_0_ready
	wire    [0:0] avalon_st_adapter_007_out_0_error;                                                              // avalon_st_adapter_007:out_0_error -> jtagdebug_csr_agent:rdata_fifo_sink_error
	wire          nios2_gen2_0_debug_mem_slave_agent_rdata_fifo_src_valid;                                        // nios2_gen2_0_debug_mem_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter_008:in_0_valid
	wire   [33:0] nios2_gen2_0_debug_mem_slave_agent_rdata_fifo_src_data;                                         // nios2_gen2_0_debug_mem_slave_agent:rdata_fifo_src_data -> avalon_st_adapter_008:in_0_data
	wire          nios2_gen2_0_debug_mem_slave_agent_rdata_fifo_src_ready;                                        // avalon_st_adapter_008:in_0_ready -> nios2_gen2_0_debug_mem_slave_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_008_out_0_valid;                                                              // avalon_st_adapter_008:out_0_valid -> nios2_gen2_0_debug_mem_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_008_out_0_data;                                                               // avalon_st_adapter_008:out_0_data -> nios2_gen2_0_debug_mem_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_008_out_0_ready;                                                              // nios2_gen2_0_debug_mem_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_008:out_0_ready
	wire    [0:0] avalon_st_adapter_008_out_0_error;                                                              // avalon_st_adapter_008:out_0_error -> nios2_gen2_0_debug_mem_slave_agent:rdata_fifo_sink_error
	wire          audio_out_dma_descriptor_slave_agent_rdata_fifo_src_valid;                                      // audio_out_dma_descriptor_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter_009:in_0_valid
	wire  [129:0] audio_out_dma_descriptor_slave_agent_rdata_fifo_src_data;                                       // audio_out_dma_descriptor_slave_agent:rdata_fifo_src_data -> avalon_st_adapter_009:in_0_data
	wire          audio_out_dma_descriptor_slave_agent_rdata_fifo_src_ready;                                      // avalon_st_adapter_009:in_0_ready -> audio_out_dma_descriptor_slave_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_009_out_0_valid;                                                              // avalon_st_adapter_009:out_0_valid -> audio_out_dma_descriptor_slave_agent:rdata_fifo_sink_valid
	wire  [129:0] avalon_st_adapter_009_out_0_data;                                                               // avalon_st_adapter_009:out_0_data -> audio_out_dma_descriptor_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_009_out_0_ready;                                                              // audio_out_dma_descriptor_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_009:out_0_ready
	wire    [0:0] avalon_st_adapter_009_out_0_error;                                                              // avalon_st_adapter_009:out_0_error -> audio_out_dma_descriptor_slave_agent:rdata_fifo_sink_error
	wire          audio_in_dma_descriptor_slave_agent_rdata_fifo_src_valid;                                       // audio_in_dma_descriptor_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter_010:in_0_valid
	wire  [129:0] audio_in_dma_descriptor_slave_agent_rdata_fifo_src_data;                                        // audio_in_dma_descriptor_slave_agent:rdata_fifo_src_data -> avalon_st_adapter_010:in_0_data
	wire          audio_in_dma_descriptor_slave_agent_rdata_fifo_src_ready;                                       // avalon_st_adapter_010:in_0_ready -> audio_in_dma_descriptor_slave_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_010_out_0_valid;                                                              // avalon_st_adapter_010:out_0_valid -> audio_in_dma_descriptor_slave_agent:rdata_fifo_sink_valid
	wire  [129:0] avalon_st_adapter_010_out_0_data;                                                               // avalon_st_adapter_010:out_0_data -> audio_in_dma_descriptor_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_010_out_0_ready;                                                              // audio_in_dma_descriptor_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_010:out_0_ready
	wire    [0:0] avalon_st_adapter_010_out_0_error;                                                              // avalon_st_adapter_010:out_0_error -> audio_in_dma_descriptor_slave_agent:rdata_fifo_sink_error
	wire          jtagdebug_descriptor_slave_agent_rdata_fifo_src_valid;                                          // jtagdebug_descriptor_slave_agent:rdata_fifo_src_valid -> avalon_st_adapter_011:in_0_valid
	wire  [129:0] jtagdebug_descriptor_slave_agent_rdata_fifo_src_data;                                           // jtagdebug_descriptor_slave_agent:rdata_fifo_src_data -> avalon_st_adapter_011:in_0_data
	wire          jtagdebug_descriptor_slave_agent_rdata_fifo_src_ready;                                          // avalon_st_adapter_011:in_0_ready -> jtagdebug_descriptor_slave_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_011_out_0_valid;                                                              // avalon_st_adapter_011:out_0_valid -> jtagdebug_descriptor_slave_agent:rdata_fifo_sink_valid
	wire  [129:0] avalon_st_adapter_011_out_0_data;                                                               // avalon_st_adapter_011:out_0_data -> jtagdebug_descriptor_slave_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_011_out_0_ready;                                                              // jtagdebug_descriptor_slave_agent:rdata_fifo_sink_ready -> avalon_st_adapter_011:out_0_ready
	wire    [0:0] avalon_st_adapter_011_out_0_error;                                                              // avalon_st_adapter_011:out_0_error -> jtagdebug_descriptor_slave_agent:rdata_fifo_sink_error
	wire          onchip_memory2_0_s1_agent_rdata_fifo_src_valid;                                                 // onchip_memory2_0_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_012:in_0_valid
	wire   [33:0] onchip_memory2_0_s1_agent_rdata_fifo_src_data;                                                  // onchip_memory2_0_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_012:in_0_data
	wire          onchip_memory2_0_s1_agent_rdata_fifo_src_ready;                                                 // avalon_st_adapter_012:in_0_ready -> onchip_memory2_0_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_012_out_0_valid;                                                              // avalon_st_adapter_012:out_0_valid -> onchip_memory2_0_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_012_out_0_data;                                                               // avalon_st_adapter_012:out_0_data -> onchip_memory2_0_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_012_out_0_ready;                                                              // onchip_memory2_0_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_012:out_0_ready
	wire    [0:0] avalon_st_adapter_012_out_0_error;                                                              // avalon_st_adapter_012:out_0_error -> onchip_memory2_0_s1_agent:rdata_fifo_sink_error
	wire          pio_0_s1_agent_rdata_fifo_src_valid;                                                            // pio_0_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_013:in_0_valid
	wire   [33:0] pio_0_s1_agent_rdata_fifo_src_data;                                                             // pio_0_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_013:in_0_data
	wire          pio_0_s1_agent_rdata_fifo_src_ready;                                                            // avalon_st_adapter_013:in_0_ready -> pio_0_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_013_out_0_valid;                                                              // avalon_st_adapter_013:out_0_valid -> pio_0_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_013_out_0_data;                                                               // avalon_st_adapter_013:out_0_data -> pio_0_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_013_out_0_ready;                                                              // pio_0_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_013:out_0_ready
	wire    [0:0] avalon_st_adapter_013_out_0_error;                                                              // avalon_st_adapter_013:out_0_error -> pio_0_s1_agent:rdata_fifo_sink_error
	wire          pio_1_s1_agent_rdata_fifo_src_valid;                                                            // pio_1_s1_agent:rdata_fifo_src_valid -> avalon_st_adapter_014:in_0_valid
	wire   [33:0] pio_1_s1_agent_rdata_fifo_src_data;                                                             // pio_1_s1_agent:rdata_fifo_src_data -> avalon_st_adapter_014:in_0_data
	wire          pio_1_s1_agent_rdata_fifo_src_ready;                                                            // avalon_st_adapter_014:in_0_ready -> pio_1_s1_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_014_out_0_valid;                                                              // avalon_st_adapter_014:out_0_valid -> pio_1_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_014_out_0_data;                                                               // avalon_st_adapter_014:out_0_data -> pio_1_s1_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_014_out_0_ready;                                                              // pio_1_s1_agent:rdata_fifo_sink_ready -> avalon_st_adapter_014:out_0_ready
	wire    [0:0] avalon_st_adapter_014_out_0_error;                                                              // avalon_st_adapter_014:out_0_error -> pio_1_s1_agent:rdata_fifo_sink_error
	wire          spi_0_spi_control_port_agent_rdata_fifo_src_valid;                                              // spi_0_spi_control_port_agent:rdata_fifo_src_valid -> avalon_st_adapter_015:in_0_valid
	wire   [33:0] spi_0_spi_control_port_agent_rdata_fifo_src_data;                                               // spi_0_spi_control_port_agent:rdata_fifo_src_data -> avalon_st_adapter_015:in_0_data
	wire          spi_0_spi_control_port_agent_rdata_fifo_src_ready;                                              // avalon_st_adapter_015:in_0_ready -> spi_0_spi_control_port_agent:rdata_fifo_src_ready
	wire          avalon_st_adapter_015_out_0_valid;                                                              // avalon_st_adapter_015:out_0_valid -> spi_0_spi_control_port_agent:rdata_fifo_sink_valid
	wire   [33:0] avalon_st_adapter_015_out_0_data;                                                               // avalon_st_adapter_015:out_0_data -> spi_0_spi_control_port_agent:rdata_fifo_sink_data
	wire          avalon_st_adapter_015_out_0_ready;                                                              // spi_0_spi_control_port_agent:rdata_fifo_sink_ready -> avalon_st_adapter_015:out_0_ready
	wire    [0:0] avalon_st_adapter_015_out_0_error;                                                              // avalon_st_adapter_015:out_0_error -> spi_0_spi_control_port_agent:rdata_fifo_sink_error

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (32),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (1)
	) nios2_gen2_0_data_master_translator (
		.clk                    (clk_0_clk_clk),                                                               //                       clk.clk
		.reset                  (nios2_gen2_0_reset_reset_bridge_in_reset_reset),                              //                     reset.reset
		.uav_address            (nios2_gen2_0_data_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (nios2_gen2_0_data_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (nios2_gen2_0_data_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (nios2_gen2_0_data_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (nios2_gen2_0_data_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (nios2_gen2_0_data_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (nios2_gen2_0_data_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (nios2_gen2_0_data_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (nios2_gen2_0_data_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (nios2_gen2_0_data_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (nios2_gen2_0_data_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (nios2_gen2_0_data_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (nios2_gen2_0_data_master_waitrequest),                                        //                          .waitrequest
		.av_byteenable          (nios2_gen2_0_data_master_byteenable),                                         //                          .byteenable
		.av_read                (nios2_gen2_0_data_master_read),                                               //                          .read
		.av_readdata            (nios2_gen2_0_data_master_readdata),                                           //                          .readdata
		.av_write               (nios2_gen2_0_data_master_write),                                              //                          .write
		.av_writedata           (nios2_gen2_0_data_master_writedata),                                          //                          .writedata
		.av_debugaccess         (nios2_gen2_0_data_master_debugaccess),                                        //                          .debugaccess
		.av_burstcount          (1'b1),                                                                        //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                        //               (terminated)
		.av_begintransfer       (1'b0),                                                                        //               (terminated)
		.av_chipselect          (1'b0),                                                                        //               (terminated)
		.av_readdatavalid       (),                                                                            //               (terminated)
		.av_lock                (1'b0),                                                                        //               (terminated)
		.uav_clken              (),                                                                            //               (terminated)
		.av_clken               (1'b1),                                                                        //               (terminated)
		.uav_response           (2'b00),                                                                       //               (terminated)
		.av_response            (),                                                                            //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                        //               (terminated)
		.av_writeresponsevalid  ()                                                                             //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (30),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (0),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (1),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) nios2_gen2_0_instruction_master_translator (
		.clk                    (clk_0_clk_clk),                                                                      //                       clk.clk
		.reset                  (nios2_gen2_0_reset_reset_bridge_in_reset_reset),                                     //                     reset.reset
		.uav_address            (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (nios2_gen2_0_instruction_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (nios2_gen2_0_instruction_master_waitrequest),                                        //                          .waitrequest
		.av_read                (nios2_gen2_0_instruction_master_read),                                               //                          .read
		.av_readdata            (nios2_gen2_0_instruction_master_readdata),                                           //                          .readdata
		.av_burstcount          (1'b1),                                                                               //               (terminated)
		.av_byteenable          (4'b1111),                                                                            //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                               //               (terminated)
		.av_begintransfer       (1'b0),                                                                               //               (terminated)
		.av_chipselect          (1'b0),                                                                               //               (terminated)
		.av_readdatavalid       (),                                                                                   //               (terminated)
		.av_write               (1'b0),                                                                               //               (terminated)
		.av_writedata           (32'b00000000000000000000000000000000),                                               //               (terminated)
		.av_lock                (1'b0),                                                                               //               (terminated)
		.av_debugaccess         (1'b0),                                                                               //               (terminated)
		.uav_clken              (),                                                                                   //               (terminated)
		.av_clken               (1'b1),                                                                               //               (terminated)
		.uav_response           (2'b00),                                                                              //               (terminated)
		.av_response            (),                                                                                   //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                               //               (terminated)
		.av_writeresponsevalid  ()                                                                                    //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (26),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (0),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) audio_out_dma_mm_read_translator (
		.clk                    (clk_0_clk_clk),                                                            //                       clk.clk
		.reset                  (nios2_gen2_0_reset_reset_bridge_in_reset_reset),                           //                     reset.reset
		.uav_address            (audio_out_dma_mm_read_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (audio_out_dma_mm_read_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (audio_out_dma_mm_read_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (audio_out_dma_mm_read_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (audio_out_dma_mm_read_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (audio_out_dma_mm_read_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (audio_out_dma_mm_read_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (audio_out_dma_mm_read_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (audio_out_dma_mm_read_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (audio_out_dma_mm_read_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (audio_out_dma_mm_read_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (audio_out_dma_mm_read_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (audio_out_dma_mm_read_waitrequest),                                        //                          .waitrequest
		.av_byteenable          (audio_out_dma_mm_read_byteenable),                                         //                          .byteenable
		.av_read                (audio_out_dma_mm_read_read),                                               //                          .read
		.av_readdata            (audio_out_dma_mm_read_readdata),                                           //                          .readdata
		.av_readdatavalid       (audio_out_dma_mm_read_readdatavalid),                                      //                          .readdatavalid
		.av_burstcount          (1'b1),                                                                     //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                     //               (terminated)
		.av_begintransfer       (1'b0),                                                                     //               (terminated)
		.av_chipselect          (1'b0),                                                                     //               (terminated)
		.av_write               (1'b0),                                                                     //               (terminated)
		.av_writedata           (32'b00000000000000000000000000000000),                                     //               (terminated)
		.av_lock                (1'b0),                                                                     //               (terminated)
		.av_debugaccess         (1'b0),                                                                     //               (terminated)
		.uav_clken              (),                                                                         //               (terminated)
		.av_clken               (1'b1),                                                                     //               (terminated)
		.uav_response           (2'b00),                                                                    //               (terminated)
		.av_response            (),                                                                         //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                     //               (terminated)
		.av_writeresponsevalid  ()                                                                          //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (26),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (0),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) audio_in_dma_mm_write_translator (
		.clk                    (clk_0_clk_clk),                                                            //                       clk.clk
		.reset                  (nios2_gen2_0_reset_reset_bridge_in_reset_reset),                           //                     reset.reset
		.uav_address            (audio_in_dma_mm_write_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (audio_in_dma_mm_write_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (audio_in_dma_mm_write_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (audio_in_dma_mm_write_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (audio_in_dma_mm_write_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (audio_in_dma_mm_write_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (audio_in_dma_mm_write_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (audio_in_dma_mm_write_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (audio_in_dma_mm_write_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (audio_in_dma_mm_write_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (audio_in_dma_mm_write_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (audio_in_dma_mm_write_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (audio_in_dma_mm_write_waitrequest),                                        //                          .waitrequest
		.av_byteenable          (audio_in_dma_mm_write_byteenable),                                         //                          .byteenable
		.av_write               (audio_in_dma_mm_write_write),                                              //                          .write
		.av_writedata           (audio_in_dma_mm_write_writedata),                                          //                          .writedata
		.av_burstcount          (1'b1),                                                                     //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                     //               (terminated)
		.av_begintransfer       (1'b0),                                                                     //               (terminated)
		.av_chipselect          (1'b0),                                                                     //               (terminated)
		.av_read                (1'b0),                                                                     //               (terminated)
		.av_readdata            (),                                                                         //               (terminated)
		.av_readdatavalid       (),                                                                         //               (terminated)
		.av_lock                (1'b0),                                                                     //               (terminated)
		.av_debugaccess         (1'b0),                                                                     //               (terminated)
		.uav_clken              (),                                                                         //               (terminated)
		.av_clken               (1'b1),                                                                     //               (terminated)
		.uav_response           (2'b00),                                                                    //               (terminated)
		.av_response            (),                                                                         //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                     //               (terminated)
		.av_writeresponsevalid  ()                                                                          //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (26),
		.AV_DATA_W                   (8),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (1),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (1),
		.USE_READ                    (0),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (1),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) jtagdebug_mm_write_translator (
		.clk                    (clk_0_clk_clk),                                                         //                       clk.clk
		.reset                  (nios2_gen2_0_reset_reset_bridge_in_reset_reset),                        //                     reset.reset
		.uav_address            (jtagdebug_mm_write_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (jtagdebug_mm_write_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (jtagdebug_mm_write_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (jtagdebug_mm_write_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (jtagdebug_mm_write_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (jtagdebug_mm_write_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (jtagdebug_mm_write_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (jtagdebug_mm_write_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (jtagdebug_mm_write_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (jtagdebug_mm_write_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (jtagdebug_mm_write_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (jtagdebug_mm_write_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (jtagdebug_mm_write_waitrequest),                                        //                          .waitrequest
		.av_write               (jtagdebug_mm_write_write),                                              //                          .write
		.av_writedata           (jtagdebug_mm_write_writedata),                                          //                          .writedata
		.av_burstcount          (1'b1),                                                                  //               (terminated)
		.av_byteenable          (1'b1),                                                                  //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                  //               (terminated)
		.av_begintransfer       (1'b0),                                                                  //               (terminated)
		.av_chipselect          (1'b0),                                                                  //               (terminated)
		.av_read                (1'b0),                                                                  //               (terminated)
		.av_readdata            (),                                                                      //               (terminated)
		.av_readdatavalid       (),                                                                      //               (terminated)
		.av_lock                (1'b0),                                                                  //               (terminated)
		.av_debugaccess         (1'b0),                                                                  //               (terminated)
		.uav_clken              (),                                                                      //               (terminated)
		.av_clken               (1'b1),                                                                  //               (terminated)
		.uav_response           (2'b00),                                                                 //               (terminated)
		.av_response            (),                                                                      //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                  //               (terminated)
		.av_writeresponsevalid  ()                                                                       //               (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (20),
		.AV_DATA_W                      (8),
		.UAV_DATA_W                     (8),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (1),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (1),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (1),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) io_bridge_1_avalon_slave_0_translator (
		.clk                    (clk_0_clk_clk),                                     //                      clk.clk
		.reset                  (nios2_gen2_0_reset_reset_bridge_in_reset_reset),    //                    reset.reset
		.uav_address            (io_bridge_1_avalon_slave_0_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (io_bridge_1_avalon_slave_0_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (io_bridge_1_avalon_slave_0_agent_m0_read),          //                         .read
		.uav_write              (io_bridge_1_avalon_slave_0_agent_m0_write),         //                         .write
		.uav_waitrequest        (io_bridge_1_avalon_slave_0_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (io_bridge_1_avalon_slave_0_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (io_bridge_1_avalon_slave_0_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (io_bridge_1_avalon_slave_0_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (io_bridge_1_avalon_slave_0_agent_m0_writedata),     //                         .writedata
		.uav_lock               (io_bridge_1_avalon_slave_0_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (io_bridge_1_avalon_slave_0_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (io_bridge_1_avalon_slave_0_address),                //      avalon_anti_slave_0.address
		.av_write               (io_bridge_1_avalon_slave_0_write),                  //                         .write
		.av_read                (io_bridge_1_avalon_slave_0_read),                   //                         .read
		.av_readdata            (io_bridge_1_avalon_slave_0_readdata),               //                         .readdata
		.av_writedata           (io_bridge_1_avalon_slave_0_writedata),              //                         .writedata
		.av_readdatavalid       (io_bridge_1_avalon_slave_0_readdatavalid),          //                         .readdatavalid
		.av_waitrequest         (io_bridge_1_avalon_slave_0_waitrequest),            //                         .waitrequest
		.av_begintransfer       (),                                                  //              (terminated)
		.av_beginbursttransfer  (),                                                  //              (terminated)
		.av_burstcount          (),                                                  //              (terminated)
		.av_byteenable          (),                                                  //              (terminated)
		.av_writebyteenable     (),                                                  //              (terminated)
		.av_lock                (),                                                  //              (terminated)
		.av_chipselect          (),                                                  //              (terminated)
		.av_clken               (),                                                  //              (terminated)
		.uav_clken              (1'b0),                                              //              (terminated)
		.av_debugaccess         (),                                                  //              (terminated)
		.av_outputenable        (),                                                  //              (terminated)
		.uav_response           (),                                                  //              (terminated)
		.av_response            (2'b00),                                             //              (terminated)
		.uav_writeresponsevalid (),                                                  //              (terminated)
		.av_writeresponsevalid  (1'b0)                                               //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (26),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (1),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) avalon2mem_0_avalon_slave_0_translator (
		.clk                    (clk_0_clk_clk),                                      //                      clk.clk
		.reset                  (nios2_gen2_0_reset_reset_bridge_in_reset_reset),     //                    reset.reset
		.uav_address            (avalon2mem_0_avalon_slave_0_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (avalon2mem_0_avalon_slave_0_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (avalon2mem_0_avalon_slave_0_agent_m0_read),          //                         .read
		.uav_write              (avalon2mem_0_avalon_slave_0_agent_m0_write),         //                         .write
		.uav_waitrequest        (avalon2mem_0_avalon_slave_0_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (avalon2mem_0_avalon_slave_0_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (avalon2mem_0_avalon_slave_0_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (avalon2mem_0_avalon_slave_0_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (avalon2mem_0_avalon_slave_0_agent_m0_writedata),     //                         .writedata
		.uav_lock               (avalon2mem_0_avalon_slave_0_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (avalon2mem_0_avalon_slave_0_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (avalon2mem_0_avalon_slave_0_address),                //      avalon_anti_slave_0.address
		.av_write               (avalon2mem_0_avalon_slave_0_write),                  //                         .write
		.av_read                (avalon2mem_0_avalon_slave_0_read),                   //                         .read
		.av_readdata            (avalon2mem_0_avalon_slave_0_readdata),               //                         .readdata
		.av_writedata           (avalon2mem_0_avalon_slave_0_writedata),              //                         .writedata
		.av_byteenable          (avalon2mem_0_avalon_slave_0_byteenable),             //                         .byteenable
		.av_readdatavalid       (avalon2mem_0_avalon_slave_0_readdatavalid),          //                         .readdatavalid
		.av_waitrequest         (avalon2mem_0_avalon_slave_0_waitrequest),            //                         .waitrequest
		.av_begintransfer       (),                                                   //              (terminated)
		.av_beginbursttransfer  (),                                                   //              (terminated)
		.av_burstcount          (),                                                   //              (terminated)
		.av_writebyteenable     (),                                                   //              (terminated)
		.av_lock                (),                                                   //              (terminated)
		.av_chipselect          (),                                                   //              (terminated)
		.av_clken               (),                                                   //              (terminated)
		.uav_clken              (1'b0),                                               //              (terminated)
		.av_debugaccess         (),                                                   //              (terminated)
		.av_outputenable        (),                                                   //              (terminated)
		.uav_response           (),                                                   //              (terminated)
		.av_response            (2'b00),                                              //              (terminated)
		.uav_writeresponsevalid (),                                                   //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (8),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (1),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) jtag_0_avalon_slave_0_translator (
		.clk                    (clk_0_clk_clk),                                  //                      clk.clk
		.reset                  (nios2_gen2_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (jtag_0_avalon_slave_0_agent_m0_address),         // avalon_universal_slave_0.address
		.uav_burstcount         (jtag_0_avalon_slave_0_agent_m0_burstcount),      //                         .burstcount
		.uav_read               (jtag_0_avalon_slave_0_agent_m0_read),            //                         .read
		.uav_write              (jtag_0_avalon_slave_0_agent_m0_write),           //                         .write
		.uav_waitrequest        (jtag_0_avalon_slave_0_agent_m0_waitrequest),     //                         .waitrequest
		.uav_readdatavalid      (jtag_0_avalon_slave_0_agent_m0_readdatavalid),   //                         .readdatavalid
		.uav_byteenable         (jtag_0_avalon_slave_0_agent_m0_byteenable),      //                         .byteenable
		.uav_readdata           (jtag_0_avalon_slave_0_agent_m0_readdata),        //                         .readdata
		.uav_writedata          (jtag_0_avalon_slave_0_agent_m0_writedata),       //                         .writedata
		.uav_lock               (jtag_0_avalon_slave_0_agent_m0_lock),            //                         .lock
		.uav_debugaccess        (jtag_0_avalon_slave_0_agent_m0_debugaccess),     //                         .debugaccess
		.av_address             (jtag_0_avalon_slave_0_address),                  //      avalon_anti_slave_0.address
		.av_write               (jtag_0_avalon_slave_0_write),                    //                         .write
		.av_read                (jtag_0_avalon_slave_0_read),                     //                         .read
		.av_readdata            (jtag_0_avalon_slave_0_readdata),                 //                         .readdata
		.av_writedata           (jtag_0_avalon_slave_0_writedata),                //                         .writedata
		.av_readdatavalid       (jtag_0_avalon_slave_0_readdatavalid),            //                         .readdatavalid
		.av_waitrequest         (jtag_0_avalon_slave_0_waitrequest),              //                         .waitrequest
		.av_begintransfer       (),                                               //              (terminated)
		.av_beginbursttransfer  (),                                               //              (terminated)
		.av_burstcount          (),                                               //              (terminated)
		.av_byteenable          (),                                               //              (terminated)
		.av_writebyteenable     (),                                               //              (terminated)
		.av_lock                (),                                               //              (terminated)
		.av_chipselect          (),                                               //              (terminated)
		.av_clken               (),                                               //              (terminated)
		.uav_clken              (1'b0),                                           //              (terminated)
		.av_debugaccess         (),                                               //              (terminated)
		.av_outputenable        (),                                               //              (terminated)
		.uav_response           (),                                               //              (terminated)
		.av_response            (2'b00),                                          //              (terminated)
		.uav_writeresponsevalid (),                                               //              (terminated)
		.av_writeresponsevalid  (1'b0)                                            //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (8),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (1),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) jtag_1_avalon_slave_0_translator (
		.clk                    (clk_0_clk_clk),                                  //                      clk.clk
		.reset                  (nios2_gen2_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (jtag_1_avalon_slave_0_agent_m0_address),         // avalon_universal_slave_0.address
		.uav_burstcount         (jtag_1_avalon_slave_0_agent_m0_burstcount),      //                         .burstcount
		.uav_read               (jtag_1_avalon_slave_0_agent_m0_read),            //                         .read
		.uav_write              (jtag_1_avalon_slave_0_agent_m0_write),           //                         .write
		.uav_waitrequest        (jtag_1_avalon_slave_0_agent_m0_waitrequest),     //                         .waitrequest
		.uav_readdatavalid      (jtag_1_avalon_slave_0_agent_m0_readdatavalid),   //                         .readdatavalid
		.uav_byteenable         (jtag_1_avalon_slave_0_agent_m0_byteenable),      //                         .byteenable
		.uav_readdata           (jtag_1_avalon_slave_0_agent_m0_readdata),        //                         .readdata
		.uav_writedata          (jtag_1_avalon_slave_0_agent_m0_writedata),       //                         .writedata
		.uav_lock               (jtag_1_avalon_slave_0_agent_m0_lock),            //                         .lock
		.uav_debugaccess        (jtag_1_avalon_slave_0_agent_m0_debugaccess),     //                         .debugaccess
		.av_address             (jtag_1_avalon_slave_0_address),                  //      avalon_anti_slave_0.address
		.av_write               (jtag_1_avalon_slave_0_write),                    //                         .write
		.av_read                (jtag_1_avalon_slave_0_read),                     //                         .read
		.av_readdata            (jtag_1_avalon_slave_0_readdata),                 //                         .readdata
		.av_writedata           (jtag_1_avalon_slave_0_writedata),                //                         .writedata
		.av_readdatavalid       (jtag_1_avalon_slave_0_readdatavalid),            //                         .readdatavalid
		.av_waitrequest         (jtag_1_avalon_slave_0_waitrequest),              //                         .waitrequest
		.av_begintransfer       (),                                               //              (terminated)
		.av_beginbursttransfer  (),                                               //              (terminated)
		.av_burstcount          (),                                               //              (terminated)
		.av_byteenable          (),                                               //              (terminated)
		.av_writebyteenable     (),                                               //              (terminated)
		.av_lock                (),                                               //              (terminated)
		.av_chipselect          (),                                               //              (terminated)
		.av_clken               (),                                               //              (terminated)
		.uav_clken              (1'b0),                                           //              (terminated)
		.av_debugaccess         (),                                               //              (terminated)
		.av_outputenable        (),                                               //              (terminated)
		.uav_response           (),                                               //              (terminated)
		.av_response            (2'b00),                                          //              (terminated)
		.uav_writeresponsevalid (),                                               //              (terminated)
		.av_writeresponsevalid  (1'b0)                                            //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (20),
		.AV_DATA_W                      (8),
		.UAV_DATA_W                     (8),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (1),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (1),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (1),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (1),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) io_bridge_0_avalon_slave_0_translator (
		.clk                    (clk_0_clk_clk),                                     //                      clk.clk
		.reset                  (nios2_gen2_0_reset_reset_bridge_in_reset_reset),    //                    reset.reset
		.uav_address            (io_bridge_0_avalon_slave_0_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (io_bridge_0_avalon_slave_0_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (io_bridge_0_avalon_slave_0_agent_m0_read),          //                         .read
		.uav_write              (io_bridge_0_avalon_slave_0_agent_m0_write),         //                         .write
		.uav_waitrequest        (io_bridge_0_avalon_slave_0_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (io_bridge_0_avalon_slave_0_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (io_bridge_0_avalon_slave_0_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (io_bridge_0_avalon_slave_0_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (io_bridge_0_avalon_slave_0_agent_m0_writedata),     //                         .writedata
		.uav_lock               (io_bridge_0_avalon_slave_0_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (io_bridge_0_avalon_slave_0_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (io_bridge_0_avalon_slave_0_address),                //      avalon_anti_slave_0.address
		.av_write               (io_bridge_0_avalon_slave_0_write),                  //                         .write
		.av_read                (io_bridge_0_avalon_slave_0_read),                   //                         .read
		.av_readdata            (io_bridge_0_avalon_slave_0_readdata),               //                         .readdata
		.av_writedata           (io_bridge_0_avalon_slave_0_writedata),              //                         .writedata
		.av_readdatavalid       (io_bridge_0_avalon_slave_0_readdatavalid),          //                         .readdatavalid
		.av_waitrequest         (io_bridge_0_avalon_slave_0_waitrequest),            //                         .waitrequest
		.av_begintransfer       (),                                                  //              (terminated)
		.av_beginbursttransfer  (),                                                  //              (terminated)
		.av_burstcount          (),                                                  //              (terminated)
		.av_byteenable          (),                                                  //              (terminated)
		.av_writebyteenable     (),                                                  //              (terminated)
		.av_lock                (),                                                  //              (terminated)
		.av_chipselect          (),                                                  //              (terminated)
		.av_clken               (),                                                  //              (terminated)
		.uav_clken              (1'b0),                                              //              (terminated)
		.av_debugaccess         (),                                                  //              (terminated)
		.av_outputenable        (),                                                  //              (terminated)
		.uav_response           (),                                                  //              (terminated)
		.av_response            (2'b00),                                             //              (terminated)
		.uav_writeresponsevalid (),                                                  //              (terminated)
		.av_writeresponsevalid  (1'b0)                                               //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) audio_out_dma_csr_translator (
		.clk                    (clk_0_clk_clk),                                  //                      clk.clk
		.reset                  (nios2_gen2_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (audio_out_dma_csr_agent_m0_address),             // avalon_universal_slave_0.address
		.uav_burstcount         (audio_out_dma_csr_agent_m0_burstcount),          //                         .burstcount
		.uav_read               (audio_out_dma_csr_agent_m0_read),                //                         .read
		.uav_write              (audio_out_dma_csr_agent_m0_write),               //                         .write
		.uav_waitrequest        (audio_out_dma_csr_agent_m0_waitrequest),         //                         .waitrequest
		.uav_readdatavalid      (audio_out_dma_csr_agent_m0_readdatavalid),       //                         .readdatavalid
		.uav_byteenable         (audio_out_dma_csr_agent_m0_byteenable),          //                         .byteenable
		.uav_readdata           (audio_out_dma_csr_agent_m0_readdata),            //                         .readdata
		.uav_writedata          (audio_out_dma_csr_agent_m0_writedata),           //                         .writedata
		.uav_lock               (audio_out_dma_csr_agent_m0_lock),                //                         .lock
		.uav_debugaccess        (audio_out_dma_csr_agent_m0_debugaccess),         //                         .debugaccess
		.av_address             (audio_out_dma_csr_address),                      //      avalon_anti_slave_0.address
		.av_write               (audio_out_dma_csr_write),                        //                         .write
		.av_read                (audio_out_dma_csr_read),                         //                         .read
		.av_readdata            (audio_out_dma_csr_readdata),                     //                         .readdata
		.av_writedata           (audio_out_dma_csr_writedata),                    //                         .writedata
		.av_byteenable          (audio_out_dma_csr_byteenable),                   //                         .byteenable
		.av_begintransfer       (),                                               //              (terminated)
		.av_beginbursttransfer  (),                                               //              (terminated)
		.av_burstcount          (),                                               //              (terminated)
		.av_readdatavalid       (1'b0),                                           //              (terminated)
		.av_waitrequest         (1'b0),                                           //              (terminated)
		.av_writebyteenable     (),                                               //              (terminated)
		.av_lock                (),                                               //              (terminated)
		.av_chipselect          (),                                               //              (terminated)
		.av_clken               (),                                               //              (terminated)
		.uav_clken              (1'b0),                                           //              (terminated)
		.av_debugaccess         (),                                               //              (terminated)
		.av_outputenable        (),                                               //              (terminated)
		.uav_response           (),                                               //              (terminated)
		.av_response            (2'b00),                                          //              (terminated)
		.uav_writeresponsevalid (),                                               //              (terminated)
		.av_writeresponsevalid  (1'b0)                                            //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) audio_in_dma_csr_translator (
		.clk                    (clk_0_clk_clk),                                  //                      clk.clk
		.reset                  (nios2_gen2_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (audio_in_dma_csr_agent_m0_address),              // avalon_universal_slave_0.address
		.uav_burstcount         (audio_in_dma_csr_agent_m0_burstcount),           //                         .burstcount
		.uav_read               (audio_in_dma_csr_agent_m0_read),                 //                         .read
		.uav_write              (audio_in_dma_csr_agent_m0_write),                //                         .write
		.uav_waitrequest        (audio_in_dma_csr_agent_m0_waitrequest),          //                         .waitrequest
		.uav_readdatavalid      (audio_in_dma_csr_agent_m0_readdatavalid),        //                         .readdatavalid
		.uav_byteenable         (audio_in_dma_csr_agent_m0_byteenable),           //                         .byteenable
		.uav_readdata           (audio_in_dma_csr_agent_m0_readdata),             //                         .readdata
		.uav_writedata          (audio_in_dma_csr_agent_m0_writedata),            //                         .writedata
		.uav_lock               (audio_in_dma_csr_agent_m0_lock),                 //                         .lock
		.uav_debugaccess        (audio_in_dma_csr_agent_m0_debugaccess),          //                         .debugaccess
		.av_address             (audio_in_dma_csr_address),                       //      avalon_anti_slave_0.address
		.av_write               (audio_in_dma_csr_write),                         //                         .write
		.av_read                (audio_in_dma_csr_read),                          //                         .read
		.av_readdata            (audio_in_dma_csr_readdata),                      //                         .readdata
		.av_writedata           (audio_in_dma_csr_writedata),                     //                         .writedata
		.av_byteenable          (audio_in_dma_csr_byteenable),                    //                         .byteenable
		.av_begintransfer       (),                                               //              (terminated)
		.av_beginbursttransfer  (),                                               //              (terminated)
		.av_burstcount          (),                                               //              (terminated)
		.av_readdatavalid       (1'b0),                                           //              (terminated)
		.av_waitrequest         (1'b0),                                           //              (terminated)
		.av_writebyteenable     (),                                               //              (terminated)
		.av_lock                (),                                               //              (terminated)
		.av_chipselect          (),                                               //              (terminated)
		.av_clken               (),                                               //              (terminated)
		.uav_clken              (1'b0),                                           //              (terminated)
		.av_debugaccess         (),                                               //              (terminated)
		.av_outputenable        (),                                               //              (terminated)
		.uav_response           (),                                               //              (terminated)
		.av_response            (2'b00),                                          //              (terminated)
		.uav_writeresponsevalid (),                                               //              (terminated)
		.av_writeresponsevalid  (1'b0)                                            //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) jtagdebug_csr_translator (
		.clk                    (clk_0_clk_clk),                                  //                      clk.clk
		.reset                  (nios2_gen2_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (jtagdebug_csr_agent_m0_address),                 // avalon_universal_slave_0.address
		.uav_burstcount         (jtagdebug_csr_agent_m0_burstcount),              //                         .burstcount
		.uav_read               (jtagdebug_csr_agent_m0_read),                    //                         .read
		.uav_write              (jtagdebug_csr_agent_m0_write),                   //                         .write
		.uav_waitrequest        (jtagdebug_csr_agent_m0_waitrequest),             //                         .waitrequest
		.uav_readdatavalid      (jtagdebug_csr_agent_m0_readdatavalid),           //                         .readdatavalid
		.uav_byteenable         (jtagdebug_csr_agent_m0_byteenable),              //                         .byteenable
		.uav_readdata           (jtagdebug_csr_agent_m0_readdata),                //                         .readdata
		.uav_writedata          (jtagdebug_csr_agent_m0_writedata),               //                         .writedata
		.uav_lock               (jtagdebug_csr_agent_m0_lock),                    //                         .lock
		.uav_debugaccess        (jtagdebug_csr_agent_m0_debugaccess),             //                         .debugaccess
		.av_address             (jtagdebug_csr_address),                          //      avalon_anti_slave_0.address
		.av_write               (jtagdebug_csr_write),                            //                         .write
		.av_read                (jtagdebug_csr_read),                             //                         .read
		.av_readdata            (jtagdebug_csr_readdata),                         //                         .readdata
		.av_writedata           (jtagdebug_csr_writedata),                        //                         .writedata
		.av_byteenable          (jtagdebug_csr_byteenable),                       //                         .byteenable
		.av_begintransfer       (),                                               //              (terminated)
		.av_beginbursttransfer  (),                                               //              (terminated)
		.av_burstcount          (),                                               //              (terminated)
		.av_readdatavalid       (1'b0),                                           //              (terminated)
		.av_waitrequest         (1'b0),                                           //              (terminated)
		.av_writebyteenable     (),                                               //              (terminated)
		.av_lock                (),                                               //              (terminated)
		.av_chipselect          (),                                               //              (terminated)
		.av_clken               (),                                               //              (terminated)
		.uav_clken              (1'b0),                                           //              (terminated)
		.av_debugaccess         (),                                               //              (terminated)
		.av_outputenable        (),                                               //              (terminated)
		.uav_response           (),                                               //              (terminated)
		.av_response            (2'b00),                                          //              (terminated)
		.uav_writeresponsevalid (),                                               //              (terminated)
		.av_writeresponsevalid  (1'b0)                                            //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (9),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) nios2_gen2_0_debug_mem_slave_translator (
		.clk                    (clk_0_clk_clk),                                       //                      clk.clk
		.reset                  (nios2_gen2_0_reset_reset_bridge_in_reset_reset),      //                    reset.reset
		.uav_address            (nios2_gen2_0_debug_mem_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (nios2_gen2_0_debug_mem_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (nios2_gen2_0_debug_mem_slave_agent_m0_read),          //                         .read
		.uav_write              (nios2_gen2_0_debug_mem_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (nios2_gen2_0_debug_mem_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (nios2_gen2_0_debug_mem_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (nios2_gen2_0_debug_mem_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (nios2_gen2_0_debug_mem_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (nios2_gen2_0_debug_mem_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (nios2_gen2_0_debug_mem_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (nios2_gen2_0_debug_mem_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (nios2_gen2_0_debug_mem_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (nios2_gen2_0_debug_mem_slave_write),                  //                         .write
		.av_read                (nios2_gen2_0_debug_mem_slave_read),                   //                         .read
		.av_readdata            (nios2_gen2_0_debug_mem_slave_readdata),               //                         .readdata
		.av_writedata           (nios2_gen2_0_debug_mem_slave_writedata),              //                         .writedata
		.av_byteenable          (nios2_gen2_0_debug_mem_slave_byteenable),             //                         .byteenable
		.av_waitrequest         (nios2_gen2_0_debug_mem_slave_waitrequest),            //                         .waitrequest
		.av_debugaccess         (nios2_gen2_0_debug_mem_slave_debugaccess),            //                         .debugaccess
		.av_begintransfer       (),                                                    //              (terminated)
		.av_beginbursttransfer  (),                                                    //              (terminated)
		.av_burstcount          (),                                                    //              (terminated)
		.av_readdatavalid       (1'b0),                                                //              (terminated)
		.av_writebyteenable     (),                                                    //              (terminated)
		.av_lock                (),                                                    //              (terminated)
		.av_chipselect          (),                                                    //              (terminated)
		.av_clken               (),                                                    //              (terminated)
		.uav_clken              (1'b0),                                                //              (terminated)
		.av_outputenable        (),                                                    //              (terminated)
		.uav_response           (),                                                    //              (terminated)
		.av_response            (2'b00),                                               //              (terminated)
		.uav_writeresponsevalid (),                                                    //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                 //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (128),
		.UAV_DATA_W                     (128),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (16),
		.UAV_BYTEENABLE_W               (16),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (5),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (16),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) audio_out_dma_descriptor_slave_translator (
		.clk                    (clk_0_clk_clk),                                                                                                                         //                      clk.clk
		.reset                  (nios2_gen2_0_reset_reset_bridge_in_reset_reset),                                                                                        //                    reset.reset
		.uav_address            (audio_out_dma_descriptor_slave_agent_m0_address),                                                                                       // avalon_universal_slave_0.address
		.uav_burstcount         (audio_out_dma_descriptor_slave_agent_m0_burstcount),                                                                                    //                         .burstcount
		.uav_read               (audio_out_dma_descriptor_slave_agent_m0_read),                                                                                          //                         .read
		.uav_write              (audio_out_dma_descriptor_slave_agent_m0_write),                                                                                         //                         .write
		.uav_waitrequest        (audio_out_dma_descriptor_slave_agent_m0_waitrequest),                                                                                   //                         .waitrequest
		.uav_readdatavalid      (audio_out_dma_descriptor_slave_agent_m0_readdatavalid),                                                                                 //                         .readdatavalid
		.uav_byteenable         (audio_out_dma_descriptor_slave_agent_m0_byteenable),                                                                                    //                         .byteenable
		.uav_readdata           (audio_out_dma_descriptor_slave_agent_m0_readdata),                                                                                      //                         .readdata
		.uav_writedata          (audio_out_dma_descriptor_slave_agent_m0_writedata),                                                                                     //                         .writedata
		.uav_lock               (audio_out_dma_descriptor_slave_agent_m0_lock),                                                                                          //                         .lock
		.uav_debugaccess        (audio_out_dma_descriptor_slave_agent_m0_debugaccess),                                                                                   //                         .debugaccess
		.av_write               (audio_out_dma_descriptor_slave_write),                                                                                                  //      avalon_anti_slave_0.write
		.av_writedata           (audio_out_dma_descriptor_slave_writedata),                                                                                              //                         .writedata
		.av_byteenable          (audio_out_dma_descriptor_slave_byteenable),                                                                                             //                         .byteenable
		.av_waitrequest         (audio_out_dma_descriptor_slave_waitrequest),                                                                                            //                         .waitrequest
		.av_address             (),                                                                                                                                      //              (terminated)
		.av_read                (),                                                                                                                                      //              (terminated)
		.av_readdata            (128'b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011011110101011011101111010101101), //              (terminated)
		.av_begintransfer       (),                                                                                                                                      //              (terminated)
		.av_beginbursttransfer  (),                                                                                                                                      //              (terminated)
		.av_burstcount          (),                                                                                                                                      //              (terminated)
		.av_readdatavalid       (1'b0),                                                                                                                                  //              (terminated)
		.av_writebyteenable     (),                                                                                                                                      //              (terminated)
		.av_lock                (),                                                                                                                                      //              (terminated)
		.av_chipselect          (),                                                                                                                                      //              (terminated)
		.av_clken               (),                                                                                                                                      //              (terminated)
		.uav_clken              (1'b0),                                                                                                                                  //              (terminated)
		.av_debugaccess         (),                                                                                                                                      //              (terminated)
		.av_outputenable        (),                                                                                                                                      //              (terminated)
		.uav_response           (),                                                                                                                                      //              (terminated)
		.av_response            (2'b00),                                                                                                                                 //              (terminated)
		.uav_writeresponsevalid (),                                                                                                                                      //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                                                                                                   //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (128),
		.UAV_DATA_W                     (128),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (16),
		.UAV_BYTEENABLE_W               (16),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (5),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (16),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) audio_in_dma_descriptor_slave_translator (
		.clk                    (clk_0_clk_clk),                                                                                                                         //                      clk.clk
		.reset                  (nios2_gen2_0_reset_reset_bridge_in_reset_reset),                                                                                        //                    reset.reset
		.uav_address            (audio_in_dma_descriptor_slave_agent_m0_address),                                                                                        // avalon_universal_slave_0.address
		.uav_burstcount         (audio_in_dma_descriptor_slave_agent_m0_burstcount),                                                                                     //                         .burstcount
		.uav_read               (audio_in_dma_descriptor_slave_agent_m0_read),                                                                                           //                         .read
		.uav_write              (audio_in_dma_descriptor_slave_agent_m0_write),                                                                                          //                         .write
		.uav_waitrequest        (audio_in_dma_descriptor_slave_agent_m0_waitrequest),                                                                                    //                         .waitrequest
		.uav_readdatavalid      (audio_in_dma_descriptor_slave_agent_m0_readdatavalid),                                                                                  //                         .readdatavalid
		.uav_byteenable         (audio_in_dma_descriptor_slave_agent_m0_byteenable),                                                                                     //                         .byteenable
		.uav_readdata           (audio_in_dma_descriptor_slave_agent_m0_readdata),                                                                                       //                         .readdata
		.uav_writedata          (audio_in_dma_descriptor_slave_agent_m0_writedata),                                                                                      //                         .writedata
		.uav_lock               (audio_in_dma_descriptor_slave_agent_m0_lock),                                                                                           //                         .lock
		.uav_debugaccess        (audio_in_dma_descriptor_slave_agent_m0_debugaccess),                                                                                    //                         .debugaccess
		.av_write               (audio_in_dma_descriptor_slave_write),                                                                                                   //      avalon_anti_slave_0.write
		.av_writedata           (audio_in_dma_descriptor_slave_writedata),                                                                                               //                         .writedata
		.av_byteenable          (audio_in_dma_descriptor_slave_byteenable),                                                                                              //                         .byteenable
		.av_waitrequest         (audio_in_dma_descriptor_slave_waitrequest),                                                                                             //                         .waitrequest
		.av_address             (),                                                                                                                                      //              (terminated)
		.av_read                (),                                                                                                                                      //              (terminated)
		.av_readdata            (128'b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011011110101011011101111010101101), //              (terminated)
		.av_begintransfer       (),                                                                                                                                      //              (terminated)
		.av_beginbursttransfer  (),                                                                                                                                      //              (terminated)
		.av_burstcount          (),                                                                                                                                      //              (terminated)
		.av_readdatavalid       (1'b0),                                                                                                                                  //              (terminated)
		.av_writebyteenable     (),                                                                                                                                      //              (terminated)
		.av_lock                (),                                                                                                                                      //              (terminated)
		.av_chipselect          (),                                                                                                                                      //              (terminated)
		.av_clken               (),                                                                                                                                      //              (terminated)
		.uav_clken              (1'b0),                                                                                                                                  //              (terminated)
		.av_debugaccess         (),                                                                                                                                      //              (terminated)
		.av_outputenable        (),                                                                                                                                      //              (terminated)
		.uav_response           (),                                                                                                                                      //              (terminated)
		.av_response            (2'b00),                                                                                                                                 //              (terminated)
		.uav_writeresponsevalid (),                                                                                                                                      //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                                                                                                   //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (128),
		.UAV_DATA_W                     (128),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (16),
		.UAV_BYTEENABLE_W               (16),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (5),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (16),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) jtagdebug_descriptor_slave_translator (
		.clk                    (clk_0_clk_clk),                                                                                                                         //                      clk.clk
		.reset                  (nios2_gen2_0_reset_reset_bridge_in_reset_reset),                                                                                        //                    reset.reset
		.uav_address            (jtagdebug_descriptor_slave_agent_m0_address),                                                                                           // avalon_universal_slave_0.address
		.uav_burstcount         (jtagdebug_descriptor_slave_agent_m0_burstcount),                                                                                        //                         .burstcount
		.uav_read               (jtagdebug_descriptor_slave_agent_m0_read),                                                                                              //                         .read
		.uav_write              (jtagdebug_descriptor_slave_agent_m0_write),                                                                                             //                         .write
		.uav_waitrequest        (jtagdebug_descriptor_slave_agent_m0_waitrequest),                                                                                       //                         .waitrequest
		.uav_readdatavalid      (jtagdebug_descriptor_slave_agent_m0_readdatavalid),                                                                                     //                         .readdatavalid
		.uav_byteenable         (jtagdebug_descriptor_slave_agent_m0_byteenable),                                                                                        //                         .byteenable
		.uav_readdata           (jtagdebug_descriptor_slave_agent_m0_readdata),                                                                                          //                         .readdata
		.uav_writedata          (jtagdebug_descriptor_slave_agent_m0_writedata),                                                                                         //                         .writedata
		.uav_lock               (jtagdebug_descriptor_slave_agent_m0_lock),                                                                                              //                         .lock
		.uav_debugaccess        (jtagdebug_descriptor_slave_agent_m0_debugaccess),                                                                                       //                         .debugaccess
		.av_write               (jtagdebug_descriptor_slave_write),                                                                                                      //      avalon_anti_slave_0.write
		.av_writedata           (jtagdebug_descriptor_slave_writedata),                                                                                                  //                         .writedata
		.av_byteenable          (jtagdebug_descriptor_slave_byteenable),                                                                                                 //                         .byteenable
		.av_waitrequest         (jtagdebug_descriptor_slave_waitrequest),                                                                                                //                         .waitrequest
		.av_address             (),                                                                                                                                      //              (terminated)
		.av_read                (),                                                                                                                                      //              (terminated)
		.av_readdata            (128'b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000011011110101011011101111010101101), //              (terminated)
		.av_begintransfer       (),                                                                                                                                      //              (terminated)
		.av_beginbursttransfer  (),                                                                                                                                      //              (terminated)
		.av_burstcount          (),                                                                                                                                      //              (terminated)
		.av_readdatavalid       (1'b0),                                                                                                                                  //              (terminated)
		.av_writebyteenable     (),                                                                                                                                      //              (terminated)
		.av_lock                (),                                                                                                                                      //              (terminated)
		.av_chipselect          (),                                                                                                                                      //              (terminated)
		.av_clken               (),                                                                                                                                      //              (terminated)
		.uav_clken              (1'b0),                                                                                                                                  //              (terminated)
		.av_debugaccess         (),                                                                                                                                      //              (terminated)
		.av_outputenable        (),                                                                                                                                      //              (terminated)
		.uav_response           (),                                                                                                                                      //              (terminated)
		.av_response            (2'b00),                                                                                                                                 //              (terminated)
		.uav_writeresponsevalid (),                                                                                                                                      //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                                                                                                   //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (9),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) onchip_memory2_0_s1_translator (
		.clk                    (clk_0_clk_clk),                                  //                      clk.clk
		.reset                  (nios2_gen2_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (onchip_memory2_0_s1_agent_m0_address),           // avalon_universal_slave_0.address
		.uav_burstcount         (onchip_memory2_0_s1_agent_m0_burstcount),        //                         .burstcount
		.uav_read               (onchip_memory2_0_s1_agent_m0_read),              //                         .read
		.uav_write              (onchip_memory2_0_s1_agent_m0_write),             //                         .write
		.uav_waitrequest        (onchip_memory2_0_s1_agent_m0_waitrequest),       //                         .waitrequest
		.uav_readdatavalid      (onchip_memory2_0_s1_agent_m0_readdatavalid),     //                         .readdatavalid
		.uav_byteenable         (onchip_memory2_0_s1_agent_m0_byteenable),        //                         .byteenable
		.uav_readdata           (onchip_memory2_0_s1_agent_m0_readdata),          //                         .readdata
		.uav_writedata          (onchip_memory2_0_s1_agent_m0_writedata),         //                         .writedata
		.uav_lock               (onchip_memory2_0_s1_agent_m0_lock),              //                         .lock
		.uav_debugaccess        (onchip_memory2_0_s1_agent_m0_debugaccess),       //                         .debugaccess
		.av_address             (onchip_memory2_0_s1_address),                    //      avalon_anti_slave_0.address
		.av_write               (onchip_memory2_0_s1_write),                      //                         .write
		.av_readdata            (onchip_memory2_0_s1_readdata),                   //                         .readdata
		.av_writedata           (onchip_memory2_0_s1_writedata),                  //                         .writedata
		.av_byteenable          (onchip_memory2_0_s1_byteenable),                 //                         .byteenable
		.av_chipselect          (onchip_memory2_0_s1_chipselect),                 //                         .chipselect
		.av_clken               (onchip_memory2_0_s1_clken),                      //                         .clken
		.av_read                (),                                               //              (terminated)
		.av_begintransfer       (),                                               //              (terminated)
		.av_beginbursttransfer  (),                                               //              (terminated)
		.av_burstcount          (),                                               //              (terminated)
		.av_readdatavalid       (1'b0),                                           //              (terminated)
		.av_waitrequest         (1'b0),                                           //              (terminated)
		.av_writebyteenable     (),                                               //              (terminated)
		.av_lock                (),                                               //              (terminated)
		.uav_clken              (1'b0),                                           //              (terminated)
		.av_debugaccess         (),                                               //              (terminated)
		.av_outputenable        (),                                               //              (terminated)
		.uav_response           (),                                               //              (terminated)
		.av_response            (2'b00),                                          //              (terminated)
		.uav_writeresponsevalid (),                                               //              (terminated)
		.av_writeresponsevalid  (1'b0)                                            //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) pio_0_s1_translator (
		.clk                    (clk_0_clk_clk),                                  //                      clk.clk
		.reset                  (nios2_gen2_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (pio_0_s1_agent_m0_address),                      // avalon_universal_slave_0.address
		.uav_burstcount         (pio_0_s1_agent_m0_burstcount),                   //                         .burstcount
		.uav_read               (pio_0_s1_agent_m0_read),                         //                         .read
		.uav_write              (pio_0_s1_agent_m0_write),                        //                         .write
		.uav_waitrequest        (pio_0_s1_agent_m0_waitrequest),                  //                         .waitrequest
		.uav_readdatavalid      (pio_0_s1_agent_m0_readdatavalid),                //                         .readdatavalid
		.uav_byteenable         (pio_0_s1_agent_m0_byteenable),                   //                         .byteenable
		.uav_readdata           (pio_0_s1_agent_m0_readdata),                     //                         .readdata
		.uav_writedata          (pio_0_s1_agent_m0_writedata),                    //                         .writedata
		.uav_lock               (pio_0_s1_agent_m0_lock),                         //                         .lock
		.uav_debugaccess        (pio_0_s1_agent_m0_debugaccess),                  //                         .debugaccess
		.av_address             (pio_0_s1_address),                               //      avalon_anti_slave_0.address
		.av_write               (pio_0_s1_write),                                 //                         .write
		.av_readdata            (pio_0_s1_readdata),                              //                         .readdata
		.av_writedata           (pio_0_s1_writedata),                             //                         .writedata
		.av_chipselect          (pio_0_s1_chipselect),                            //                         .chipselect
		.av_read                (),                                               //              (terminated)
		.av_begintransfer       (),                                               //              (terminated)
		.av_beginbursttransfer  (),                                               //              (terminated)
		.av_burstcount          (),                                               //              (terminated)
		.av_byteenable          (),                                               //              (terminated)
		.av_readdatavalid       (1'b0),                                           //              (terminated)
		.av_waitrequest         (1'b0),                                           //              (terminated)
		.av_writebyteenable     (),                                               //              (terminated)
		.av_lock                (),                                               //              (terminated)
		.av_clken               (),                                               //              (terminated)
		.uav_clken              (1'b0),                                           //              (terminated)
		.av_debugaccess         (),                                               //              (terminated)
		.av_outputenable        (),                                               //              (terminated)
		.uav_response           (),                                               //              (terminated)
		.av_response            (2'b00),                                          //              (terminated)
		.uav_writeresponsevalid (),                                               //              (terminated)
		.av_writeresponsevalid  (1'b0)                                            //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) pio_1_s1_translator (
		.clk                    (clk_0_clk_clk),                                  //                      clk.clk
		.reset                  (nios2_gen2_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (pio_1_s1_agent_m0_address),                      // avalon_universal_slave_0.address
		.uav_burstcount         (pio_1_s1_agent_m0_burstcount),                   //                         .burstcount
		.uav_read               (pio_1_s1_agent_m0_read),                         //                         .read
		.uav_write              (pio_1_s1_agent_m0_write),                        //                         .write
		.uav_waitrequest        (pio_1_s1_agent_m0_waitrequest),                  //                         .waitrequest
		.uav_readdatavalid      (pio_1_s1_agent_m0_readdatavalid),                //                         .readdatavalid
		.uav_byteenable         (pio_1_s1_agent_m0_byteenable),                   //                         .byteenable
		.uav_readdata           (pio_1_s1_agent_m0_readdata),                     //                         .readdata
		.uav_writedata          (pio_1_s1_agent_m0_writedata),                    //                         .writedata
		.uav_lock               (pio_1_s1_agent_m0_lock),                         //                         .lock
		.uav_debugaccess        (pio_1_s1_agent_m0_debugaccess),                  //                         .debugaccess
		.av_address             (pio_1_s1_address),                               //      avalon_anti_slave_0.address
		.av_write               (pio_1_s1_write),                                 //                         .write
		.av_readdata            (pio_1_s1_readdata),                              //                         .readdata
		.av_writedata           (pio_1_s1_writedata),                             //                         .writedata
		.av_chipselect          (pio_1_s1_chipselect),                            //                         .chipselect
		.av_read                (),                                               //              (terminated)
		.av_begintransfer       (),                                               //              (terminated)
		.av_beginbursttransfer  (),                                               //              (terminated)
		.av_burstcount          (),                                               //              (terminated)
		.av_byteenable          (),                                               //              (terminated)
		.av_readdatavalid       (1'b0),                                           //              (terminated)
		.av_waitrequest         (1'b0),                                           //              (terminated)
		.av_writebyteenable     (),                                               //              (terminated)
		.av_lock                (),                                               //              (terminated)
		.av_clken               (),                                               //              (terminated)
		.uav_clken              (1'b0),                                           //              (terminated)
		.av_debugaccess         (),                                               //              (terminated)
		.av_outputenable        (),                                               //              (terminated)
		.uav_response           (),                                               //              (terminated)
		.av_response            (2'b00),                                          //              (terminated)
		.uav_writeresponsevalid (),                                               //              (terminated)
		.av_writeresponsevalid  (1'b0)                                            //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (1),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) spi_0_spi_control_port_translator (
		.clk                    (clk_0_clk_clk),                                  //                      clk.clk
		.reset                  (nios2_gen2_0_reset_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (spi_0_spi_control_port_agent_m0_address),        // avalon_universal_slave_0.address
		.uav_burstcount         (spi_0_spi_control_port_agent_m0_burstcount),     //                         .burstcount
		.uav_read               (spi_0_spi_control_port_agent_m0_read),           //                         .read
		.uav_write              (spi_0_spi_control_port_agent_m0_write),          //                         .write
		.uav_waitrequest        (spi_0_spi_control_port_agent_m0_waitrequest),    //                         .waitrequest
		.uav_readdatavalid      (spi_0_spi_control_port_agent_m0_readdatavalid),  //                         .readdatavalid
		.uav_byteenable         (spi_0_spi_control_port_agent_m0_byteenable),     //                         .byteenable
		.uav_readdata           (spi_0_spi_control_port_agent_m0_readdata),       //                         .readdata
		.uav_writedata          (spi_0_spi_control_port_agent_m0_writedata),      //                         .writedata
		.uav_lock               (spi_0_spi_control_port_agent_m0_lock),           //                         .lock
		.uav_debugaccess        (spi_0_spi_control_port_agent_m0_debugaccess),    //                         .debugaccess
		.av_address             (spi_0_spi_control_port_address),                 //      avalon_anti_slave_0.address
		.av_write               (spi_0_spi_control_port_write),                   //                         .write
		.av_read                (spi_0_spi_control_port_read),                    //                         .read
		.av_readdata            (spi_0_spi_control_port_readdata),                //                         .readdata
		.av_writedata           (spi_0_spi_control_port_writedata),               //                         .writedata
		.av_chipselect          (spi_0_spi_control_port_chipselect),              //                         .chipselect
		.av_begintransfer       (),                                               //              (terminated)
		.av_beginbursttransfer  (),                                               //              (terminated)
		.av_burstcount          (),                                               //              (terminated)
		.av_byteenable          (),                                               //              (terminated)
		.av_readdatavalid       (1'b0),                                           //              (terminated)
		.av_waitrequest         (1'b0),                                           //              (terminated)
		.av_writebyteenable     (),                                               //              (terminated)
		.av_lock                (),                                               //              (terminated)
		.av_clken               (),                                               //              (terminated)
		.uav_clken              (1'b0),                                           //              (terminated)
		.av_debugaccess         (),                                               //              (terminated)
		.av_outputenable        (),                                               //              (terminated)
		.uav_response           (),                                               //              (terminated)
		.av_response            (2'b00),                                          //              (terminated)
		.uav_writeresponsevalid (),                                               //              (terminated)
		.av_writeresponsevalid  (1'b0)                                            //              (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (111),
		.PKT_ORI_BURST_SIZE_L      (109),
		.PKT_RESPONSE_STATUS_H     (108),
		.PKT_RESPONSE_STATUS_L     (107),
		.PKT_QOS_H                 (90),
		.PKT_QOS_L                 (90),
		.PKT_DATA_SIDEBAND_H       (88),
		.PKT_DATA_SIDEBAND_L       (88),
		.PKT_ADDR_SIDEBAND_H       (87),
		.PKT_ADDR_SIDEBAND_L       (87),
		.PKT_BURST_TYPE_H          (86),
		.PKT_BURST_TYPE_L          (85),
		.PKT_CACHE_H               (106),
		.PKT_CACHE_L               (103),
		.PKT_THREAD_ID_H           (99),
		.PKT_THREAD_ID_L           (99),
		.PKT_BURST_SIZE_H          (84),
		.PKT_BURST_SIZE_L          (82),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (89),
		.PKT_PROTECTION_H          (102),
		.PKT_PROTECTION_L          (100),
		.PKT_BURSTWRAP_H           (81),
		.PKT_BURSTWRAP_L           (79),
		.PKT_BYTE_CNT_H            (78),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (94),
		.PKT_SRC_ID_L              (91),
		.PKT_DEST_ID_H             (98),
		.PKT_DEST_ID_L             (95),
		.ST_DATA_W                 (112),
		.ST_CHANNEL_W              (16),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (1),
		.ID                        (3),
		.BURSTWRAP_VALUE           (7),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) nios2_gen2_0_data_master_agent (
		.clk                   (clk_0_clk_clk),                                                               //       clk.clk
		.reset                 (nios2_gen2_0_reset_reset_bridge_in_reset_reset),                              // clk_reset.reset
		.av_address            (nios2_gen2_0_data_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (nios2_gen2_0_data_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (nios2_gen2_0_data_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (nios2_gen2_0_data_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (nios2_gen2_0_data_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (nios2_gen2_0_data_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (nios2_gen2_0_data_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (nios2_gen2_0_data_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (nios2_gen2_0_data_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (nios2_gen2_0_data_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (nios2_gen2_0_data_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (nios2_gen2_0_data_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (nios2_gen2_0_data_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (nios2_gen2_0_data_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (nios2_gen2_0_data_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (nios2_gen2_0_data_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_src_valid),                                                           //        rp.valid
		.rp_data               (rsp_mux_src_data),                                                            //          .data
		.rp_channel            (rsp_mux_src_channel),                                                         //          .channel
		.rp_startofpacket      (rsp_mux_src_startofpacket),                                                   //          .startofpacket
		.rp_endofpacket        (rsp_mux_src_endofpacket),                                                     //          .endofpacket
		.rp_ready              (rsp_mux_src_ready),                                                           //          .ready
		.av_response           (),                                                                            // (terminated)
		.av_writeresponsevalid ()                                                                             // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (111),
		.PKT_ORI_BURST_SIZE_L      (109),
		.PKT_RESPONSE_STATUS_H     (108),
		.PKT_RESPONSE_STATUS_L     (107),
		.PKT_QOS_H                 (90),
		.PKT_QOS_L                 (90),
		.PKT_DATA_SIDEBAND_H       (88),
		.PKT_DATA_SIDEBAND_L       (88),
		.PKT_ADDR_SIDEBAND_H       (87),
		.PKT_ADDR_SIDEBAND_L       (87),
		.PKT_BURST_TYPE_H          (86),
		.PKT_BURST_TYPE_L          (85),
		.PKT_CACHE_H               (106),
		.PKT_CACHE_L               (103),
		.PKT_THREAD_ID_H           (99),
		.PKT_THREAD_ID_L           (99),
		.PKT_BURST_SIZE_H          (84),
		.PKT_BURST_SIZE_L          (82),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (89),
		.PKT_PROTECTION_H          (102),
		.PKT_PROTECTION_L          (100),
		.PKT_BURSTWRAP_H           (81),
		.PKT_BURSTWRAP_L           (79),
		.PKT_BYTE_CNT_H            (78),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (94),
		.PKT_SRC_ID_L              (91),
		.PKT_DEST_ID_H             (98),
		.PKT_DEST_ID_L             (95),
		.ST_DATA_W                 (112),
		.ST_CHANNEL_W              (16),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (1),
		.ID                        (4),
		.BURSTWRAP_VALUE           (3),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) nios2_gen2_0_instruction_master_agent (
		.clk                   (clk_0_clk_clk),                                                                      //       clk.clk
		.reset                 (nios2_gen2_0_reset_reset_bridge_in_reset_reset),                                     // clk_reset.reset
		.av_address            (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (nios2_gen2_0_instruction_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (nios2_gen2_0_instruction_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (nios2_gen2_0_instruction_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (nios2_gen2_0_instruction_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (nios2_gen2_0_instruction_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (nios2_gen2_0_instruction_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_001_src_valid),                                                              //        rp.valid
		.rp_data               (rsp_mux_001_src_data),                                                               //          .data
		.rp_channel            (rsp_mux_001_src_channel),                                                            //          .channel
		.rp_startofpacket      (rsp_mux_001_src_startofpacket),                                                      //          .startofpacket
		.rp_endofpacket        (rsp_mux_001_src_endofpacket),                                                        //          .endofpacket
		.rp_ready              (rsp_mux_001_src_ready),                                                              //          .ready
		.av_response           (),                                                                                   // (terminated)
		.av_writeresponsevalid ()                                                                                    // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (111),
		.PKT_ORI_BURST_SIZE_L      (109),
		.PKT_RESPONSE_STATUS_H     (108),
		.PKT_RESPONSE_STATUS_L     (107),
		.PKT_QOS_H                 (90),
		.PKT_QOS_L                 (90),
		.PKT_DATA_SIDEBAND_H       (88),
		.PKT_DATA_SIDEBAND_L       (88),
		.PKT_ADDR_SIDEBAND_H       (87),
		.PKT_ADDR_SIDEBAND_L       (87),
		.PKT_BURST_TYPE_H          (86),
		.PKT_BURST_TYPE_L          (85),
		.PKT_CACHE_H               (106),
		.PKT_CACHE_L               (103),
		.PKT_THREAD_ID_H           (99),
		.PKT_THREAD_ID_L           (99),
		.PKT_BURST_SIZE_H          (84),
		.PKT_BURST_SIZE_L          (82),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (89),
		.PKT_PROTECTION_H          (102),
		.PKT_PROTECTION_L          (100),
		.PKT_BURSTWRAP_H           (81),
		.PKT_BURSTWRAP_L           (79),
		.PKT_BYTE_CNT_H            (78),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (94),
		.PKT_SRC_ID_L              (91),
		.PKT_DEST_ID_H             (98),
		.PKT_DEST_ID_L             (95),
		.ST_DATA_W                 (112),
		.ST_CHANNEL_W              (16),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (1),
		.ID                        (1),
		.BURSTWRAP_VALUE           (7),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) audio_out_dma_mm_read_agent (
		.clk                   (clk_0_clk_clk),                                                            //       clk.clk
		.reset                 (nios2_gen2_0_reset_reset_bridge_in_reset_reset),                           // clk_reset.reset
		.av_address            (audio_out_dma_mm_read_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (audio_out_dma_mm_read_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (audio_out_dma_mm_read_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (audio_out_dma_mm_read_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (audio_out_dma_mm_read_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (audio_out_dma_mm_read_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (audio_out_dma_mm_read_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (audio_out_dma_mm_read_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (audio_out_dma_mm_read_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (audio_out_dma_mm_read_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (audio_out_dma_mm_read_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (audio_out_dma_mm_read_agent_cp_valid),                                     //        cp.valid
		.cp_data               (audio_out_dma_mm_read_agent_cp_data),                                      //          .data
		.cp_startofpacket      (audio_out_dma_mm_read_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (audio_out_dma_mm_read_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (audio_out_dma_mm_read_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_002_src_valid),                                                    //        rp.valid
		.rp_data               (rsp_mux_002_src_data),                                                     //          .data
		.rp_channel            (rsp_mux_002_src_channel),                                                  //          .channel
		.rp_startofpacket      (rsp_mux_002_src_startofpacket),                                            //          .startofpacket
		.rp_endofpacket        (rsp_mux_002_src_endofpacket),                                              //          .endofpacket
		.rp_ready              (rsp_mux_002_src_ready),                                                    //          .ready
		.av_response           (),                                                                         // (terminated)
		.av_writeresponsevalid ()                                                                          // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (111),
		.PKT_ORI_BURST_SIZE_L      (109),
		.PKT_RESPONSE_STATUS_H     (108),
		.PKT_RESPONSE_STATUS_L     (107),
		.PKT_QOS_H                 (90),
		.PKT_QOS_L                 (90),
		.PKT_DATA_SIDEBAND_H       (88),
		.PKT_DATA_SIDEBAND_L       (88),
		.PKT_ADDR_SIDEBAND_H       (87),
		.PKT_ADDR_SIDEBAND_L       (87),
		.PKT_BURST_TYPE_H          (86),
		.PKT_BURST_TYPE_L          (85),
		.PKT_CACHE_H               (106),
		.PKT_CACHE_L               (103),
		.PKT_THREAD_ID_H           (99),
		.PKT_THREAD_ID_L           (99),
		.PKT_BURST_SIZE_H          (84),
		.PKT_BURST_SIZE_L          (82),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (89),
		.PKT_PROTECTION_H          (102),
		.PKT_PROTECTION_L          (100),
		.PKT_BURSTWRAP_H           (81),
		.PKT_BURSTWRAP_L           (79),
		.PKT_BYTE_CNT_H            (78),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (94),
		.PKT_SRC_ID_L              (91),
		.PKT_DEST_ID_H             (98),
		.PKT_DEST_ID_L             (95),
		.ST_DATA_W                 (112),
		.ST_CHANNEL_W              (16),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (1),
		.ID                        (0),
		.BURSTWRAP_VALUE           (7),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) audio_in_dma_mm_write_agent (
		.clk                   (clk_0_clk_clk),                                                            //       clk.clk
		.reset                 (nios2_gen2_0_reset_reset_bridge_in_reset_reset),                           // clk_reset.reset
		.av_address            (audio_in_dma_mm_write_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (audio_in_dma_mm_write_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (audio_in_dma_mm_write_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (audio_in_dma_mm_write_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (audio_in_dma_mm_write_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (audio_in_dma_mm_write_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (audio_in_dma_mm_write_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (audio_in_dma_mm_write_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (audio_in_dma_mm_write_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (audio_in_dma_mm_write_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (audio_in_dma_mm_write_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (audio_in_dma_mm_write_agent_cp_valid),                                     //        cp.valid
		.cp_data               (audio_in_dma_mm_write_agent_cp_data),                                      //          .data
		.cp_startofpacket      (audio_in_dma_mm_write_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (audio_in_dma_mm_write_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (audio_in_dma_mm_write_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_003_src_valid),                                                    //        rp.valid
		.rp_data               (rsp_mux_003_src_data),                                                     //          .data
		.rp_channel            (rsp_mux_003_src_channel),                                                  //          .channel
		.rp_startofpacket      (rsp_mux_003_src_startofpacket),                                            //          .startofpacket
		.rp_endofpacket        (rsp_mux_003_src_endofpacket),                                              //          .endofpacket
		.rp_ready              (rsp_mux_003_src_ready),                                                    //          .ready
		.av_response           (),                                                                         // (terminated)
		.av_writeresponsevalid ()                                                                          // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (84),
		.PKT_ORI_BURST_SIZE_L      (82),
		.PKT_RESPONSE_STATUS_H     (81),
		.PKT_RESPONSE_STATUS_L     (80),
		.PKT_QOS_H                 (63),
		.PKT_QOS_L                 (63),
		.PKT_DATA_SIDEBAND_H       (61),
		.PKT_DATA_SIDEBAND_L       (61),
		.PKT_ADDR_SIDEBAND_H       (60),
		.PKT_ADDR_SIDEBAND_L       (60),
		.PKT_BURST_TYPE_H          (59),
		.PKT_BURST_TYPE_L          (58),
		.PKT_CACHE_H               (79),
		.PKT_CACHE_L               (76),
		.PKT_THREAD_ID_H           (72),
		.PKT_THREAD_ID_L           (72),
		.PKT_BURST_SIZE_H          (57),
		.PKT_BURST_SIZE_L          (55),
		.PKT_TRANS_EXCLUSIVE       (46),
		.PKT_TRANS_LOCK            (45),
		.PKT_BEGIN_BURST           (62),
		.PKT_PROTECTION_H          (75),
		.PKT_PROTECTION_L          (73),
		.PKT_BURSTWRAP_H           (54),
		.PKT_BURSTWRAP_L           (52),
		.PKT_BYTE_CNT_H            (51),
		.PKT_BYTE_CNT_L            (47),
		.PKT_ADDR_H                (40),
		.PKT_ADDR_L                (9),
		.PKT_TRANS_COMPRESSED_READ (41),
		.PKT_TRANS_POSTED          (42),
		.PKT_TRANS_WRITE           (43),
		.PKT_TRANS_READ            (44),
		.PKT_DATA_H                (7),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (8),
		.PKT_BYTEEN_L              (8),
		.PKT_SRC_ID_H              (67),
		.PKT_SRC_ID_L              (64),
		.PKT_DEST_ID_H             (71),
		.PKT_DEST_ID_L             (68),
		.ST_DATA_W                 (85),
		.ST_CHANNEL_W              (16),
		.AV_BURSTCOUNT_W           (1),
		.SUPPRESS_0_BYTEEN_RSP     (1),
		.ID                        (2),
		.BURSTWRAP_VALUE           (7),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) jtagdebug_mm_write_agent (
		.clk                   (clk_0_clk_clk),                                                         //       clk.clk
		.reset                 (nios2_gen2_0_reset_reset_bridge_in_reset_reset),                        // clk_reset.reset
		.av_address            (jtagdebug_mm_write_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (jtagdebug_mm_write_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (jtagdebug_mm_write_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (jtagdebug_mm_write_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (jtagdebug_mm_write_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (jtagdebug_mm_write_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (jtagdebug_mm_write_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (jtagdebug_mm_write_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (jtagdebug_mm_write_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (jtagdebug_mm_write_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (jtagdebug_mm_write_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (jtagdebug_mm_write_agent_cp_valid),                                     //        cp.valid
		.cp_data               (jtagdebug_mm_write_agent_cp_data),                                      //          .data
		.cp_startofpacket      (jtagdebug_mm_write_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (jtagdebug_mm_write_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (jtagdebug_mm_write_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_004_src_valid),                                                 //        rp.valid
		.rp_data               (rsp_mux_004_src_data),                                                  //          .data
		.rp_channel            (rsp_mux_004_src_channel),                                               //          .channel
		.rp_startofpacket      (rsp_mux_004_src_startofpacket),                                         //          .startofpacket
		.rp_endofpacket        (rsp_mux_004_src_endofpacket),                                           //          .endofpacket
		.rp_ready              (rsp_mux_004_src_ready),                                                 //          .ready
		.av_response           (),                                                                      // (terminated)
		.av_writeresponsevalid ()                                                                       // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (84),
		.PKT_ORI_BURST_SIZE_L      (82),
		.PKT_RESPONSE_STATUS_H     (81),
		.PKT_RESPONSE_STATUS_L     (80),
		.PKT_BURST_SIZE_H          (57),
		.PKT_BURST_SIZE_L          (55),
		.PKT_TRANS_LOCK            (45),
		.PKT_BEGIN_BURST           (62),
		.PKT_PROTECTION_H          (75),
		.PKT_PROTECTION_L          (73),
		.PKT_BURSTWRAP_H           (54),
		.PKT_BURSTWRAP_L           (52),
		.PKT_BYTE_CNT_H            (51),
		.PKT_BYTE_CNT_L            (47),
		.PKT_ADDR_H                (40),
		.PKT_ADDR_L                (9),
		.PKT_TRANS_COMPRESSED_READ (41),
		.PKT_TRANS_POSTED          (42),
		.PKT_TRANS_WRITE           (43),
		.PKT_TRANS_READ            (44),
		.PKT_DATA_H                (7),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (8),
		.PKT_BYTEEN_L              (8),
		.PKT_SRC_ID_H              (67),
		.PKT_SRC_ID_L              (64),
		.PKT_DEST_ID_H             (71),
		.PKT_DEST_ID_L             (68),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (16),
		.ST_DATA_W                 (85),
		.AVS_BURSTCOUNT_W          (1),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) io_bridge_1_avalon_slave_0_agent (
		.clk                     (clk_0_clk_clk),                                                  //             clk.clk
		.reset                   (nios2_gen2_0_reset_reset_bridge_in_reset_reset),                 //       clk_reset.reset
		.m0_address              (io_bridge_1_avalon_slave_0_agent_m0_address),                    //              m0.address
		.m0_burstcount           (io_bridge_1_avalon_slave_0_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (io_bridge_1_avalon_slave_0_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (io_bridge_1_avalon_slave_0_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (io_bridge_1_avalon_slave_0_agent_m0_lock),                       //                .lock
		.m0_readdata             (io_bridge_1_avalon_slave_0_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (io_bridge_1_avalon_slave_0_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (io_bridge_1_avalon_slave_0_agent_m0_read),                       //                .read
		.m0_waitrequest          (io_bridge_1_avalon_slave_0_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (io_bridge_1_avalon_slave_0_agent_m0_writedata),                  //                .writedata
		.m0_write                (io_bridge_1_avalon_slave_0_agent_m0_write),                      //                .write
		.rp_endofpacket          (io_bridge_1_avalon_slave_0_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (io_bridge_1_avalon_slave_0_agent_rp_ready),                      //                .ready
		.rp_valid                (io_bridge_1_avalon_slave_0_agent_rp_valid),                      //                .valid
		.rp_data                 (io_bridge_1_avalon_slave_0_agent_rp_data),                       //                .data
		.rp_startofpacket        (io_bridge_1_avalon_slave_0_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (io_bridge_1_avalon_slave_0_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (io_bridge_1_avalon_slave_0_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (io_bridge_1_avalon_slave_0_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (io_bridge_1_avalon_slave_0_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (io_bridge_1_avalon_slave_0_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (io_bridge_1_avalon_slave_0_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (io_bridge_1_avalon_slave_0_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (io_bridge_1_avalon_slave_0_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (io_bridge_1_avalon_slave_0_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (io_bridge_1_avalon_slave_0_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (io_bridge_1_avalon_slave_0_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (io_bridge_1_avalon_slave_0_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (io_bridge_1_avalon_slave_0_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (io_bridge_1_avalon_slave_0_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (io_bridge_1_avalon_slave_0_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (io_bridge_1_avalon_slave_0_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_out_0_ready),                                  // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_out_0_valid),                                  //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_out_0_data),                                   //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_out_0_error),                                  //                .error
		.rdata_fifo_src_ready    (io_bridge_1_avalon_slave_0_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (io_bridge_1_avalon_slave_0_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (io_bridge_1_avalon_slave_0_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (86),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) io_bridge_1_avalon_slave_0_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                               //       clk.clk
		.reset             (nios2_gen2_0_reset_reset_bridge_in_reset_reset),              // clk_reset.reset
		.in_data           (io_bridge_1_avalon_slave_0_agent_rf_source_data),             //        in.data
		.in_valid          (io_bridge_1_avalon_slave_0_agent_rf_source_valid),            //          .valid
		.in_ready          (io_bridge_1_avalon_slave_0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (io_bridge_1_avalon_slave_0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (io_bridge_1_avalon_slave_0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (io_bridge_1_avalon_slave_0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (io_bridge_1_avalon_slave_0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (io_bridge_1_avalon_slave_0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (io_bridge_1_avalon_slave_0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (io_bridge_1_avalon_slave_0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                       // (terminated)
		.csr_read          (1'b0),                                                        // (terminated)
		.csr_write         (1'b0),                                                        // (terminated)
		.csr_readdata      (),                                                            // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                        // (terminated)
		.almost_full_data  (),                                                            // (terminated)
		.almost_empty_data (),                                                            // (terminated)
		.in_empty          (1'b0),                                                        // (terminated)
		.out_empty         (),                                                            // (terminated)
		.in_error          (1'b0),                                                        // (terminated)
		.out_error         (),                                                            // (terminated)
		.in_channel        (1'b0),                                                        // (terminated)
		.out_channel       ()                                                             // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (111),
		.PKT_ORI_BURST_SIZE_L      (109),
		.PKT_RESPONSE_STATUS_H     (108),
		.PKT_RESPONSE_STATUS_L     (107),
		.PKT_BURST_SIZE_H          (84),
		.PKT_BURST_SIZE_L          (82),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (89),
		.PKT_PROTECTION_H          (102),
		.PKT_PROTECTION_L          (100),
		.PKT_BURSTWRAP_H           (81),
		.PKT_BURSTWRAP_L           (79),
		.PKT_BYTE_CNT_H            (78),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (94),
		.PKT_SRC_ID_L              (91),
		.PKT_DEST_ID_H             (98),
		.PKT_DEST_ID_L             (95),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (16),
		.ST_DATA_W                 (112),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) avalon2mem_0_avalon_slave_0_agent (
		.clk                     (clk_0_clk_clk),                                                //             clk.clk
		.reset                   (nios2_gen2_0_reset_reset_bridge_in_reset_reset),               //       clk_reset.reset
		.m0_address              (avalon2mem_0_avalon_slave_0_agent_m0_address),                 //              m0.address
		.m0_burstcount           (avalon2mem_0_avalon_slave_0_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (avalon2mem_0_avalon_slave_0_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (avalon2mem_0_avalon_slave_0_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (avalon2mem_0_avalon_slave_0_agent_m0_lock),                    //                .lock
		.m0_readdata             (avalon2mem_0_avalon_slave_0_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (avalon2mem_0_avalon_slave_0_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (avalon2mem_0_avalon_slave_0_agent_m0_read),                    //                .read
		.m0_waitrequest          (avalon2mem_0_avalon_slave_0_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (avalon2mem_0_avalon_slave_0_agent_m0_writedata),               //                .writedata
		.m0_write                (avalon2mem_0_avalon_slave_0_agent_m0_write),                   //                .write
		.rp_endofpacket          (avalon2mem_0_avalon_slave_0_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (avalon2mem_0_avalon_slave_0_agent_rp_ready),                   //                .ready
		.rp_valid                (avalon2mem_0_avalon_slave_0_agent_rp_valid),                   //                .valid
		.rp_data                 (avalon2mem_0_avalon_slave_0_agent_rp_data),                    //                .data
		.rp_startofpacket        (avalon2mem_0_avalon_slave_0_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_001_src_ready),                                        //              cp.ready
		.cp_valid                (cmd_mux_001_src_valid),                                        //                .valid
		.cp_data                 (cmd_mux_001_src_data),                                         //                .data
		.cp_startofpacket        (cmd_mux_001_src_startofpacket),                                //                .startofpacket
		.cp_endofpacket          (cmd_mux_001_src_endofpacket),                                  //                .endofpacket
		.cp_channel              (cmd_mux_001_src_channel),                                      //                .channel
		.rf_sink_ready           (avalon2mem_0_avalon_slave_0_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (avalon2mem_0_avalon_slave_0_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (avalon2mem_0_avalon_slave_0_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (avalon2mem_0_avalon_slave_0_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (avalon2mem_0_avalon_slave_0_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (avalon2mem_0_avalon_slave_0_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (avalon2mem_0_avalon_slave_0_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (avalon2mem_0_avalon_slave_0_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (avalon2mem_0_avalon_slave_0_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (avalon2mem_0_avalon_slave_0_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_001_out_0_ready),                            // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_001_out_0_valid),                            //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_001_out_0_data),                             //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_001_out_0_error),                            //                .error
		.rdata_fifo_src_ready    (avalon2mem_0_avalon_slave_0_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (avalon2mem_0_avalon_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (avalon2mem_0_avalon_slave_0_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                        //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                          //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (113),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) avalon2mem_0_avalon_slave_0_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                                //       clk.clk
		.reset             (nios2_gen2_0_reset_reset_bridge_in_reset_reset),               // clk_reset.reset
		.in_data           (avalon2mem_0_avalon_slave_0_agent_rf_source_data),             //        in.data
		.in_valid          (avalon2mem_0_avalon_slave_0_agent_rf_source_valid),            //          .valid
		.in_ready          (avalon2mem_0_avalon_slave_0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (avalon2mem_0_avalon_slave_0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (avalon2mem_0_avalon_slave_0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (avalon2mem_0_avalon_slave_0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (avalon2mem_0_avalon_slave_0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (avalon2mem_0_avalon_slave_0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (avalon2mem_0_avalon_slave_0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (avalon2mem_0_avalon_slave_0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                        // (terminated)
		.csr_read          (1'b0),                                                         // (terminated)
		.csr_write         (1'b0),                                                         // (terminated)
		.csr_readdata      (),                                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                         // (terminated)
		.almost_full_data  (),                                                             // (terminated)
		.almost_empty_data (),                                                             // (terminated)
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.in_error          (1'b0),                                                         // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_channel        (1'b0),                                                         // (terminated)
		.out_channel       ()                                                              // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (111),
		.PKT_ORI_BURST_SIZE_L      (109),
		.PKT_RESPONSE_STATUS_H     (108),
		.PKT_RESPONSE_STATUS_L     (107),
		.PKT_BURST_SIZE_H          (84),
		.PKT_BURST_SIZE_L          (82),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (89),
		.PKT_PROTECTION_H          (102),
		.PKT_PROTECTION_L          (100),
		.PKT_BURSTWRAP_H           (81),
		.PKT_BURSTWRAP_L           (79),
		.PKT_BYTE_CNT_H            (78),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (94),
		.PKT_SRC_ID_L              (91),
		.PKT_DEST_ID_H             (98),
		.PKT_DEST_ID_L             (95),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (16),
		.ST_DATA_W                 (112),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) jtag_0_avalon_slave_0_agent (
		.clk                     (clk_0_clk_clk),                                          //             clk.clk
		.reset                   (nios2_gen2_0_reset_reset_bridge_in_reset_reset),         //       clk_reset.reset
		.m0_address              (jtag_0_avalon_slave_0_agent_m0_address),                 //              m0.address
		.m0_burstcount           (jtag_0_avalon_slave_0_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (jtag_0_avalon_slave_0_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (jtag_0_avalon_slave_0_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (jtag_0_avalon_slave_0_agent_m0_lock),                    //                .lock
		.m0_readdata             (jtag_0_avalon_slave_0_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (jtag_0_avalon_slave_0_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (jtag_0_avalon_slave_0_agent_m0_read),                    //                .read
		.m0_waitrequest          (jtag_0_avalon_slave_0_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (jtag_0_avalon_slave_0_agent_m0_writedata),               //                .writedata
		.m0_write                (jtag_0_avalon_slave_0_agent_m0_write),                   //                .write
		.rp_endofpacket          (jtag_0_avalon_slave_0_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (jtag_0_avalon_slave_0_agent_rp_ready),                   //                .ready
		.rp_valid                (jtag_0_avalon_slave_0_agent_rp_valid),                   //                .valid
		.rp_data                 (jtag_0_avalon_slave_0_agent_rp_data),                    //                .data
		.rp_startofpacket        (jtag_0_avalon_slave_0_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_002_src_ready),                                  //              cp.ready
		.cp_valid                (cmd_mux_002_src_valid),                                  //                .valid
		.cp_data                 (cmd_mux_002_src_data),                                   //                .data
		.cp_startofpacket        (cmd_mux_002_src_startofpacket),                          //                .startofpacket
		.cp_endofpacket          (cmd_mux_002_src_endofpacket),                            //                .endofpacket
		.cp_channel              (cmd_mux_002_src_channel),                                //                .channel
		.rf_sink_ready           (jtag_0_avalon_slave_0_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (jtag_0_avalon_slave_0_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (jtag_0_avalon_slave_0_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (jtag_0_avalon_slave_0_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (jtag_0_avalon_slave_0_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (jtag_0_avalon_slave_0_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (jtag_0_avalon_slave_0_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (jtag_0_avalon_slave_0_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (jtag_0_avalon_slave_0_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (jtag_0_avalon_slave_0_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_002_out_0_ready),                      // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_002_out_0_valid),                      //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_002_out_0_data),                       //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_002_out_0_error),                      //                .error
		.rdata_fifo_src_ready    (jtag_0_avalon_slave_0_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (jtag_0_avalon_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (jtag_0_avalon_slave_0_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                  //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                    //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (113),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) jtag_0_avalon_slave_0_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                          //       clk.clk
		.reset             (nios2_gen2_0_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.in_data           (jtag_0_avalon_slave_0_agent_rf_source_data),             //        in.data
		.in_valid          (jtag_0_avalon_slave_0_agent_rf_source_valid),            //          .valid
		.in_ready          (jtag_0_avalon_slave_0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (jtag_0_avalon_slave_0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (jtag_0_avalon_slave_0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (jtag_0_avalon_slave_0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (jtag_0_avalon_slave_0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (jtag_0_avalon_slave_0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (jtag_0_avalon_slave_0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (jtag_0_avalon_slave_0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                  // (terminated)
		.csr_read          (1'b0),                                                   // (terminated)
		.csr_write         (1'b0),                                                   // (terminated)
		.csr_readdata      (),                                                       // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                   // (terminated)
		.almost_full_data  (),                                                       // (terminated)
		.almost_empty_data (),                                                       // (terminated)
		.in_empty          (1'b0),                                                   // (terminated)
		.out_empty         (),                                                       // (terminated)
		.in_error          (1'b0),                                                   // (terminated)
		.out_error         (),                                                       // (terminated)
		.in_channel        (1'b0),                                                   // (terminated)
		.out_channel       ()                                                        // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (111),
		.PKT_ORI_BURST_SIZE_L      (109),
		.PKT_RESPONSE_STATUS_H     (108),
		.PKT_RESPONSE_STATUS_L     (107),
		.PKT_BURST_SIZE_H          (84),
		.PKT_BURST_SIZE_L          (82),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (89),
		.PKT_PROTECTION_H          (102),
		.PKT_PROTECTION_L          (100),
		.PKT_BURSTWRAP_H           (81),
		.PKT_BURSTWRAP_L           (79),
		.PKT_BYTE_CNT_H            (78),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (94),
		.PKT_SRC_ID_L              (91),
		.PKT_DEST_ID_H             (98),
		.PKT_DEST_ID_L             (95),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (16),
		.ST_DATA_W                 (112),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) jtag_1_avalon_slave_0_agent (
		.clk                     (clk_0_clk_clk),                                          //             clk.clk
		.reset                   (nios2_gen2_0_reset_reset_bridge_in_reset_reset),         //       clk_reset.reset
		.m0_address              (jtag_1_avalon_slave_0_agent_m0_address),                 //              m0.address
		.m0_burstcount           (jtag_1_avalon_slave_0_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (jtag_1_avalon_slave_0_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (jtag_1_avalon_slave_0_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (jtag_1_avalon_slave_0_agent_m0_lock),                    //                .lock
		.m0_readdata             (jtag_1_avalon_slave_0_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (jtag_1_avalon_slave_0_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (jtag_1_avalon_slave_0_agent_m0_read),                    //                .read
		.m0_waitrequest          (jtag_1_avalon_slave_0_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (jtag_1_avalon_slave_0_agent_m0_writedata),               //                .writedata
		.m0_write                (jtag_1_avalon_slave_0_agent_m0_write),                   //                .write
		.rp_endofpacket          (jtag_1_avalon_slave_0_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (jtag_1_avalon_slave_0_agent_rp_ready),                   //                .ready
		.rp_valid                (jtag_1_avalon_slave_0_agent_rp_valid),                   //                .valid
		.rp_data                 (jtag_1_avalon_slave_0_agent_rp_data),                    //                .data
		.rp_startofpacket        (jtag_1_avalon_slave_0_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_003_src_ready),                                  //              cp.ready
		.cp_valid                (cmd_mux_003_src_valid),                                  //                .valid
		.cp_data                 (cmd_mux_003_src_data),                                   //                .data
		.cp_startofpacket        (cmd_mux_003_src_startofpacket),                          //                .startofpacket
		.cp_endofpacket          (cmd_mux_003_src_endofpacket),                            //                .endofpacket
		.cp_channel              (cmd_mux_003_src_channel),                                //                .channel
		.rf_sink_ready           (jtag_1_avalon_slave_0_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (jtag_1_avalon_slave_0_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (jtag_1_avalon_slave_0_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (jtag_1_avalon_slave_0_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (jtag_1_avalon_slave_0_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (jtag_1_avalon_slave_0_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (jtag_1_avalon_slave_0_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (jtag_1_avalon_slave_0_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (jtag_1_avalon_slave_0_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (jtag_1_avalon_slave_0_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_003_out_0_ready),                      // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_003_out_0_valid),                      //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_003_out_0_data),                       //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_003_out_0_error),                      //                .error
		.rdata_fifo_src_ready    (jtag_1_avalon_slave_0_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (jtag_1_avalon_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (jtag_1_avalon_slave_0_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                  //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                    //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (113),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) jtag_1_avalon_slave_0_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                          //       clk.clk
		.reset             (nios2_gen2_0_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.in_data           (jtag_1_avalon_slave_0_agent_rf_source_data),             //        in.data
		.in_valid          (jtag_1_avalon_slave_0_agent_rf_source_valid),            //          .valid
		.in_ready          (jtag_1_avalon_slave_0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (jtag_1_avalon_slave_0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (jtag_1_avalon_slave_0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (jtag_1_avalon_slave_0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (jtag_1_avalon_slave_0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (jtag_1_avalon_slave_0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (jtag_1_avalon_slave_0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (jtag_1_avalon_slave_0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                  // (terminated)
		.csr_read          (1'b0),                                                   // (terminated)
		.csr_write         (1'b0),                                                   // (terminated)
		.csr_readdata      (),                                                       // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                   // (terminated)
		.almost_full_data  (),                                                       // (terminated)
		.almost_empty_data (),                                                       // (terminated)
		.in_empty          (1'b0),                                                   // (terminated)
		.out_empty         (),                                                       // (terminated)
		.in_error          (1'b0),                                                   // (terminated)
		.out_error         (),                                                       // (terminated)
		.in_channel        (1'b0),                                                   // (terminated)
		.out_channel       ()                                                        // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (84),
		.PKT_ORI_BURST_SIZE_L      (82),
		.PKT_RESPONSE_STATUS_H     (81),
		.PKT_RESPONSE_STATUS_L     (80),
		.PKT_BURST_SIZE_H          (57),
		.PKT_BURST_SIZE_L          (55),
		.PKT_TRANS_LOCK            (45),
		.PKT_BEGIN_BURST           (62),
		.PKT_PROTECTION_H          (75),
		.PKT_PROTECTION_L          (73),
		.PKT_BURSTWRAP_H           (54),
		.PKT_BURSTWRAP_L           (52),
		.PKT_BYTE_CNT_H            (51),
		.PKT_BYTE_CNT_L            (47),
		.PKT_ADDR_H                (40),
		.PKT_ADDR_L                (9),
		.PKT_TRANS_COMPRESSED_READ (41),
		.PKT_TRANS_POSTED          (42),
		.PKT_TRANS_WRITE           (43),
		.PKT_TRANS_READ            (44),
		.PKT_DATA_H                (7),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (8),
		.PKT_BYTEEN_L              (8),
		.PKT_SRC_ID_H              (67),
		.PKT_SRC_ID_L              (64),
		.PKT_DEST_ID_H             (71),
		.PKT_DEST_ID_L             (68),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (16),
		.ST_DATA_W                 (85),
		.AVS_BURSTCOUNT_W          (1),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) io_bridge_0_avalon_slave_0_agent (
		.clk                     (clk_0_clk_clk),                                                  //             clk.clk
		.reset                   (nios2_gen2_0_reset_reset_bridge_in_reset_reset),                 //       clk_reset.reset
		.m0_address              (io_bridge_0_avalon_slave_0_agent_m0_address),                    //              m0.address
		.m0_burstcount           (io_bridge_0_avalon_slave_0_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (io_bridge_0_avalon_slave_0_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (io_bridge_0_avalon_slave_0_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (io_bridge_0_avalon_slave_0_agent_m0_lock),                       //                .lock
		.m0_readdata             (io_bridge_0_avalon_slave_0_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (io_bridge_0_avalon_slave_0_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (io_bridge_0_avalon_slave_0_agent_m0_read),                       //                .read
		.m0_waitrequest          (io_bridge_0_avalon_slave_0_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (io_bridge_0_avalon_slave_0_agent_m0_writedata),                  //                .writedata
		.m0_write                (io_bridge_0_avalon_slave_0_agent_m0_write),                      //                .write
		.rp_endofpacket          (io_bridge_0_avalon_slave_0_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (io_bridge_0_avalon_slave_0_agent_rp_ready),                      //                .ready
		.rp_valid                (io_bridge_0_avalon_slave_0_agent_rp_valid),                      //                .valid
		.rp_data                 (io_bridge_0_avalon_slave_0_agent_rp_data),                       //                .data
		.rp_startofpacket        (io_bridge_0_avalon_slave_0_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (io_bridge_0_avalon_slave_0_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (io_bridge_0_avalon_slave_0_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (io_bridge_0_avalon_slave_0_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (io_bridge_0_avalon_slave_0_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (io_bridge_0_avalon_slave_0_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (io_bridge_0_avalon_slave_0_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (io_bridge_0_avalon_slave_0_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (io_bridge_0_avalon_slave_0_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (io_bridge_0_avalon_slave_0_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (io_bridge_0_avalon_slave_0_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (io_bridge_0_avalon_slave_0_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (io_bridge_0_avalon_slave_0_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (io_bridge_0_avalon_slave_0_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (io_bridge_0_avalon_slave_0_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (io_bridge_0_avalon_slave_0_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (io_bridge_0_avalon_slave_0_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_004_out_0_ready),                              // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_004_out_0_valid),                              //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_004_out_0_data),                               //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_004_out_0_error),                              //                .error
		.rdata_fifo_src_ready    (io_bridge_0_avalon_slave_0_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (io_bridge_0_avalon_slave_0_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (io_bridge_0_avalon_slave_0_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (86),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) io_bridge_0_avalon_slave_0_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                               //       clk.clk
		.reset             (nios2_gen2_0_reset_reset_bridge_in_reset_reset),              // clk_reset.reset
		.in_data           (io_bridge_0_avalon_slave_0_agent_rf_source_data),             //        in.data
		.in_valid          (io_bridge_0_avalon_slave_0_agent_rf_source_valid),            //          .valid
		.in_ready          (io_bridge_0_avalon_slave_0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (io_bridge_0_avalon_slave_0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (io_bridge_0_avalon_slave_0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (io_bridge_0_avalon_slave_0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (io_bridge_0_avalon_slave_0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (io_bridge_0_avalon_slave_0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (io_bridge_0_avalon_slave_0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (io_bridge_0_avalon_slave_0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                       // (terminated)
		.csr_read          (1'b0),                                                        // (terminated)
		.csr_write         (1'b0),                                                        // (terminated)
		.csr_readdata      (),                                                            // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                        // (terminated)
		.almost_full_data  (),                                                            // (terminated)
		.almost_empty_data (),                                                            // (terminated)
		.in_empty          (1'b0),                                                        // (terminated)
		.out_empty         (),                                                            // (terminated)
		.in_error          (1'b0),                                                        // (terminated)
		.out_error         (),                                                            // (terminated)
		.in_channel        (1'b0),                                                        // (terminated)
		.out_channel       ()                                                             // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (111),
		.PKT_ORI_BURST_SIZE_L      (109),
		.PKT_RESPONSE_STATUS_H     (108),
		.PKT_RESPONSE_STATUS_L     (107),
		.PKT_BURST_SIZE_H          (84),
		.PKT_BURST_SIZE_L          (82),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (89),
		.PKT_PROTECTION_H          (102),
		.PKT_PROTECTION_L          (100),
		.PKT_BURSTWRAP_H           (81),
		.PKT_BURSTWRAP_L           (79),
		.PKT_BYTE_CNT_H            (78),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (94),
		.PKT_SRC_ID_L              (91),
		.PKT_DEST_ID_H             (98),
		.PKT_DEST_ID_L             (95),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (16),
		.ST_DATA_W                 (112),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) audio_out_dma_csr_agent (
		.clk                     (clk_0_clk_clk),                                      //             clk.clk
		.reset                   (nios2_gen2_0_reset_reset_bridge_in_reset_reset),     //       clk_reset.reset
		.m0_address              (audio_out_dma_csr_agent_m0_address),                 //              m0.address
		.m0_burstcount           (audio_out_dma_csr_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (audio_out_dma_csr_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (audio_out_dma_csr_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (audio_out_dma_csr_agent_m0_lock),                    //                .lock
		.m0_readdata             (audio_out_dma_csr_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (audio_out_dma_csr_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (audio_out_dma_csr_agent_m0_read),                    //                .read
		.m0_waitrequest          (audio_out_dma_csr_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (audio_out_dma_csr_agent_m0_writedata),               //                .writedata
		.m0_write                (audio_out_dma_csr_agent_m0_write),                   //                .write
		.rp_endofpacket          (audio_out_dma_csr_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (audio_out_dma_csr_agent_rp_ready),                   //                .ready
		.rp_valid                (audio_out_dma_csr_agent_rp_valid),                   //                .valid
		.rp_data                 (audio_out_dma_csr_agent_rp_data),                    //                .data
		.rp_startofpacket        (audio_out_dma_csr_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_005_src_ready),                              //              cp.ready
		.cp_valid                (cmd_mux_005_src_valid),                              //                .valid
		.cp_data                 (cmd_mux_005_src_data),                               //                .data
		.cp_startofpacket        (cmd_mux_005_src_startofpacket),                      //                .startofpacket
		.cp_endofpacket          (cmd_mux_005_src_endofpacket),                        //                .endofpacket
		.cp_channel              (cmd_mux_005_src_channel),                            //                .channel
		.rf_sink_ready           (audio_out_dma_csr_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (audio_out_dma_csr_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (audio_out_dma_csr_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (audio_out_dma_csr_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (audio_out_dma_csr_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (audio_out_dma_csr_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (audio_out_dma_csr_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (audio_out_dma_csr_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (audio_out_dma_csr_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (audio_out_dma_csr_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_005_out_0_ready),                  // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_005_out_0_valid),                  //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_005_out_0_data),                   //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_005_out_0_error),                  //                .error
		.rdata_fifo_src_ready    (audio_out_dma_csr_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (audio_out_dma_csr_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (audio_out_dma_csr_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                              //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (113),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) audio_out_dma_csr_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                      //       clk.clk
		.reset             (nios2_gen2_0_reset_reset_bridge_in_reset_reset),     // clk_reset.reset
		.in_data           (audio_out_dma_csr_agent_rf_source_data),             //        in.data
		.in_valid          (audio_out_dma_csr_agent_rf_source_valid),            //          .valid
		.in_ready          (audio_out_dma_csr_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (audio_out_dma_csr_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (audio_out_dma_csr_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (audio_out_dma_csr_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (audio_out_dma_csr_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (audio_out_dma_csr_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (audio_out_dma_csr_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (audio_out_dma_csr_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                              // (terminated)
		.csr_read          (1'b0),                                               // (terminated)
		.csr_write         (1'b0),                                               // (terminated)
		.csr_readdata      (),                                                   // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),               // (terminated)
		.almost_full_data  (),                                                   // (terminated)
		.almost_empty_data (),                                                   // (terminated)
		.in_empty          (1'b0),                                               // (terminated)
		.out_empty         (),                                                   // (terminated)
		.in_error          (1'b0),                                               // (terminated)
		.out_error         (),                                                   // (terminated)
		.in_channel        (1'b0),                                               // (terminated)
		.out_channel       ()                                                    // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (111),
		.PKT_ORI_BURST_SIZE_L      (109),
		.PKT_RESPONSE_STATUS_H     (108),
		.PKT_RESPONSE_STATUS_L     (107),
		.PKT_BURST_SIZE_H          (84),
		.PKT_BURST_SIZE_L          (82),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (89),
		.PKT_PROTECTION_H          (102),
		.PKT_PROTECTION_L          (100),
		.PKT_BURSTWRAP_H           (81),
		.PKT_BURSTWRAP_L           (79),
		.PKT_BYTE_CNT_H            (78),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (94),
		.PKT_SRC_ID_L              (91),
		.PKT_DEST_ID_H             (98),
		.PKT_DEST_ID_L             (95),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (16),
		.ST_DATA_W                 (112),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) audio_in_dma_csr_agent (
		.clk                     (clk_0_clk_clk),                                     //             clk.clk
		.reset                   (nios2_gen2_0_reset_reset_bridge_in_reset_reset),    //       clk_reset.reset
		.m0_address              (audio_in_dma_csr_agent_m0_address),                 //              m0.address
		.m0_burstcount           (audio_in_dma_csr_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (audio_in_dma_csr_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (audio_in_dma_csr_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (audio_in_dma_csr_agent_m0_lock),                    //                .lock
		.m0_readdata             (audio_in_dma_csr_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (audio_in_dma_csr_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (audio_in_dma_csr_agent_m0_read),                    //                .read
		.m0_waitrequest          (audio_in_dma_csr_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (audio_in_dma_csr_agent_m0_writedata),               //                .writedata
		.m0_write                (audio_in_dma_csr_agent_m0_write),                   //                .write
		.rp_endofpacket          (audio_in_dma_csr_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (audio_in_dma_csr_agent_rp_ready),                   //                .ready
		.rp_valid                (audio_in_dma_csr_agent_rp_valid),                   //                .valid
		.rp_data                 (audio_in_dma_csr_agent_rp_data),                    //                .data
		.rp_startofpacket        (audio_in_dma_csr_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_006_src_ready),                             //              cp.ready
		.cp_valid                (cmd_mux_006_src_valid),                             //                .valid
		.cp_data                 (cmd_mux_006_src_data),                              //                .data
		.cp_startofpacket        (cmd_mux_006_src_startofpacket),                     //                .startofpacket
		.cp_endofpacket          (cmd_mux_006_src_endofpacket),                       //                .endofpacket
		.cp_channel              (cmd_mux_006_src_channel),                           //                .channel
		.rf_sink_ready           (audio_in_dma_csr_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (audio_in_dma_csr_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (audio_in_dma_csr_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (audio_in_dma_csr_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (audio_in_dma_csr_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (audio_in_dma_csr_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (audio_in_dma_csr_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (audio_in_dma_csr_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (audio_in_dma_csr_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (audio_in_dma_csr_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_006_out_0_ready),                 // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_006_out_0_valid),                 //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_006_out_0_data),                  //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_006_out_0_error),                 //                .error
		.rdata_fifo_src_ready    (audio_in_dma_csr_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (audio_in_dma_csr_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (audio_in_dma_csr_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                             //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                               //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (113),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) audio_in_dma_csr_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                     //       clk.clk
		.reset             (nios2_gen2_0_reset_reset_bridge_in_reset_reset),    // clk_reset.reset
		.in_data           (audio_in_dma_csr_agent_rf_source_data),             //        in.data
		.in_valid          (audio_in_dma_csr_agent_rf_source_valid),            //          .valid
		.in_ready          (audio_in_dma_csr_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (audio_in_dma_csr_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (audio_in_dma_csr_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (audio_in_dma_csr_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (audio_in_dma_csr_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (audio_in_dma_csr_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (audio_in_dma_csr_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (audio_in_dma_csr_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                             // (terminated)
		.csr_read          (1'b0),                                              // (terminated)
		.csr_write         (1'b0),                                              // (terminated)
		.csr_readdata      (),                                                  // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),              // (terminated)
		.almost_full_data  (),                                                  // (terminated)
		.almost_empty_data (),                                                  // (terminated)
		.in_empty          (1'b0),                                              // (terminated)
		.out_empty         (),                                                  // (terminated)
		.in_error          (1'b0),                                              // (terminated)
		.out_error         (),                                                  // (terminated)
		.in_channel        (1'b0),                                              // (terminated)
		.out_channel       ()                                                   // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (111),
		.PKT_ORI_BURST_SIZE_L      (109),
		.PKT_RESPONSE_STATUS_H     (108),
		.PKT_RESPONSE_STATUS_L     (107),
		.PKT_BURST_SIZE_H          (84),
		.PKT_BURST_SIZE_L          (82),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (89),
		.PKT_PROTECTION_H          (102),
		.PKT_PROTECTION_L          (100),
		.PKT_BURSTWRAP_H           (81),
		.PKT_BURSTWRAP_L           (79),
		.PKT_BYTE_CNT_H            (78),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (94),
		.PKT_SRC_ID_L              (91),
		.PKT_DEST_ID_H             (98),
		.PKT_DEST_ID_L             (95),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (16),
		.ST_DATA_W                 (112),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) jtagdebug_csr_agent (
		.clk                     (clk_0_clk_clk),                                  //             clk.clk
		.reset                   (nios2_gen2_0_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (jtagdebug_csr_agent_m0_address),                 //              m0.address
		.m0_burstcount           (jtagdebug_csr_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (jtagdebug_csr_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (jtagdebug_csr_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (jtagdebug_csr_agent_m0_lock),                    //                .lock
		.m0_readdata             (jtagdebug_csr_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (jtagdebug_csr_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (jtagdebug_csr_agent_m0_read),                    //                .read
		.m0_waitrequest          (jtagdebug_csr_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (jtagdebug_csr_agent_m0_writedata),               //                .writedata
		.m0_write                (jtagdebug_csr_agent_m0_write),                   //                .write
		.rp_endofpacket          (jtagdebug_csr_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (jtagdebug_csr_agent_rp_ready),                   //                .ready
		.rp_valid                (jtagdebug_csr_agent_rp_valid),                   //                .valid
		.rp_data                 (jtagdebug_csr_agent_rp_data),                    //                .data
		.rp_startofpacket        (jtagdebug_csr_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_007_src_ready),                          //              cp.ready
		.cp_valid                (cmd_mux_007_src_valid),                          //                .valid
		.cp_data                 (cmd_mux_007_src_data),                           //                .data
		.cp_startofpacket        (cmd_mux_007_src_startofpacket),                  //                .startofpacket
		.cp_endofpacket          (cmd_mux_007_src_endofpacket),                    //                .endofpacket
		.cp_channel              (cmd_mux_007_src_channel),                        //                .channel
		.rf_sink_ready           (jtagdebug_csr_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (jtagdebug_csr_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (jtagdebug_csr_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (jtagdebug_csr_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (jtagdebug_csr_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (jtagdebug_csr_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (jtagdebug_csr_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (jtagdebug_csr_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (jtagdebug_csr_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (jtagdebug_csr_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_007_out_0_ready),              // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_007_out_0_valid),              //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_007_out_0_data),               //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_007_out_0_error),              //                .error
		.rdata_fifo_src_ready    (jtagdebug_csr_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (jtagdebug_csr_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (jtagdebug_csr_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (113),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) jtagdebug_csr_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                  //       clk.clk
		.reset             (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (jtagdebug_csr_agent_rf_source_data),             //        in.data
		.in_valid          (jtagdebug_csr_agent_rf_source_valid),            //          .valid
		.in_ready          (jtagdebug_csr_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (jtagdebug_csr_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (jtagdebug_csr_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (jtagdebug_csr_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (jtagdebug_csr_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (jtagdebug_csr_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (jtagdebug_csr_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (jtagdebug_csr_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                          // (terminated)
		.csr_read          (1'b0),                                           // (terminated)
		.csr_write         (1'b0),                                           // (terminated)
		.csr_readdata      (),                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),           // (terminated)
		.almost_full_data  (),                                               // (terminated)
		.almost_empty_data (),                                               // (terminated)
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.in_error          (1'b0),                                           // (terminated)
		.out_error         (),                                               // (terminated)
		.in_channel        (1'b0),                                           // (terminated)
		.out_channel       ()                                                // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (111),
		.PKT_ORI_BURST_SIZE_L      (109),
		.PKT_RESPONSE_STATUS_H     (108),
		.PKT_RESPONSE_STATUS_L     (107),
		.PKT_BURST_SIZE_H          (84),
		.PKT_BURST_SIZE_L          (82),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (89),
		.PKT_PROTECTION_H          (102),
		.PKT_PROTECTION_L          (100),
		.PKT_BURSTWRAP_H           (81),
		.PKT_BURSTWRAP_L           (79),
		.PKT_BYTE_CNT_H            (78),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (94),
		.PKT_SRC_ID_L              (91),
		.PKT_DEST_ID_H             (98),
		.PKT_DEST_ID_L             (95),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (16),
		.ST_DATA_W                 (112),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) nios2_gen2_0_debug_mem_slave_agent (
		.clk                     (clk_0_clk_clk),                                                 //             clk.clk
		.reset                   (nios2_gen2_0_reset_reset_bridge_in_reset_reset),                //       clk_reset.reset
		.m0_address              (nios2_gen2_0_debug_mem_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (nios2_gen2_0_debug_mem_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (nios2_gen2_0_debug_mem_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (nios2_gen2_0_debug_mem_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (nios2_gen2_0_debug_mem_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (nios2_gen2_0_debug_mem_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (nios2_gen2_0_debug_mem_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (nios2_gen2_0_debug_mem_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (nios2_gen2_0_debug_mem_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (nios2_gen2_0_debug_mem_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (nios2_gen2_0_debug_mem_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (nios2_gen2_0_debug_mem_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (nios2_gen2_0_debug_mem_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (nios2_gen2_0_debug_mem_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (nios2_gen2_0_debug_mem_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (nios2_gen2_0_debug_mem_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_008_src_ready),                                         //              cp.ready
		.cp_valid                (cmd_mux_008_src_valid),                                         //                .valid
		.cp_data                 (cmd_mux_008_src_data),                                          //                .data
		.cp_startofpacket        (cmd_mux_008_src_startofpacket),                                 //                .startofpacket
		.cp_endofpacket          (cmd_mux_008_src_endofpacket),                                   //                .endofpacket
		.cp_channel              (cmd_mux_008_src_channel),                                       //                .channel
		.rf_sink_ready           (nios2_gen2_0_debug_mem_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (nios2_gen2_0_debug_mem_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (nios2_gen2_0_debug_mem_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (nios2_gen2_0_debug_mem_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (nios2_gen2_0_debug_mem_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (nios2_gen2_0_debug_mem_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (nios2_gen2_0_debug_mem_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (nios2_gen2_0_debug_mem_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (nios2_gen2_0_debug_mem_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (nios2_gen2_0_debug_mem_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_008_out_0_ready),                             // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_008_out_0_valid),                             //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_008_out_0_data),                              //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_008_out_0_error),                             //                .error
		.rdata_fifo_src_ready    (nios2_gen2_0_debug_mem_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (nios2_gen2_0_debug_mem_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (nios2_gen2_0_debug_mem_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                         //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                           //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (113),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) nios2_gen2_0_debug_mem_slave_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                                 //       clk.clk
		.reset             (nios2_gen2_0_reset_reset_bridge_in_reset_reset),                // clk_reset.reset
		.in_data           (nios2_gen2_0_debug_mem_slave_agent_rf_source_data),             //        in.data
		.in_valid          (nios2_gen2_0_debug_mem_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (nios2_gen2_0_debug_mem_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (nios2_gen2_0_debug_mem_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (nios2_gen2_0_debug_mem_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (nios2_gen2_0_debug_mem_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (nios2_gen2_0_debug_mem_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (nios2_gen2_0_debug_mem_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (nios2_gen2_0_debug_mem_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (nios2_gen2_0_debug_mem_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                         // (terminated)
		.csr_read          (1'b0),                                                          // (terminated)
		.csr_write         (1'b0),                                                          // (terminated)
		.csr_readdata      (),                                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                          // (terminated)
		.almost_full_data  (),                                                              // (terminated)
		.almost_empty_data (),                                                              // (terminated)
		.in_empty          (1'b0),                                                          // (terminated)
		.out_empty         (),                                                              // (terminated)
		.in_error          (1'b0),                                                          // (terminated)
		.out_error         (),                                                              // (terminated)
		.in_channel        (1'b0),                                                          // (terminated)
		.out_channel       ()                                                               // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (219),
		.PKT_ORI_BURST_SIZE_L      (217),
		.PKT_RESPONSE_STATUS_H     (216),
		.PKT_RESPONSE_STATUS_L     (215),
		.PKT_BURST_SIZE_H          (192),
		.PKT_BURST_SIZE_L          (190),
		.PKT_TRANS_LOCK            (180),
		.PKT_BEGIN_BURST           (197),
		.PKT_PROTECTION_H          (210),
		.PKT_PROTECTION_L          (208),
		.PKT_BURSTWRAP_H           (189),
		.PKT_BURSTWRAP_L           (187),
		.PKT_BYTE_CNT_H            (186),
		.PKT_BYTE_CNT_L            (182),
		.PKT_ADDR_H                (175),
		.PKT_ADDR_L                (144),
		.PKT_TRANS_COMPRESSED_READ (176),
		.PKT_TRANS_POSTED          (177),
		.PKT_TRANS_WRITE           (178),
		.PKT_TRANS_READ            (179),
		.PKT_DATA_H                (127),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (143),
		.PKT_BYTEEN_L              (128),
		.PKT_SRC_ID_H              (202),
		.PKT_SRC_ID_L              (199),
		.PKT_DEST_ID_H             (206),
		.PKT_DEST_ID_L             (203),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (16),
		.ST_DATA_W                 (220),
		.AVS_BURSTCOUNT_W          (5),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) audio_out_dma_descriptor_slave_agent (
		.clk                     (clk_0_clk_clk),                                                   //             clk.clk
		.reset                   (nios2_gen2_0_reset_reset_bridge_in_reset_reset),                  //       clk_reset.reset
		.m0_address              (audio_out_dma_descriptor_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (audio_out_dma_descriptor_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (audio_out_dma_descriptor_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (audio_out_dma_descriptor_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (audio_out_dma_descriptor_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (audio_out_dma_descriptor_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (audio_out_dma_descriptor_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (audio_out_dma_descriptor_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (audio_out_dma_descriptor_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (audio_out_dma_descriptor_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (audio_out_dma_descriptor_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (audio_out_dma_descriptor_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (audio_out_dma_descriptor_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (audio_out_dma_descriptor_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (audio_out_dma_descriptor_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (audio_out_dma_descriptor_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_009_src_ready),                                           //              cp.ready
		.cp_valid                (cmd_mux_009_src_valid),                                           //                .valid
		.cp_data                 (cmd_mux_009_src_data),                                            //                .data
		.cp_startofpacket        (cmd_mux_009_src_startofpacket),                                   //                .startofpacket
		.cp_endofpacket          (cmd_mux_009_src_endofpacket),                                     //                .endofpacket
		.cp_channel              (cmd_mux_009_src_channel),                                         //                .channel
		.rf_sink_ready           (audio_out_dma_descriptor_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (audio_out_dma_descriptor_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (audio_out_dma_descriptor_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (audio_out_dma_descriptor_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (audio_out_dma_descriptor_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (audio_out_dma_descriptor_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (audio_out_dma_descriptor_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (audio_out_dma_descriptor_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (audio_out_dma_descriptor_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (audio_out_dma_descriptor_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_009_out_0_ready),                               // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_009_out_0_valid),                               //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_009_out_0_data),                                //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_009_out_0_error),                               //                .error
		.rdata_fifo_src_ready    (audio_out_dma_descriptor_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (audio_out_dma_descriptor_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (audio_out_dma_descriptor_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                           //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                             //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (221),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) audio_out_dma_descriptor_slave_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                                   //       clk.clk
		.reset             (nios2_gen2_0_reset_reset_bridge_in_reset_reset),                  // clk_reset.reset
		.in_data           (audio_out_dma_descriptor_slave_agent_rf_source_data),             //        in.data
		.in_valid          (audio_out_dma_descriptor_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (audio_out_dma_descriptor_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (audio_out_dma_descriptor_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (audio_out_dma_descriptor_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (audio_out_dma_descriptor_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (audio_out_dma_descriptor_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (audio_out_dma_descriptor_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (audio_out_dma_descriptor_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (audio_out_dma_descriptor_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                           // (terminated)
		.csr_read          (1'b0),                                                            // (terminated)
		.csr_write         (1'b0),                                                            // (terminated)
		.csr_readdata      (),                                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                            // (terminated)
		.almost_full_data  (),                                                                // (terminated)
		.almost_empty_data (),                                                                // (terminated)
		.in_empty          (1'b0),                                                            // (terminated)
		.out_empty         (),                                                                // (terminated)
		.in_error          (1'b0),                                                            // (terminated)
		.out_error         (),                                                                // (terminated)
		.in_channel        (1'b0),                                                            // (terminated)
		.out_channel       ()                                                                 // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (219),
		.PKT_ORI_BURST_SIZE_L      (217),
		.PKT_RESPONSE_STATUS_H     (216),
		.PKT_RESPONSE_STATUS_L     (215),
		.PKT_BURST_SIZE_H          (192),
		.PKT_BURST_SIZE_L          (190),
		.PKT_TRANS_LOCK            (180),
		.PKT_BEGIN_BURST           (197),
		.PKT_PROTECTION_H          (210),
		.PKT_PROTECTION_L          (208),
		.PKT_BURSTWRAP_H           (189),
		.PKT_BURSTWRAP_L           (187),
		.PKT_BYTE_CNT_H            (186),
		.PKT_BYTE_CNT_L            (182),
		.PKT_ADDR_H                (175),
		.PKT_ADDR_L                (144),
		.PKT_TRANS_COMPRESSED_READ (176),
		.PKT_TRANS_POSTED          (177),
		.PKT_TRANS_WRITE           (178),
		.PKT_TRANS_READ            (179),
		.PKT_DATA_H                (127),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (143),
		.PKT_BYTEEN_L              (128),
		.PKT_SRC_ID_H              (202),
		.PKT_SRC_ID_L              (199),
		.PKT_DEST_ID_H             (206),
		.PKT_DEST_ID_L             (203),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (16),
		.ST_DATA_W                 (220),
		.AVS_BURSTCOUNT_W          (5),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) audio_in_dma_descriptor_slave_agent (
		.clk                     (clk_0_clk_clk),                                                  //             clk.clk
		.reset                   (nios2_gen2_0_reset_reset_bridge_in_reset_reset),                 //       clk_reset.reset
		.m0_address              (audio_in_dma_descriptor_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (audio_in_dma_descriptor_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (audio_in_dma_descriptor_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (audio_in_dma_descriptor_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (audio_in_dma_descriptor_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (audio_in_dma_descriptor_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (audio_in_dma_descriptor_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (audio_in_dma_descriptor_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (audio_in_dma_descriptor_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (audio_in_dma_descriptor_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (audio_in_dma_descriptor_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (audio_in_dma_descriptor_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (audio_in_dma_descriptor_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (audio_in_dma_descriptor_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (audio_in_dma_descriptor_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (audio_in_dma_descriptor_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_010_src_ready),                                          //              cp.ready
		.cp_valid                (cmd_mux_010_src_valid),                                          //                .valid
		.cp_data                 (cmd_mux_010_src_data),                                           //                .data
		.cp_startofpacket        (cmd_mux_010_src_startofpacket),                                  //                .startofpacket
		.cp_endofpacket          (cmd_mux_010_src_endofpacket),                                    //                .endofpacket
		.cp_channel              (cmd_mux_010_src_channel),                                        //                .channel
		.rf_sink_ready           (audio_in_dma_descriptor_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (audio_in_dma_descriptor_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (audio_in_dma_descriptor_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (audio_in_dma_descriptor_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (audio_in_dma_descriptor_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (audio_in_dma_descriptor_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (audio_in_dma_descriptor_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (audio_in_dma_descriptor_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (audio_in_dma_descriptor_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (audio_in_dma_descriptor_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_010_out_0_ready),                              // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_010_out_0_valid),                              //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_010_out_0_data),                               //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_010_out_0_error),                              //                .error
		.rdata_fifo_src_ready    (audio_in_dma_descriptor_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (audio_in_dma_descriptor_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (audio_in_dma_descriptor_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (221),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) audio_in_dma_descriptor_slave_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                                  //       clk.clk
		.reset             (nios2_gen2_0_reset_reset_bridge_in_reset_reset),                 // clk_reset.reset
		.in_data           (audio_in_dma_descriptor_slave_agent_rf_source_data),             //        in.data
		.in_valid          (audio_in_dma_descriptor_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (audio_in_dma_descriptor_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (audio_in_dma_descriptor_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (audio_in_dma_descriptor_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (audio_in_dma_descriptor_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (audio_in_dma_descriptor_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (audio_in_dma_descriptor_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (audio_in_dma_descriptor_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (audio_in_dma_descriptor_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                          // (terminated)
		.csr_read          (1'b0),                                                           // (terminated)
		.csr_write         (1'b0),                                                           // (terminated)
		.csr_readdata      (),                                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                           // (terminated)
		.almost_full_data  (),                                                               // (terminated)
		.almost_empty_data (),                                                               // (terminated)
		.in_empty          (1'b0),                                                           // (terminated)
		.out_empty         (),                                                               // (terminated)
		.in_error          (1'b0),                                                           // (terminated)
		.out_error         (),                                                               // (terminated)
		.in_channel        (1'b0),                                                           // (terminated)
		.out_channel       ()                                                                // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (219),
		.PKT_ORI_BURST_SIZE_L      (217),
		.PKT_RESPONSE_STATUS_H     (216),
		.PKT_RESPONSE_STATUS_L     (215),
		.PKT_BURST_SIZE_H          (192),
		.PKT_BURST_SIZE_L          (190),
		.PKT_TRANS_LOCK            (180),
		.PKT_BEGIN_BURST           (197),
		.PKT_PROTECTION_H          (210),
		.PKT_PROTECTION_L          (208),
		.PKT_BURSTWRAP_H           (189),
		.PKT_BURSTWRAP_L           (187),
		.PKT_BYTE_CNT_H            (186),
		.PKT_BYTE_CNT_L            (182),
		.PKT_ADDR_H                (175),
		.PKT_ADDR_L                (144),
		.PKT_TRANS_COMPRESSED_READ (176),
		.PKT_TRANS_POSTED          (177),
		.PKT_TRANS_WRITE           (178),
		.PKT_TRANS_READ            (179),
		.PKT_DATA_H                (127),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (143),
		.PKT_BYTEEN_L              (128),
		.PKT_SRC_ID_H              (202),
		.PKT_SRC_ID_L              (199),
		.PKT_DEST_ID_H             (206),
		.PKT_DEST_ID_L             (203),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (16),
		.ST_DATA_W                 (220),
		.AVS_BURSTCOUNT_W          (5),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) jtagdebug_descriptor_slave_agent (
		.clk                     (clk_0_clk_clk),                                               //             clk.clk
		.reset                   (nios2_gen2_0_reset_reset_bridge_in_reset_reset),              //       clk_reset.reset
		.m0_address              (jtagdebug_descriptor_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (jtagdebug_descriptor_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (jtagdebug_descriptor_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (jtagdebug_descriptor_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (jtagdebug_descriptor_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (jtagdebug_descriptor_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (jtagdebug_descriptor_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (jtagdebug_descriptor_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (jtagdebug_descriptor_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (jtagdebug_descriptor_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (jtagdebug_descriptor_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (jtagdebug_descriptor_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (jtagdebug_descriptor_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (jtagdebug_descriptor_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (jtagdebug_descriptor_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (jtagdebug_descriptor_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_011_src_ready),                                       //              cp.ready
		.cp_valid                (cmd_mux_011_src_valid),                                       //                .valid
		.cp_data                 (cmd_mux_011_src_data),                                        //                .data
		.cp_startofpacket        (cmd_mux_011_src_startofpacket),                               //                .startofpacket
		.cp_endofpacket          (cmd_mux_011_src_endofpacket),                                 //                .endofpacket
		.cp_channel              (cmd_mux_011_src_channel),                                     //                .channel
		.rf_sink_ready           (jtagdebug_descriptor_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (jtagdebug_descriptor_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (jtagdebug_descriptor_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (jtagdebug_descriptor_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (jtagdebug_descriptor_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (jtagdebug_descriptor_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (jtagdebug_descriptor_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (jtagdebug_descriptor_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (jtagdebug_descriptor_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (jtagdebug_descriptor_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_011_out_0_ready),                           // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_011_out_0_valid),                           //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_011_out_0_data),                            //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_011_out_0_error),                           //                .error
		.rdata_fifo_src_ready    (jtagdebug_descriptor_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (jtagdebug_descriptor_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (jtagdebug_descriptor_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                       //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                         //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (221),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) jtagdebug_descriptor_slave_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                               //       clk.clk
		.reset             (nios2_gen2_0_reset_reset_bridge_in_reset_reset),              // clk_reset.reset
		.in_data           (jtagdebug_descriptor_slave_agent_rf_source_data),             //        in.data
		.in_valid          (jtagdebug_descriptor_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (jtagdebug_descriptor_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (jtagdebug_descriptor_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (jtagdebug_descriptor_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (jtagdebug_descriptor_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (jtagdebug_descriptor_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (jtagdebug_descriptor_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (jtagdebug_descriptor_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (jtagdebug_descriptor_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                       // (terminated)
		.csr_read          (1'b0),                                                        // (terminated)
		.csr_write         (1'b0),                                                        // (terminated)
		.csr_readdata      (),                                                            // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                        // (terminated)
		.almost_full_data  (),                                                            // (terminated)
		.almost_empty_data (),                                                            // (terminated)
		.in_empty          (1'b0),                                                        // (terminated)
		.out_empty         (),                                                            // (terminated)
		.in_error          (1'b0),                                                        // (terminated)
		.out_error         (),                                                            // (terminated)
		.in_channel        (1'b0),                                                        // (terminated)
		.out_channel       ()                                                             // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (111),
		.PKT_ORI_BURST_SIZE_L      (109),
		.PKT_RESPONSE_STATUS_H     (108),
		.PKT_RESPONSE_STATUS_L     (107),
		.PKT_BURST_SIZE_H          (84),
		.PKT_BURST_SIZE_L          (82),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (89),
		.PKT_PROTECTION_H          (102),
		.PKT_PROTECTION_L          (100),
		.PKT_BURSTWRAP_H           (81),
		.PKT_BURSTWRAP_L           (79),
		.PKT_BYTE_CNT_H            (78),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (94),
		.PKT_SRC_ID_L              (91),
		.PKT_DEST_ID_H             (98),
		.PKT_DEST_ID_L             (95),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (16),
		.ST_DATA_W                 (112),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) onchip_memory2_0_s1_agent (
		.clk                     (clk_0_clk_clk),                                        //             clk.clk
		.reset                   (nios2_gen2_0_reset_reset_bridge_in_reset_reset),       //       clk_reset.reset
		.m0_address              (onchip_memory2_0_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (onchip_memory2_0_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (onchip_memory2_0_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (onchip_memory2_0_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (onchip_memory2_0_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (onchip_memory2_0_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (onchip_memory2_0_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (onchip_memory2_0_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (onchip_memory2_0_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (onchip_memory2_0_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (onchip_memory2_0_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (onchip_memory2_0_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (onchip_memory2_0_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (onchip_memory2_0_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (onchip_memory2_0_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (onchip_memory2_0_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_012_src_ready),                                //              cp.ready
		.cp_valid                (cmd_mux_012_src_valid),                                //                .valid
		.cp_data                 (cmd_mux_012_src_data),                                 //                .data
		.cp_startofpacket        (cmd_mux_012_src_startofpacket),                        //                .startofpacket
		.cp_endofpacket          (cmd_mux_012_src_endofpacket),                          //                .endofpacket
		.cp_channel              (cmd_mux_012_src_channel),                              //                .channel
		.rf_sink_ready           (onchip_memory2_0_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (onchip_memory2_0_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (onchip_memory2_0_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (onchip_memory2_0_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (onchip_memory2_0_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (onchip_memory2_0_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (onchip_memory2_0_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (onchip_memory2_0_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (onchip_memory2_0_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (onchip_memory2_0_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_012_out_0_ready),                    // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_012_out_0_valid),                    //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_012_out_0_data),                     //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_012_out_0_error),                    //                .error
		.rdata_fifo_src_ready    (onchip_memory2_0_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (onchip_memory2_0_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (onchip_memory2_0_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                  //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (113),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) onchip_memory2_0_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                        //       clk.clk
		.reset             (nios2_gen2_0_reset_reset_bridge_in_reset_reset),       // clk_reset.reset
		.in_data           (onchip_memory2_0_s1_agent_rf_source_data),             //        in.data
		.in_valid          (onchip_memory2_0_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (onchip_memory2_0_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (onchip_memory2_0_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (onchip_memory2_0_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (onchip_memory2_0_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (onchip_memory2_0_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (onchip_memory2_0_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (onchip_memory2_0_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (onchip_memory2_0_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                // (terminated)
		.csr_read          (1'b0),                                                 // (terminated)
		.csr_write         (1'b0),                                                 // (terminated)
		.csr_readdata      (),                                                     // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                 // (terminated)
		.almost_full_data  (),                                                     // (terminated)
		.almost_empty_data (),                                                     // (terminated)
		.in_empty          (1'b0),                                                 // (terminated)
		.out_empty         (),                                                     // (terminated)
		.in_error          (1'b0),                                                 // (terminated)
		.out_error         (),                                                     // (terminated)
		.in_channel        (1'b0),                                                 // (terminated)
		.out_channel       ()                                                      // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (111),
		.PKT_ORI_BURST_SIZE_L      (109),
		.PKT_RESPONSE_STATUS_H     (108),
		.PKT_RESPONSE_STATUS_L     (107),
		.PKT_BURST_SIZE_H          (84),
		.PKT_BURST_SIZE_L          (82),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (89),
		.PKT_PROTECTION_H          (102),
		.PKT_PROTECTION_L          (100),
		.PKT_BURSTWRAP_H           (81),
		.PKT_BURSTWRAP_L           (79),
		.PKT_BYTE_CNT_H            (78),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (94),
		.PKT_SRC_ID_L              (91),
		.PKT_DEST_ID_H             (98),
		.PKT_DEST_ID_L             (95),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (16),
		.ST_DATA_W                 (112),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) pio_0_s1_agent (
		.clk                     (clk_0_clk_clk),                                  //             clk.clk
		.reset                   (nios2_gen2_0_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (pio_0_s1_agent_m0_address),                      //              m0.address
		.m0_burstcount           (pio_0_s1_agent_m0_burstcount),                   //                .burstcount
		.m0_byteenable           (pio_0_s1_agent_m0_byteenable),                   //                .byteenable
		.m0_debugaccess          (pio_0_s1_agent_m0_debugaccess),                  //                .debugaccess
		.m0_lock                 (pio_0_s1_agent_m0_lock),                         //                .lock
		.m0_readdata             (pio_0_s1_agent_m0_readdata),                     //                .readdata
		.m0_readdatavalid        (pio_0_s1_agent_m0_readdatavalid),                //                .readdatavalid
		.m0_read                 (pio_0_s1_agent_m0_read),                         //                .read
		.m0_waitrequest          (pio_0_s1_agent_m0_waitrequest),                  //                .waitrequest
		.m0_writedata            (pio_0_s1_agent_m0_writedata),                    //                .writedata
		.m0_write                (pio_0_s1_agent_m0_write),                        //                .write
		.rp_endofpacket          (pio_0_s1_agent_rp_endofpacket),                  //              rp.endofpacket
		.rp_ready                (pio_0_s1_agent_rp_ready),                        //                .ready
		.rp_valid                (pio_0_s1_agent_rp_valid),                        //                .valid
		.rp_data                 (pio_0_s1_agent_rp_data),                         //                .data
		.rp_startofpacket        (pio_0_s1_agent_rp_startofpacket),                //                .startofpacket
		.cp_ready                (cmd_mux_013_src_ready),                          //              cp.ready
		.cp_valid                (cmd_mux_013_src_valid),                          //                .valid
		.cp_data                 (cmd_mux_013_src_data),                           //                .data
		.cp_startofpacket        (cmd_mux_013_src_startofpacket),                  //                .startofpacket
		.cp_endofpacket          (cmd_mux_013_src_endofpacket),                    //                .endofpacket
		.cp_channel              (cmd_mux_013_src_channel),                        //                .channel
		.rf_sink_ready           (pio_0_s1_agent_rsp_fifo_out_ready),              //         rf_sink.ready
		.rf_sink_valid           (pio_0_s1_agent_rsp_fifo_out_valid),              //                .valid
		.rf_sink_startofpacket   (pio_0_s1_agent_rsp_fifo_out_startofpacket),      //                .startofpacket
		.rf_sink_endofpacket     (pio_0_s1_agent_rsp_fifo_out_endofpacket),        //                .endofpacket
		.rf_sink_data            (pio_0_s1_agent_rsp_fifo_out_data),               //                .data
		.rf_source_ready         (pio_0_s1_agent_rf_source_ready),                 //       rf_source.ready
		.rf_source_valid         (pio_0_s1_agent_rf_source_valid),                 //                .valid
		.rf_source_startofpacket (pio_0_s1_agent_rf_source_startofpacket),         //                .startofpacket
		.rf_source_endofpacket   (pio_0_s1_agent_rf_source_endofpacket),           //                .endofpacket
		.rf_source_data          (pio_0_s1_agent_rf_source_data),                  //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_013_out_0_ready),              // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_013_out_0_valid),              //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_013_out_0_data),               //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_013_out_0_error),              //                .error
		.rdata_fifo_src_ready    (pio_0_s1_agent_rdata_fifo_src_ready),            //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (pio_0_s1_agent_rdata_fifo_src_valid),            //                .valid
		.rdata_fifo_src_data     (pio_0_s1_agent_rdata_fifo_src_data),             //                .data
		.m0_response             (2'b00),                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (113),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) pio_0_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                  //       clk.clk
		.reset             (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (pio_0_s1_agent_rf_source_data),                  //        in.data
		.in_valid          (pio_0_s1_agent_rf_source_valid),                 //          .valid
		.in_ready          (pio_0_s1_agent_rf_source_ready),                 //          .ready
		.in_startofpacket  (pio_0_s1_agent_rf_source_startofpacket),         //          .startofpacket
		.in_endofpacket    (pio_0_s1_agent_rf_source_endofpacket),           //          .endofpacket
		.out_data          (pio_0_s1_agent_rsp_fifo_out_data),               //       out.data
		.out_valid         (pio_0_s1_agent_rsp_fifo_out_valid),              //          .valid
		.out_ready         (pio_0_s1_agent_rsp_fifo_out_ready),              //          .ready
		.out_startofpacket (pio_0_s1_agent_rsp_fifo_out_startofpacket),      //          .startofpacket
		.out_endofpacket   (pio_0_s1_agent_rsp_fifo_out_endofpacket),        //          .endofpacket
		.csr_address       (2'b00),                                          // (terminated)
		.csr_read          (1'b0),                                           // (terminated)
		.csr_write         (1'b0),                                           // (terminated)
		.csr_readdata      (),                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),           // (terminated)
		.almost_full_data  (),                                               // (terminated)
		.almost_empty_data (),                                               // (terminated)
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.in_error          (1'b0),                                           // (terminated)
		.out_error         (),                                               // (terminated)
		.in_channel        (1'b0),                                           // (terminated)
		.out_channel       ()                                                // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (111),
		.PKT_ORI_BURST_SIZE_L      (109),
		.PKT_RESPONSE_STATUS_H     (108),
		.PKT_RESPONSE_STATUS_L     (107),
		.PKT_BURST_SIZE_H          (84),
		.PKT_BURST_SIZE_L          (82),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (89),
		.PKT_PROTECTION_H          (102),
		.PKT_PROTECTION_L          (100),
		.PKT_BURSTWRAP_H           (81),
		.PKT_BURSTWRAP_L           (79),
		.PKT_BYTE_CNT_H            (78),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (94),
		.PKT_SRC_ID_L              (91),
		.PKT_DEST_ID_H             (98),
		.PKT_DEST_ID_L             (95),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (16),
		.ST_DATA_W                 (112),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) pio_1_s1_agent (
		.clk                     (clk_0_clk_clk),                                  //             clk.clk
		.reset                   (nios2_gen2_0_reset_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (pio_1_s1_agent_m0_address),                      //              m0.address
		.m0_burstcount           (pio_1_s1_agent_m0_burstcount),                   //                .burstcount
		.m0_byteenable           (pio_1_s1_agent_m0_byteenable),                   //                .byteenable
		.m0_debugaccess          (pio_1_s1_agent_m0_debugaccess),                  //                .debugaccess
		.m0_lock                 (pio_1_s1_agent_m0_lock),                         //                .lock
		.m0_readdata             (pio_1_s1_agent_m0_readdata),                     //                .readdata
		.m0_readdatavalid        (pio_1_s1_agent_m0_readdatavalid),                //                .readdatavalid
		.m0_read                 (pio_1_s1_agent_m0_read),                         //                .read
		.m0_waitrequest          (pio_1_s1_agent_m0_waitrequest),                  //                .waitrequest
		.m0_writedata            (pio_1_s1_agent_m0_writedata),                    //                .writedata
		.m0_write                (pio_1_s1_agent_m0_write),                        //                .write
		.rp_endofpacket          (pio_1_s1_agent_rp_endofpacket),                  //              rp.endofpacket
		.rp_ready                (pio_1_s1_agent_rp_ready),                        //                .ready
		.rp_valid                (pio_1_s1_agent_rp_valid),                        //                .valid
		.rp_data                 (pio_1_s1_agent_rp_data),                         //                .data
		.rp_startofpacket        (pio_1_s1_agent_rp_startofpacket),                //                .startofpacket
		.cp_ready                (cmd_mux_014_src_ready),                          //              cp.ready
		.cp_valid                (cmd_mux_014_src_valid),                          //                .valid
		.cp_data                 (cmd_mux_014_src_data),                           //                .data
		.cp_startofpacket        (cmd_mux_014_src_startofpacket),                  //                .startofpacket
		.cp_endofpacket          (cmd_mux_014_src_endofpacket),                    //                .endofpacket
		.cp_channel              (cmd_mux_014_src_channel),                        //                .channel
		.rf_sink_ready           (pio_1_s1_agent_rsp_fifo_out_ready),              //         rf_sink.ready
		.rf_sink_valid           (pio_1_s1_agent_rsp_fifo_out_valid),              //                .valid
		.rf_sink_startofpacket   (pio_1_s1_agent_rsp_fifo_out_startofpacket),      //                .startofpacket
		.rf_sink_endofpacket     (pio_1_s1_agent_rsp_fifo_out_endofpacket),        //                .endofpacket
		.rf_sink_data            (pio_1_s1_agent_rsp_fifo_out_data),               //                .data
		.rf_source_ready         (pio_1_s1_agent_rf_source_ready),                 //       rf_source.ready
		.rf_source_valid         (pio_1_s1_agent_rf_source_valid),                 //                .valid
		.rf_source_startofpacket (pio_1_s1_agent_rf_source_startofpacket),         //                .startofpacket
		.rf_source_endofpacket   (pio_1_s1_agent_rf_source_endofpacket),           //                .endofpacket
		.rf_source_data          (pio_1_s1_agent_rf_source_data),                  //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_014_out_0_ready),              // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_014_out_0_valid),              //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_014_out_0_data),               //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_014_out_0_error),              //                .error
		.rdata_fifo_src_ready    (pio_1_s1_agent_rdata_fifo_src_ready),            //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (pio_1_s1_agent_rdata_fifo_src_valid),            //                .valid
		.rdata_fifo_src_data     (pio_1_s1_agent_rdata_fifo_src_data),             //                .data
		.m0_response             (2'b00),                                          //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                            //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (113),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) pio_1_s1_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                  //       clk.clk
		.reset             (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (pio_1_s1_agent_rf_source_data),                  //        in.data
		.in_valid          (pio_1_s1_agent_rf_source_valid),                 //          .valid
		.in_ready          (pio_1_s1_agent_rf_source_ready),                 //          .ready
		.in_startofpacket  (pio_1_s1_agent_rf_source_startofpacket),         //          .startofpacket
		.in_endofpacket    (pio_1_s1_agent_rf_source_endofpacket),           //          .endofpacket
		.out_data          (pio_1_s1_agent_rsp_fifo_out_data),               //       out.data
		.out_valid         (pio_1_s1_agent_rsp_fifo_out_valid),              //          .valid
		.out_ready         (pio_1_s1_agent_rsp_fifo_out_ready),              //          .ready
		.out_startofpacket (pio_1_s1_agent_rsp_fifo_out_startofpacket),      //          .startofpacket
		.out_endofpacket   (pio_1_s1_agent_rsp_fifo_out_endofpacket),        //          .endofpacket
		.csr_address       (2'b00),                                          // (terminated)
		.csr_read          (1'b0),                                           // (terminated)
		.csr_write         (1'b0),                                           // (terminated)
		.csr_readdata      (),                                               // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),           // (terminated)
		.almost_full_data  (),                                               // (terminated)
		.almost_empty_data (),                                               // (terminated)
		.in_empty          (1'b0),                                           // (terminated)
		.out_empty         (),                                               // (terminated)
		.in_error          (1'b0),                                           // (terminated)
		.out_error         (),                                               // (terminated)
		.in_channel        (1'b0),                                           // (terminated)
		.out_channel       ()                                                // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (111),
		.PKT_ORI_BURST_SIZE_L      (109),
		.PKT_RESPONSE_STATUS_H     (108),
		.PKT_RESPONSE_STATUS_L     (107),
		.PKT_BURST_SIZE_H          (84),
		.PKT_BURST_SIZE_L          (82),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (89),
		.PKT_PROTECTION_H          (102),
		.PKT_PROTECTION_L          (100),
		.PKT_BURSTWRAP_H           (81),
		.PKT_BURSTWRAP_L           (79),
		.PKT_BYTE_CNT_H            (78),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (94),
		.PKT_SRC_ID_L              (91),
		.PKT_DEST_ID_H             (98),
		.PKT_DEST_ID_L             (95),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (16),
		.ST_DATA_W                 (112),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0),
		.ECC_ENABLE                (0)
	) spi_0_spi_control_port_agent (
		.clk                     (clk_0_clk_clk),                                           //             clk.clk
		.reset                   (nios2_gen2_0_reset_reset_bridge_in_reset_reset),          //       clk_reset.reset
		.m0_address              (spi_0_spi_control_port_agent_m0_address),                 //              m0.address
		.m0_burstcount           (spi_0_spi_control_port_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (spi_0_spi_control_port_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (spi_0_spi_control_port_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (spi_0_spi_control_port_agent_m0_lock),                    //                .lock
		.m0_readdata             (spi_0_spi_control_port_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (spi_0_spi_control_port_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (spi_0_spi_control_port_agent_m0_read),                    //                .read
		.m0_waitrequest          (spi_0_spi_control_port_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (spi_0_spi_control_port_agent_m0_writedata),               //                .writedata
		.m0_write                (spi_0_spi_control_port_agent_m0_write),                   //                .write
		.rp_endofpacket          (spi_0_spi_control_port_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (spi_0_spi_control_port_agent_rp_ready),                   //                .ready
		.rp_valid                (spi_0_spi_control_port_agent_rp_valid),                   //                .valid
		.rp_data                 (spi_0_spi_control_port_agent_rp_data),                    //                .data
		.rp_startofpacket        (spi_0_spi_control_port_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_015_src_ready),                                   //              cp.ready
		.cp_valid                (cmd_mux_015_src_valid),                                   //                .valid
		.cp_data                 (cmd_mux_015_src_data),                                    //                .data
		.cp_startofpacket        (cmd_mux_015_src_startofpacket),                           //                .startofpacket
		.cp_endofpacket          (cmd_mux_015_src_endofpacket),                             //                .endofpacket
		.cp_channel              (cmd_mux_015_src_channel),                                 //                .channel
		.rf_sink_ready           (spi_0_spi_control_port_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (spi_0_spi_control_port_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (spi_0_spi_control_port_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (spi_0_spi_control_port_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (spi_0_spi_control_port_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (spi_0_spi_control_port_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (spi_0_spi_control_port_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (spi_0_spi_control_port_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (spi_0_spi_control_port_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (spi_0_spi_control_port_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (avalon_st_adapter_015_out_0_ready),                       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (avalon_st_adapter_015_out_0_valid),                       //                .valid
		.rdata_fifo_sink_data    (avalon_st_adapter_015_out_0_data),                        //                .data
		.rdata_fifo_sink_error   (avalon_st_adapter_015_out_0_error),                       //                .error
		.rdata_fifo_src_ready    (spi_0_spi_control_port_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (spi_0_spi_control_port_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (spi_0_spi_control_port_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                   //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                     //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (113),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) spi_0_spi_control_port_agent_rsp_fifo (
		.clk               (clk_0_clk_clk),                                           //       clk.clk
		.reset             (nios2_gen2_0_reset_reset_bridge_in_reset_reset),          // clk_reset.reset
		.in_data           (spi_0_spi_control_port_agent_rf_source_data),             //        in.data
		.in_valid          (spi_0_spi_control_port_agent_rf_source_valid),            //          .valid
		.in_ready          (spi_0_spi_control_port_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (spi_0_spi_control_port_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (spi_0_spi_control_port_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (spi_0_spi_control_port_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (spi_0_spi_control_port_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (spi_0_spi_control_port_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (spi_0_spi_control_port_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (spi_0_spi_control_port_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                   // (terminated)
		.csr_read          (1'b0),                                                    // (terminated)
		.csr_write         (1'b0),                                                    // (terminated)
		.csr_readdata      (),                                                        // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                    // (terminated)
		.almost_full_data  (),                                                        // (terminated)
		.almost_empty_data (),                                                        // (terminated)
		.in_empty          (1'b0),                                                    // (terminated)
		.out_empty         (),                                                        // (terminated)
		.in_error          (1'b0),                                                    // (terminated)
		.out_error         (),                                                        // (terminated)
		.in_channel        (1'b0),                                                    // (terminated)
		.out_channel       ()                                                         // (terminated)
	);

	nios_tester_mm_interconnect_0_router router (
		.sink_ready         (nios2_gen2_0_data_master_agent_cp_ready),         //      sink.ready
		.sink_valid         (nios2_gen2_0_data_master_agent_cp_valid),         //          .valid
		.sink_data          (nios2_gen2_0_data_master_agent_cp_data),          //          .data
		.sink_startofpacket (nios2_gen2_0_data_master_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (nios2_gen2_0_data_master_agent_cp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                   //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset),  // clk_reset.reset
		.src_ready          (router_src_ready),                                //       src.ready
		.src_valid          (router_src_valid),                                //          .valid
		.src_data           (router_src_data),                                 //          .data
		.src_channel        (router_src_channel),                              //          .channel
		.src_startofpacket  (router_src_startofpacket),                        //          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                           //          .endofpacket
	);

	nios_tester_mm_interconnect_0_router_001 router_001 (
		.sink_ready         (nios2_gen2_0_instruction_master_agent_cp_ready),         //      sink.ready
		.sink_valid         (nios2_gen2_0_instruction_master_agent_cp_valid),         //          .valid
		.sink_data          (nios2_gen2_0_instruction_master_agent_cp_data),          //          .data
		.sink_startofpacket (nios2_gen2_0_instruction_master_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (nios2_gen2_0_instruction_master_agent_cp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                          //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset),         // clk_reset.reset
		.src_ready          (router_001_src_ready),                                   //       src.ready
		.src_valid          (router_001_src_valid),                                   //          .valid
		.src_data           (router_001_src_data),                                    //          .data
		.src_channel        (router_001_src_channel),                                 //          .channel
		.src_startofpacket  (router_001_src_startofpacket),                           //          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                              //          .endofpacket
	);

	nios_tester_mm_interconnect_0_router_002 router_002 (
		.sink_ready         (audio_out_dma_mm_read_agent_cp_ready),           //      sink.ready
		.sink_valid         (audio_out_dma_mm_read_agent_cp_valid),           //          .valid
		.sink_data          (audio_out_dma_mm_read_agent_cp_data),            //          .data
		.sink_startofpacket (audio_out_dma_mm_read_agent_cp_startofpacket),   //          .startofpacket
		.sink_endofpacket   (audio_out_dma_mm_read_agent_cp_endofpacket),     //          .endofpacket
		.clk                (clk_0_clk_clk),                                  //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_002_src_ready),                           //       src.ready
		.src_valid          (router_002_src_valid),                           //          .valid
		.src_data           (router_002_src_data),                            //          .data
		.src_channel        (router_002_src_channel),                         //          .channel
		.src_startofpacket  (router_002_src_startofpacket),                   //          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                      //          .endofpacket
	);

	nios_tester_mm_interconnect_0_router_002 router_003 (
		.sink_ready         (audio_in_dma_mm_write_agent_cp_ready),           //      sink.ready
		.sink_valid         (audio_in_dma_mm_write_agent_cp_valid),           //          .valid
		.sink_data          (audio_in_dma_mm_write_agent_cp_data),            //          .data
		.sink_startofpacket (audio_in_dma_mm_write_agent_cp_startofpacket),   //          .startofpacket
		.sink_endofpacket   (audio_in_dma_mm_write_agent_cp_endofpacket),     //          .endofpacket
		.clk                (clk_0_clk_clk),                                  //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_003_src_ready),                           //       src.ready
		.src_valid          (router_003_src_valid),                           //          .valid
		.src_data           (router_003_src_data),                            //          .data
		.src_channel        (router_003_src_channel),                         //          .channel
		.src_startofpacket  (router_003_src_startofpacket),                   //          .startofpacket
		.src_endofpacket    (router_003_src_endofpacket)                      //          .endofpacket
	);

	nios_tester_mm_interconnect_0_router_004 router_004 (
		.sink_ready         (jtagdebug_mm_write_agent_cp_ready),              //      sink.ready
		.sink_valid         (jtagdebug_mm_write_agent_cp_valid),              //          .valid
		.sink_data          (jtagdebug_mm_write_agent_cp_data),               //          .data
		.sink_startofpacket (jtagdebug_mm_write_agent_cp_startofpacket),      //          .startofpacket
		.sink_endofpacket   (jtagdebug_mm_write_agent_cp_endofpacket),        //          .endofpacket
		.clk                (clk_0_clk_clk),                                  //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_004_src_ready),                           //       src.ready
		.src_valid          (router_004_src_valid),                           //          .valid
		.src_data           (router_004_src_data),                            //          .data
		.src_channel        (router_004_src_channel),                         //          .channel
		.src_startofpacket  (router_004_src_startofpacket),                   //          .startofpacket
		.src_endofpacket    (router_004_src_endofpacket)                      //          .endofpacket
	);

	nios_tester_mm_interconnect_0_router_005 router_005 (
		.sink_ready         (io_bridge_1_avalon_slave_0_agent_rp_ready),         //      sink.ready
		.sink_valid         (io_bridge_1_avalon_slave_0_agent_rp_valid),         //          .valid
		.sink_data          (io_bridge_1_avalon_slave_0_agent_rp_data),          //          .data
		.sink_startofpacket (io_bridge_1_avalon_slave_0_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (io_bridge_1_avalon_slave_0_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                     //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset),    // clk_reset.reset
		.src_ready          (router_005_src_ready),                              //       src.ready
		.src_valid          (router_005_src_valid),                              //          .valid
		.src_data           (router_005_src_data),                               //          .data
		.src_channel        (router_005_src_channel),                            //          .channel
		.src_startofpacket  (router_005_src_startofpacket),                      //          .startofpacket
		.src_endofpacket    (router_005_src_endofpacket)                         //          .endofpacket
	);

	nios_tester_mm_interconnect_0_router_006 router_006 (
		.sink_ready         (avalon2mem_0_avalon_slave_0_agent_rp_ready),         //      sink.ready
		.sink_valid         (avalon2mem_0_avalon_slave_0_agent_rp_valid),         //          .valid
		.sink_data          (avalon2mem_0_avalon_slave_0_agent_rp_data),          //          .data
		.sink_startofpacket (avalon2mem_0_avalon_slave_0_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (avalon2mem_0_avalon_slave_0_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                      //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset),     // clk_reset.reset
		.src_ready          (router_006_src_ready),                               //       src.ready
		.src_valid          (router_006_src_valid),                               //          .valid
		.src_data           (router_006_src_data),                                //          .data
		.src_channel        (router_006_src_channel),                             //          .channel
		.src_startofpacket  (router_006_src_startofpacket),                       //          .startofpacket
		.src_endofpacket    (router_006_src_endofpacket)                          //          .endofpacket
	);

	nios_tester_mm_interconnect_0_router_007 router_007 (
		.sink_ready         (jtag_0_avalon_slave_0_agent_rp_ready),           //      sink.ready
		.sink_valid         (jtag_0_avalon_slave_0_agent_rp_valid),           //          .valid
		.sink_data          (jtag_0_avalon_slave_0_agent_rp_data),            //          .data
		.sink_startofpacket (jtag_0_avalon_slave_0_agent_rp_startofpacket),   //          .startofpacket
		.sink_endofpacket   (jtag_0_avalon_slave_0_agent_rp_endofpacket),     //          .endofpacket
		.clk                (clk_0_clk_clk),                                  //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_007_src_ready),                           //       src.ready
		.src_valid          (router_007_src_valid),                           //          .valid
		.src_data           (router_007_src_data),                            //          .data
		.src_channel        (router_007_src_channel),                         //          .channel
		.src_startofpacket  (router_007_src_startofpacket),                   //          .startofpacket
		.src_endofpacket    (router_007_src_endofpacket)                      //          .endofpacket
	);

	nios_tester_mm_interconnect_0_router_007 router_008 (
		.sink_ready         (jtag_1_avalon_slave_0_agent_rp_ready),           //      sink.ready
		.sink_valid         (jtag_1_avalon_slave_0_agent_rp_valid),           //          .valid
		.sink_data          (jtag_1_avalon_slave_0_agent_rp_data),            //          .data
		.sink_startofpacket (jtag_1_avalon_slave_0_agent_rp_startofpacket),   //          .startofpacket
		.sink_endofpacket   (jtag_1_avalon_slave_0_agent_rp_endofpacket),     //          .endofpacket
		.clk                (clk_0_clk_clk),                                  //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_008_src_ready),                           //       src.ready
		.src_valid          (router_008_src_valid),                           //          .valid
		.src_data           (router_008_src_data),                            //          .data
		.src_channel        (router_008_src_channel),                         //          .channel
		.src_startofpacket  (router_008_src_startofpacket),                   //          .startofpacket
		.src_endofpacket    (router_008_src_endofpacket)                      //          .endofpacket
	);

	nios_tester_mm_interconnect_0_router_005 router_009 (
		.sink_ready         (io_bridge_0_avalon_slave_0_agent_rp_ready),         //      sink.ready
		.sink_valid         (io_bridge_0_avalon_slave_0_agent_rp_valid),         //          .valid
		.sink_data          (io_bridge_0_avalon_slave_0_agent_rp_data),          //          .data
		.sink_startofpacket (io_bridge_0_avalon_slave_0_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (io_bridge_0_avalon_slave_0_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                     //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset),    // clk_reset.reset
		.src_ready          (router_009_src_ready),                              //       src.ready
		.src_valid          (router_009_src_valid),                              //          .valid
		.src_data           (router_009_src_data),                               //          .data
		.src_channel        (router_009_src_channel),                            //          .channel
		.src_startofpacket  (router_009_src_startofpacket),                      //          .startofpacket
		.src_endofpacket    (router_009_src_endofpacket)                         //          .endofpacket
	);

	nios_tester_mm_interconnect_0_router_007 router_010 (
		.sink_ready         (audio_out_dma_csr_agent_rp_ready),               //      sink.ready
		.sink_valid         (audio_out_dma_csr_agent_rp_valid),               //          .valid
		.sink_data          (audio_out_dma_csr_agent_rp_data),                //          .data
		.sink_startofpacket (audio_out_dma_csr_agent_rp_startofpacket),       //          .startofpacket
		.sink_endofpacket   (audio_out_dma_csr_agent_rp_endofpacket),         //          .endofpacket
		.clk                (clk_0_clk_clk),                                  //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_010_src_ready),                           //       src.ready
		.src_valid          (router_010_src_valid),                           //          .valid
		.src_data           (router_010_src_data),                            //          .data
		.src_channel        (router_010_src_channel),                         //          .channel
		.src_startofpacket  (router_010_src_startofpacket),                   //          .startofpacket
		.src_endofpacket    (router_010_src_endofpacket)                      //          .endofpacket
	);

	nios_tester_mm_interconnect_0_router_007 router_011 (
		.sink_ready         (audio_in_dma_csr_agent_rp_ready),                //      sink.ready
		.sink_valid         (audio_in_dma_csr_agent_rp_valid),                //          .valid
		.sink_data          (audio_in_dma_csr_agent_rp_data),                 //          .data
		.sink_startofpacket (audio_in_dma_csr_agent_rp_startofpacket),        //          .startofpacket
		.sink_endofpacket   (audio_in_dma_csr_agent_rp_endofpacket),          //          .endofpacket
		.clk                (clk_0_clk_clk),                                  //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_011_src_ready),                           //       src.ready
		.src_valid          (router_011_src_valid),                           //          .valid
		.src_data           (router_011_src_data),                            //          .data
		.src_channel        (router_011_src_channel),                         //          .channel
		.src_startofpacket  (router_011_src_startofpacket),                   //          .startofpacket
		.src_endofpacket    (router_011_src_endofpacket)                      //          .endofpacket
	);

	nios_tester_mm_interconnect_0_router_007 router_012 (
		.sink_ready         (jtagdebug_csr_agent_rp_ready),                   //      sink.ready
		.sink_valid         (jtagdebug_csr_agent_rp_valid),                   //          .valid
		.sink_data          (jtagdebug_csr_agent_rp_data),                    //          .data
		.sink_startofpacket (jtagdebug_csr_agent_rp_startofpacket),           //          .startofpacket
		.sink_endofpacket   (jtagdebug_csr_agent_rp_endofpacket),             //          .endofpacket
		.clk                (clk_0_clk_clk),                                  //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_012_src_ready),                           //       src.ready
		.src_valid          (router_012_src_valid),                           //          .valid
		.src_data           (router_012_src_data),                            //          .data
		.src_channel        (router_012_src_channel),                         //          .channel
		.src_startofpacket  (router_012_src_startofpacket),                   //          .startofpacket
		.src_endofpacket    (router_012_src_endofpacket)                      //          .endofpacket
	);

	nios_tester_mm_interconnect_0_router_013 router_013 (
		.sink_ready         (nios2_gen2_0_debug_mem_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (nios2_gen2_0_debug_mem_slave_agent_rp_valid),         //          .valid
		.sink_data          (nios2_gen2_0_debug_mem_slave_agent_rp_data),          //          .data
		.sink_startofpacket (nios2_gen2_0_debug_mem_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (nios2_gen2_0_debug_mem_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                       //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset),      // clk_reset.reset
		.src_ready          (router_013_src_ready),                                //       src.ready
		.src_valid          (router_013_src_valid),                                //          .valid
		.src_data           (router_013_src_data),                                 //          .data
		.src_channel        (router_013_src_channel),                              //          .channel
		.src_startofpacket  (router_013_src_startofpacket),                        //          .startofpacket
		.src_endofpacket    (router_013_src_endofpacket)                           //          .endofpacket
	);

	nios_tester_mm_interconnect_0_router_014 router_014 (
		.sink_ready         (audio_out_dma_descriptor_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (audio_out_dma_descriptor_slave_agent_rp_valid),         //          .valid
		.sink_data          (audio_out_dma_descriptor_slave_agent_rp_data),          //          .data
		.sink_startofpacket (audio_out_dma_descriptor_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (audio_out_dma_descriptor_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                         //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset),        // clk_reset.reset
		.src_ready          (router_014_src_ready),                                  //       src.ready
		.src_valid          (router_014_src_valid),                                  //          .valid
		.src_data           (router_014_src_data),                                   //          .data
		.src_channel        (router_014_src_channel),                                //          .channel
		.src_startofpacket  (router_014_src_startofpacket),                          //          .startofpacket
		.src_endofpacket    (router_014_src_endofpacket)                             //          .endofpacket
	);

	nios_tester_mm_interconnect_0_router_014 router_015 (
		.sink_ready         (audio_in_dma_descriptor_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (audio_in_dma_descriptor_slave_agent_rp_valid),         //          .valid
		.sink_data          (audio_in_dma_descriptor_slave_agent_rp_data),          //          .data
		.sink_startofpacket (audio_in_dma_descriptor_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (audio_in_dma_descriptor_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                        //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset),       // clk_reset.reset
		.src_ready          (router_015_src_ready),                                 //       src.ready
		.src_valid          (router_015_src_valid),                                 //          .valid
		.src_data           (router_015_src_data),                                  //          .data
		.src_channel        (router_015_src_channel),                               //          .channel
		.src_startofpacket  (router_015_src_startofpacket),                         //          .startofpacket
		.src_endofpacket    (router_015_src_endofpacket)                            //          .endofpacket
	);

	nios_tester_mm_interconnect_0_router_014 router_016 (
		.sink_ready         (jtagdebug_descriptor_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (jtagdebug_descriptor_slave_agent_rp_valid),         //          .valid
		.sink_data          (jtagdebug_descriptor_slave_agent_rp_data),          //          .data
		.sink_startofpacket (jtagdebug_descriptor_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (jtagdebug_descriptor_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (clk_0_clk_clk),                                     //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset),    // clk_reset.reset
		.src_ready          (router_016_src_ready),                              //       src.ready
		.src_valid          (router_016_src_valid),                              //          .valid
		.src_data           (router_016_src_data),                               //          .data
		.src_channel        (router_016_src_channel),                            //          .channel
		.src_startofpacket  (router_016_src_startofpacket),                      //          .startofpacket
		.src_endofpacket    (router_016_src_endofpacket)                         //          .endofpacket
	);

	nios_tester_mm_interconnect_0_router_013 router_017 (
		.sink_ready         (onchip_memory2_0_s1_agent_rp_ready),             //      sink.ready
		.sink_valid         (onchip_memory2_0_s1_agent_rp_valid),             //          .valid
		.sink_data          (onchip_memory2_0_s1_agent_rp_data),              //          .data
		.sink_startofpacket (onchip_memory2_0_s1_agent_rp_startofpacket),     //          .startofpacket
		.sink_endofpacket   (onchip_memory2_0_s1_agent_rp_endofpacket),       //          .endofpacket
		.clk                (clk_0_clk_clk),                                  //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_017_src_ready),                           //       src.ready
		.src_valid          (router_017_src_valid),                           //          .valid
		.src_data           (router_017_src_data),                            //          .data
		.src_channel        (router_017_src_channel),                         //          .channel
		.src_startofpacket  (router_017_src_startofpacket),                   //          .startofpacket
		.src_endofpacket    (router_017_src_endofpacket)                      //          .endofpacket
	);

	nios_tester_mm_interconnect_0_router_007 router_018 (
		.sink_ready         (pio_0_s1_agent_rp_ready),                        //      sink.ready
		.sink_valid         (pio_0_s1_agent_rp_valid),                        //          .valid
		.sink_data          (pio_0_s1_agent_rp_data),                         //          .data
		.sink_startofpacket (pio_0_s1_agent_rp_startofpacket),                //          .startofpacket
		.sink_endofpacket   (pio_0_s1_agent_rp_endofpacket),                  //          .endofpacket
		.clk                (clk_0_clk_clk),                                  //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_018_src_ready),                           //       src.ready
		.src_valid          (router_018_src_valid),                           //          .valid
		.src_data           (router_018_src_data),                            //          .data
		.src_channel        (router_018_src_channel),                         //          .channel
		.src_startofpacket  (router_018_src_startofpacket),                   //          .startofpacket
		.src_endofpacket    (router_018_src_endofpacket)                      //          .endofpacket
	);

	nios_tester_mm_interconnect_0_router_007 router_019 (
		.sink_ready         (pio_1_s1_agent_rp_ready),                        //      sink.ready
		.sink_valid         (pio_1_s1_agent_rp_valid),                        //          .valid
		.sink_data          (pio_1_s1_agent_rp_data),                         //          .data
		.sink_startofpacket (pio_1_s1_agent_rp_startofpacket),                //          .startofpacket
		.sink_endofpacket   (pio_1_s1_agent_rp_endofpacket),                  //          .endofpacket
		.clk                (clk_0_clk_clk),                                  //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_019_src_ready),                           //       src.ready
		.src_valid          (router_019_src_valid),                           //          .valid
		.src_data           (router_019_src_data),                            //          .data
		.src_channel        (router_019_src_channel),                         //          .channel
		.src_startofpacket  (router_019_src_startofpacket),                   //          .startofpacket
		.src_endofpacket    (router_019_src_endofpacket)                      //          .endofpacket
	);

	nios_tester_mm_interconnect_0_router_007 router_020 (
		.sink_ready         (spi_0_spi_control_port_agent_rp_ready),          //      sink.ready
		.sink_valid         (spi_0_spi_control_port_agent_rp_valid),          //          .valid
		.sink_data          (spi_0_spi_control_port_agent_rp_data),           //          .data
		.sink_startofpacket (spi_0_spi_control_port_agent_rp_startofpacket),  //          .startofpacket
		.sink_endofpacket   (spi_0_spi_control_port_agent_rp_endofpacket),    //          .endofpacket
		.clk                (clk_0_clk_clk),                                  //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_020_src_ready),                           //       src.ready
		.src_valid          (router_020_src_valid),                           //          .valid
		.src_data           (router_020_src_data),                            //          .data
		.src_channel        (router_020_src_channel),                         //          .channel
		.src_startofpacket  (router_020_src_startofpacket),                   //          .startofpacket
		.src_endofpacket    (router_020_src_endofpacket)                      //          .endofpacket
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (40),
		.PKT_ADDR_L                (9),
		.PKT_BEGIN_BURST           (62),
		.PKT_BYTE_CNT_H            (51),
		.PKT_BYTE_CNT_L            (47),
		.PKT_BYTEEN_H              (8),
		.PKT_BYTEEN_L              (8),
		.PKT_BURST_SIZE_H          (57),
		.PKT_BURST_SIZE_L          (55),
		.PKT_BURST_TYPE_H          (59),
		.PKT_BURST_TYPE_L          (58),
		.PKT_BURSTWRAP_H           (54),
		.PKT_BURSTWRAP_L           (52),
		.PKT_TRANS_COMPRESSED_READ (41),
		.PKT_TRANS_WRITE           (43),
		.PKT_TRANS_READ            (44),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (85),
		.ST_CHANNEL_W              (16),
		.OUT_BYTE_CNT_H            (47),
		.OUT_BURSTWRAP_H           (54),
		.COMPRESSED_READ_SUPPORT   (0),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (7),
		.BURSTWRAP_CONST_VALUE     (7),
		.ADAPTER_VERSION           ("13.1")
	) io_bridge_1_avalon_slave_0_burst_adapter (
		.clk                   (clk_0_clk_clk),                                                  //       cr0.clk
		.reset                 (nios2_gen2_0_reset_reset_bridge_in_reset_reset),                 // cr0_reset.reset
		.sink0_valid           (cmd_mux_src_valid),                                              //     sink0.valid
		.sink0_data            (cmd_mux_src_data),                                               //          .data
		.sink0_channel         (cmd_mux_src_channel),                                            //          .channel
		.sink0_startofpacket   (cmd_mux_src_startofpacket),                                      //          .startofpacket
		.sink0_endofpacket     (cmd_mux_src_endofpacket),                                        //          .endofpacket
		.sink0_ready           (cmd_mux_src_ready),                                              //          .ready
		.source0_valid         (io_bridge_1_avalon_slave_0_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (io_bridge_1_avalon_slave_0_burst_adapter_source0_data),          //          .data
		.source0_channel       (io_bridge_1_avalon_slave_0_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (io_bridge_1_avalon_slave_0_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (io_bridge_1_avalon_slave_0_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (io_bridge_1_avalon_slave_0_burst_adapter_source0_ready)          //          .ready
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (40),
		.PKT_ADDR_L                (9),
		.PKT_BEGIN_BURST           (62),
		.PKT_BYTE_CNT_H            (51),
		.PKT_BYTE_CNT_L            (47),
		.PKT_BYTEEN_H              (8),
		.PKT_BYTEEN_L              (8),
		.PKT_BURST_SIZE_H          (57),
		.PKT_BURST_SIZE_L          (55),
		.PKT_BURST_TYPE_H          (59),
		.PKT_BURST_TYPE_L          (58),
		.PKT_BURSTWRAP_H           (54),
		.PKT_BURSTWRAP_L           (52),
		.PKT_TRANS_COMPRESSED_READ (41),
		.PKT_TRANS_WRITE           (43),
		.PKT_TRANS_READ            (44),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (85),
		.ST_CHANNEL_W              (16),
		.OUT_BYTE_CNT_H            (47),
		.OUT_BURSTWRAP_H           (54),
		.COMPRESSED_READ_SUPPORT   (0),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (7),
		.BURSTWRAP_CONST_VALUE     (7),
		.ADAPTER_VERSION           ("13.1")
	) io_bridge_0_avalon_slave_0_burst_adapter (
		.clk                   (clk_0_clk_clk),                                                  //       cr0.clk
		.reset                 (nios2_gen2_0_reset_reset_bridge_in_reset_reset),                 // cr0_reset.reset
		.sink0_valid           (cmd_mux_004_src_valid),                                          //     sink0.valid
		.sink0_data            (cmd_mux_004_src_data),                                           //          .data
		.sink0_channel         (cmd_mux_004_src_channel),                                        //          .channel
		.sink0_startofpacket   (cmd_mux_004_src_startofpacket),                                  //          .startofpacket
		.sink0_endofpacket     (cmd_mux_004_src_endofpacket),                                    //          .endofpacket
		.sink0_ready           (cmd_mux_004_src_ready),                                          //          .ready
		.source0_valid         (io_bridge_0_avalon_slave_0_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (io_bridge_0_avalon_slave_0_burst_adapter_source0_data),          //          .data
		.source0_channel       (io_bridge_0_avalon_slave_0_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (io_bridge_0_avalon_slave_0_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (io_bridge_0_avalon_slave_0_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (io_bridge_0_avalon_slave_0_burst_adapter_source0_ready)          //          .ready
	);

	nios_tester_mm_interconnect_0_cmd_demux cmd_demux (
		.clk                 (clk_0_clk_clk),                                  //       clk.clk
		.reset               (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready          (router_src_ready),                               //      sink.ready
		.sink_channel        (router_src_channel),                             //          .channel
		.sink_data           (router_src_data),                                //          .data
		.sink_startofpacket  (router_src_startofpacket),                       //          .startofpacket
		.sink_endofpacket    (router_src_endofpacket),                         //          .endofpacket
		.sink_valid          (router_src_valid),                               //          .valid
		.src0_ready          (cmd_demux_src0_ready),                           //      src0.ready
		.src0_valid          (cmd_demux_src0_valid),                           //          .valid
		.src0_data           (cmd_demux_src0_data),                            //          .data
		.src0_channel        (cmd_demux_src0_channel),                         //          .channel
		.src0_startofpacket  (cmd_demux_src0_startofpacket),                   //          .startofpacket
		.src0_endofpacket    (cmd_demux_src0_endofpacket),                     //          .endofpacket
		.src1_ready          (cmd_demux_src1_ready),                           //      src1.ready
		.src1_valid          (cmd_demux_src1_valid),                           //          .valid
		.src1_data           (cmd_demux_src1_data),                            //          .data
		.src1_channel        (cmd_demux_src1_channel),                         //          .channel
		.src1_startofpacket  (cmd_demux_src1_startofpacket),                   //          .startofpacket
		.src1_endofpacket    (cmd_demux_src1_endofpacket),                     //          .endofpacket
		.src2_ready          (cmd_demux_src2_ready),                           //      src2.ready
		.src2_valid          (cmd_demux_src2_valid),                           //          .valid
		.src2_data           (cmd_demux_src2_data),                            //          .data
		.src2_channel        (cmd_demux_src2_channel),                         //          .channel
		.src2_startofpacket  (cmd_demux_src2_startofpacket),                   //          .startofpacket
		.src2_endofpacket    (cmd_demux_src2_endofpacket),                     //          .endofpacket
		.src3_ready          (cmd_demux_src3_ready),                           //      src3.ready
		.src3_valid          (cmd_demux_src3_valid),                           //          .valid
		.src3_data           (cmd_demux_src3_data),                            //          .data
		.src3_channel        (cmd_demux_src3_channel),                         //          .channel
		.src3_startofpacket  (cmd_demux_src3_startofpacket),                   //          .startofpacket
		.src3_endofpacket    (cmd_demux_src3_endofpacket),                     //          .endofpacket
		.src4_ready          (cmd_demux_src4_ready),                           //      src4.ready
		.src4_valid          (cmd_demux_src4_valid),                           //          .valid
		.src4_data           (cmd_demux_src4_data),                            //          .data
		.src4_channel        (cmd_demux_src4_channel),                         //          .channel
		.src4_startofpacket  (cmd_demux_src4_startofpacket),                   //          .startofpacket
		.src4_endofpacket    (cmd_demux_src4_endofpacket),                     //          .endofpacket
		.src5_ready          (cmd_demux_src5_ready),                           //      src5.ready
		.src5_valid          (cmd_demux_src5_valid),                           //          .valid
		.src5_data           (cmd_demux_src5_data),                            //          .data
		.src5_channel        (cmd_demux_src5_channel),                         //          .channel
		.src5_startofpacket  (cmd_demux_src5_startofpacket),                   //          .startofpacket
		.src5_endofpacket    (cmd_demux_src5_endofpacket),                     //          .endofpacket
		.src6_ready          (cmd_demux_src6_ready),                           //      src6.ready
		.src6_valid          (cmd_demux_src6_valid),                           //          .valid
		.src6_data           (cmd_demux_src6_data),                            //          .data
		.src6_channel        (cmd_demux_src6_channel),                         //          .channel
		.src6_startofpacket  (cmd_demux_src6_startofpacket),                   //          .startofpacket
		.src6_endofpacket    (cmd_demux_src6_endofpacket),                     //          .endofpacket
		.src7_ready          (cmd_demux_src7_ready),                           //      src7.ready
		.src7_valid          (cmd_demux_src7_valid),                           //          .valid
		.src7_data           (cmd_demux_src7_data),                            //          .data
		.src7_channel        (cmd_demux_src7_channel),                         //          .channel
		.src7_startofpacket  (cmd_demux_src7_startofpacket),                   //          .startofpacket
		.src7_endofpacket    (cmd_demux_src7_endofpacket),                     //          .endofpacket
		.src8_ready          (cmd_demux_src8_ready),                           //      src8.ready
		.src8_valid          (cmd_demux_src8_valid),                           //          .valid
		.src8_data           (cmd_demux_src8_data),                            //          .data
		.src8_channel        (cmd_demux_src8_channel),                         //          .channel
		.src8_startofpacket  (cmd_demux_src8_startofpacket),                   //          .startofpacket
		.src8_endofpacket    (cmd_demux_src8_endofpacket),                     //          .endofpacket
		.src9_ready          (cmd_demux_src9_ready),                           //      src9.ready
		.src9_valid          (cmd_demux_src9_valid),                           //          .valid
		.src9_data           (cmd_demux_src9_data),                            //          .data
		.src9_channel        (cmd_demux_src9_channel),                         //          .channel
		.src9_startofpacket  (cmd_demux_src9_startofpacket),                   //          .startofpacket
		.src9_endofpacket    (cmd_demux_src9_endofpacket),                     //          .endofpacket
		.src10_ready         (cmd_demux_src10_ready),                          //     src10.ready
		.src10_valid         (cmd_demux_src10_valid),                          //          .valid
		.src10_data          (cmd_demux_src10_data),                           //          .data
		.src10_channel       (cmd_demux_src10_channel),                        //          .channel
		.src10_startofpacket (cmd_demux_src10_startofpacket),                  //          .startofpacket
		.src10_endofpacket   (cmd_demux_src10_endofpacket),                    //          .endofpacket
		.src11_ready         (cmd_demux_src11_ready),                          //     src11.ready
		.src11_valid         (cmd_demux_src11_valid),                          //          .valid
		.src11_data          (cmd_demux_src11_data),                           //          .data
		.src11_channel       (cmd_demux_src11_channel),                        //          .channel
		.src11_startofpacket (cmd_demux_src11_startofpacket),                  //          .startofpacket
		.src11_endofpacket   (cmd_demux_src11_endofpacket),                    //          .endofpacket
		.src12_ready         (cmd_demux_src12_ready),                          //     src12.ready
		.src12_valid         (cmd_demux_src12_valid),                          //          .valid
		.src12_data          (cmd_demux_src12_data),                           //          .data
		.src12_channel       (cmd_demux_src12_channel),                        //          .channel
		.src12_startofpacket (cmd_demux_src12_startofpacket),                  //          .startofpacket
		.src12_endofpacket   (cmd_demux_src12_endofpacket),                    //          .endofpacket
		.src13_ready         (cmd_demux_src13_ready),                          //     src13.ready
		.src13_valid         (cmd_demux_src13_valid),                          //          .valid
		.src13_data          (cmd_demux_src13_data),                           //          .data
		.src13_channel       (cmd_demux_src13_channel),                        //          .channel
		.src13_startofpacket (cmd_demux_src13_startofpacket),                  //          .startofpacket
		.src13_endofpacket   (cmd_demux_src13_endofpacket),                    //          .endofpacket
		.src14_ready         (cmd_demux_src14_ready),                          //     src14.ready
		.src14_valid         (cmd_demux_src14_valid),                          //          .valid
		.src14_data          (cmd_demux_src14_data),                           //          .data
		.src14_channel       (cmd_demux_src14_channel),                        //          .channel
		.src14_startofpacket (cmd_demux_src14_startofpacket),                  //          .startofpacket
		.src14_endofpacket   (cmd_demux_src14_endofpacket),                    //          .endofpacket
		.src15_ready         (cmd_demux_src15_ready),                          //     src15.ready
		.src15_valid         (cmd_demux_src15_valid),                          //          .valid
		.src15_data          (cmd_demux_src15_data),                           //          .data
		.src15_channel       (cmd_demux_src15_channel),                        //          .channel
		.src15_startofpacket (cmd_demux_src15_startofpacket),                  //          .startofpacket
		.src15_endofpacket   (cmd_demux_src15_endofpacket)                     //          .endofpacket
	);

	nios_tester_mm_interconnect_0_cmd_demux_001 cmd_demux_001 (
		.clk                (clk_0_clk_clk),                                  //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_001_src_ready),                           //      sink.ready
		.sink_channel       (router_001_src_channel),                         //          .channel
		.sink_data          (router_001_src_data),                            //          .data
		.sink_startofpacket (router_001_src_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (router_001_src_endofpacket),                     //          .endofpacket
		.sink_valid         (router_001_src_valid),                           //          .valid
		.src0_ready         (cmd_demux_001_src0_ready),                       //      src0.ready
		.src0_valid         (cmd_demux_001_src0_valid),                       //          .valid
		.src0_data          (cmd_demux_001_src0_data),                        //          .data
		.src0_channel       (cmd_demux_001_src0_channel),                     //          .channel
		.src0_startofpacket (cmd_demux_001_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (cmd_demux_001_src0_endofpacket),                 //          .endofpacket
		.src1_ready         (cmd_demux_001_src1_ready),                       //      src1.ready
		.src1_valid         (cmd_demux_001_src1_valid),                       //          .valid
		.src1_data          (cmd_demux_001_src1_data),                        //          .data
		.src1_channel       (cmd_demux_001_src1_channel),                     //          .channel
		.src1_startofpacket (cmd_demux_001_src1_startofpacket),               //          .startofpacket
		.src1_endofpacket   (cmd_demux_001_src1_endofpacket),                 //          .endofpacket
		.src2_ready         (cmd_demux_001_src2_ready),                       //      src2.ready
		.src2_valid         (cmd_demux_001_src2_valid),                       //          .valid
		.src2_data          (cmd_demux_001_src2_data),                        //          .data
		.src2_channel       (cmd_demux_001_src2_channel),                     //          .channel
		.src2_startofpacket (cmd_demux_001_src2_startofpacket),               //          .startofpacket
		.src2_endofpacket   (cmd_demux_001_src2_endofpacket)                  //          .endofpacket
	);

	nios_tester_mm_interconnect_0_cmd_demux_002 cmd_demux_002 (
		.clk                (clk_0_clk_clk),                                  //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_002_src_ready),                           //      sink.ready
		.sink_channel       (router_002_src_channel),                         //          .channel
		.sink_data          (router_002_src_data),                            //          .data
		.sink_startofpacket (router_002_src_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (router_002_src_endofpacket),                     //          .endofpacket
		.sink_valid         (router_002_src_valid),                           //          .valid
		.src0_ready         (cmd_demux_002_src0_ready),                       //      src0.ready
		.src0_valid         (cmd_demux_002_src0_valid),                       //          .valid
		.src0_data          (cmd_demux_002_src0_data),                        //          .data
		.src0_channel       (cmd_demux_002_src0_channel),                     //          .channel
		.src0_startofpacket (cmd_demux_002_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (cmd_demux_002_src0_endofpacket)                  //          .endofpacket
	);

	nios_tester_mm_interconnect_0_cmd_demux_002 cmd_demux_003 (
		.clk                (clk_0_clk_clk),                                  //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_003_src_ready),                           //      sink.ready
		.sink_channel       (router_003_src_channel),                         //          .channel
		.sink_data          (router_003_src_data),                            //          .data
		.sink_startofpacket (router_003_src_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (router_003_src_endofpacket),                     //          .endofpacket
		.sink_valid         (router_003_src_valid),                           //          .valid
		.src0_ready         (cmd_demux_003_src0_ready),                       //      src0.ready
		.src0_valid         (cmd_demux_003_src0_valid),                       //          .valid
		.src0_data          (cmd_demux_003_src0_data),                        //          .data
		.src0_channel       (cmd_demux_003_src0_channel),                     //          .channel
		.src0_startofpacket (cmd_demux_003_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (cmd_demux_003_src0_endofpacket)                  //          .endofpacket
	);

	nios_tester_mm_interconnect_0_cmd_demux_004 cmd_demux_004 (
		.clk                (clk_0_clk_clk),                                  //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_004_src_ready),                           //      sink.ready
		.sink_channel       (router_004_src_channel),                         //          .channel
		.sink_data          (router_004_src_data),                            //          .data
		.sink_startofpacket (router_004_src_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (router_004_src_endofpacket),                     //          .endofpacket
		.sink_valid         (router_004_src_valid),                           //          .valid
		.src0_ready         (cmd_demux_004_src0_ready),                       //      src0.ready
		.src0_valid         (cmd_demux_004_src0_valid),                       //          .valid
		.src0_data          (cmd_demux_004_src0_data),                        //          .data
		.src0_channel       (cmd_demux_004_src0_channel),                     //          .channel
		.src0_startofpacket (cmd_demux_004_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (cmd_demux_004_src0_endofpacket)                  //          .endofpacket
	);

	nios_tester_mm_interconnect_0_cmd_mux cmd_mux (
		.clk                 (clk_0_clk_clk),                                                                              //       clk.clk
		.reset               (nios2_gen2_0_reset_reset_bridge_in_reset_reset),                                             // clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                                                                          //       src.ready
		.src_valid           (cmd_mux_src_valid),                                                                          //          .valid
		.src_data            (cmd_mux_src_data),                                                                           //          .data
		.src_channel         (cmd_mux_src_channel),                                                                        //          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                                                                  //          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                                                                    //          .endofpacket
		.sink0_ready         (nios2_gen2_0_data_master_to_io_bridge_1_avalon_slave_0_cmd_width_adapter_src_ready),         //     sink0.ready
		.sink0_valid         (nios2_gen2_0_data_master_to_io_bridge_1_avalon_slave_0_cmd_width_adapter_src_valid),         //          .valid
		.sink0_channel       (nios2_gen2_0_data_master_to_io_bridge_1_avalon_slave_0_cmd_width_adapter_src_channel),       //          .channel
		.sink0_data          (nios2_gen2_0_data_master_to_io_bridge_1_avalon_slave_0_cmd_width_adapter_src_data),          //          .data
		.sink0_startofpacket (nios2_gen2_0_data_master_to_io_bridge_1_avalon_slave_0_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket   (nios2_gen2_0_data_master_to_io_bridge_1_avalon_slave_0_cmd_width_adapter_src_endofpacket)    //          .endofpacket
	);

	nios_tester_mm_interconnect_0_cmd_mux_001 cmd_mux_001 (
		.clk                 (clk_0_clk_clk),                                                                         //       clk.clk
		.reset               (nios2_gen2_0_reset_reset_bridge_in_reset_reset),                                        // clk_reset.reset
		.src_ready           (cmd_mux_001_src_ready),                                                                 //       src.ready
		.src_valid           (cmd_mux_001_src_valid),                                                                 //          .valid
		.src_data            (cmd_mux_001_src_data),                                                                  //          .data
		.src_channel         (cmd_mux_001_src_channel),                                                               //          .channel
		.src_startofpacket   (cmd_mux_001_src_startofpacket),                                                         //          .startofpacket
		.src_endofpacket     (cmd_mux_001_src_endofpacket),                                                           //          .endofpacket
		.sink0_ready         (cmd_demux_src1_ready),                                                                  //     sink0.ready
		.sink0_valid         (cmd_demux_src1_valid),                                                                  //          .valid
		.sink0_channel       (cmd_demux_src1_channel),                                                                //          .channel
		.sink0_data          (cmd_demux_src1_data),                                                                   //          .data
		.sink0_startofpacket (cmd_demux_src1_startofpacket),                                                          //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src1_endofpacket),                                                            //          .endofpacket
		.sink1_ready         (cmd_demux_001_src0_ready),                                                              //     sink1.ready
		.sink1_valid         (cmd_demux_001_src0_valid),                                                              //          .valid
		.sink1_channel       (cmd_demux_001_src0_channel),                                                            //          .channel
		.sink1_data          (cmd_demux_001_src0_data),                                                               //          .data
		.sink1_startofpacket (cmd_demux_001_src0_startofpacket),                                                      //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src0_endofpacket),                                                        //          .endofpacket
		.sink2_ready         (cmd_demux_002_src0_ready),                                                              //     sink2.ready
		.sink2_valid         (cmd_demux_002_src0_valid),                                                              //          .valid
		.sink2_channel       (cmd_demux_002_src0_channel),                                                            //          .channel
		.sink2_data          (cmd_demux_002_src0_data),                                                               //          .data
		.sink2_startofpacket (cmd_demux_002_src0_startofpacket),                                                      //          .startofpacket
		.sink2_endofpacket   (cmd_demux_002_src0_endofpacket),                                                        //          .endofpacket
		.sink3_ready         (cmd_demux_003_src0_ready),                                                              //     sink3.ready
		.sink3_valid         (cmd_demux_003_src0_valid),                                                              //          .valid
		.sink3_channel       (cmd_demux_003_src0_channel),                                                            //          .channel
		.sink3_data          (cmd_demux_003_src0_data),                                                               //          .data
		.sink3_startofpacket (cmd_demux_003_src0_startofpacket),                                                      //          .startofpacket
		.sink3_endofpacket   (cmd_demux_003_src0_endofpacket),                                                        //          .endofpacket
		.sink4_ready         (jtagdebug_mm_write_to_avalon2mem_0_avalon_slave_0_cmd_width_adapter_src_ready),         //     sink4.ready
		.sink4_valid         (jtagdebug_mm_write_to_avalon2mem_0_avalon_slave_0_cmd_width_adapter_src_valid),         //          .valid
		.sink4_channel       (jtagdebug_mm_write_to_avalon2mem_0_avalon_slave_0_cmd_width_adapter_src_channel),       //          .channel
		.sink4_data          (jtagdebug_mm_write_to_avalon2mem_0_avalon_slave_0_cmd_width_adapter_src_data),          //          .data
		.sink4_startofpacket (jtagdebug_mm_write_to_avalon2mem_0_avalon_slave_0_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink4_endofpacket   (jtagdebug_mm_write_to_avalon2mem_0_avalon_slave_0_cmd_width_adapter_src_endofpacket)    //          .endofpacket
	);

	nios_tester_mm_interconnect_0_cmd_mux_002 cmd_mux_002 (
		.clk                 (clk_0_clk_clk),                                  //       clk.clk
		.reset               (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_002_src_ready),                          //       src.ready
		.src_valid           (cmd_mux_002_src_valid),                          //          .valid
		.src_data            (cmd_mux_002_src_data),                           //          .data
		.src_channel         (cmd_mux_002_src_channel),                        //          .channel
		.src_startofpacket   (cmd_mux_002_src_startofpacket),                  //          .startofpacket
		.src_endofpacket     (cmd_mux_002_src_endofpacket),                    //          .endofpacket
		.sink0_ready         (cmd_demux_src2_ready),                           //     sink0.ready
		.sink0_valid         (cmd_demux_src2_valid),                           //          .valid
		.sink0_channel       (cmd_demux_src2_channel),                         //          .channel
		.sink0_data          (cmd_demux_src2_data),                            //          .data
		.sink0_startofpacket (cmd_demux_src2_startofpacket),                   //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src2_endofpacket)                      //          .endofpacket
	);

	nios_tester_mm_interconnect_0_cmd_mux_002 cmd_mux_003 (
		.clk                 (clk_0_clk_clk),                                  //       clk.clk
		.reset               (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_003_src_ready),                          //       src.ready
		.src_valid           (cmd_mux_003_src_valid),                          //          .valid
		.src_data            (cmd_mux_003_src_data),                           //          .data
		.src_channel         (cmd_mux_003_src_channel),                        //          .channel
		.src_startofpacket   (cmd_mux_003_src_startofpacket),                  //          .startofpacket
		.src_endofpacket     (cmd_mux_003_src_endofpacket),                    //          .endofpacket
		.sink0_ready         (cmd_demux_src3_ready),                           //     sink0.ready
		.sink0_valid         (cmd_demux_src3_valid),                           //          .valid
		.sink0_channel       (cmd_demux_src3_channel),                         //          .channel
		.sink0_data          (cmd_demux_src3_data),                            //          .data
		.sink0_startofpacket (cmd_demux_src3_startofpacket),                   //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src3_endofpacket)                      //          .endofpacket
	);

	nios_tester_mm_interconnect_0_cmd_mux cmd_mux_004 (
		.clk                 (clk_0_clk_clk),                                                                              //       clk.clk
		.reset               (nios2_gen2_0_reset_reset_bridge_in_reset_reset),                                             // clk_reset.reset
		.src_ready           (cmd_mux_004_src_ready),                                                                      //       src.ready
		.src_valid           (cmd_mux_004_src_valid),                                                                      //          .valid
		.src_data            (cmd_mux_004_src_data),                                                                       //          .data
		.src_channel         (cmd_mux_004_src_channel),                                                                    //          .channel
		.src_startofpacket   (cmd_mux_004_src_startofpacket),                                                              //          .startofpacket
		.src_endofpacket     (cmd_mux_004_src_endofpacket),                                                                //          .endofpacket
		.sink0_ready         (nios2_gen2_0_data_master_to_io_bridge_0_avalon_slave_0_cmd_width_adapter_src_ready),         //     sink0.ready
		.sink0_valid         (nios2_gen2_0_data_master_to_io_bridge_0_avalon_slave_0_cmd_width_adapter_src_valid),         //          .valid
		.sink0_channel       (nios2_gen2_0_data_master_to_io_bridge_0_avalon_slave_0_cmd_width_adapter_src_channel),       //          .channel
		.sink0_data          (nios2_gen2_0_data_master_to_io_bridge_0_avalon_slave_0_cmd_width_adapter_src_data),          //          .data
		.sink0_startofpacket (nios2_gen2_0_data_master_to_io_bridge_0_avalon_slave_0_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket   (nios2_gen2_0_data_master_to_io_bridge_0_avalon_slave_0_cmd_width_adapter_src_endofpacket)    //          .endofpacket
	);

	nios_tester_mm_interconnect_0_cmd_mux_002 cmd_mux_005 (
		.clk                 (clk_0_clk_clk),                                  //       clk.clk
		.reset               (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_005_src_ready),                          //       src.ready
		.src_valid           (cmd_mux_005_src_valid),                          //          .valid
		.src_data            (cmd_mux_005_src_data),                           //          .data
		.src_channel         (cmd_mux_005_src_channel),                        //          .channel
		.src_startofpacket   (cmd_mux_005_src_startofpacket),                  //          .startofpacket
		.src_endofpacket     (cmd_mux_005_src_endofpacket),                    //          .endofpacket
		.sink0_ready         (cmd_demux_src5_ready),                           //     sink0.ready
		.sink0_valid         (cmd_demux_src5_valid),                           //          .valid
		.sink0_channel       (cmd_demux_src5_channel),                         //          .channel
		.sink0_data          (cmd_demux_src5_data),                            //          .data
		.sink0_startofpacket (cmd_demux_src5_startofpacket),                   //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src5_endofpacket)                      //          .endofpacket
	);

	nios_tester_mm_interconnect_0_cmd_mux_002 cmd_mux_006 (
		.clk                 (clk_0_clk_clk),                                  //       clk.clk
		.reset               (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_006_src_ready),                          //       src.ready
		.src_valid           (cmd_mux_006_src_valid),                          //          .valid
		.src_data            (cmd_mux_006_src_data),                           //          .data
		.src_channel         (cmd_mux_006_src_channel),                        //          .channel
		.src_startofpacket   (cmd_mux_006_src_startofpacket),                  //          .startofpacket
		.src_endofpacket     (cmd_mux_006_src_endofpacket),                    //          .endofpacket
		.sink0_ready         (cmd_demux_src6_ready),                           //     sink0.ready
		.sink0_valid         (cmd_demux_src6_valid),                           //          .valid
		.sink0_channel       (cmd_demux_src6_channel),                         //          .channel
		.sink0_data          (cmd_demux_src6_data),                            //          .data
		.sink0_startofpacket (cmd_demux_src6_startofpacket),                   //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src6_endofpacket)                      //          .endofpacket
	);

	nios_tester_mm_interconnect_0_cmd_mux_002 cmd_mux_007 (
		.clk                 (clk_0_clk_clk),                                  //       clk.clk
		.reset               (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_007_src_ready),                          //       src.ready
		.src_valid           (cmd_mux_007_src_valid),                          //          .valid
		.src_data            (cmd_mux_007_src_data),                           //          .data
		.src_channel         (cmd_mux_007_src_channel),                        //          .channel
		.src_startofpacket   (cmd_mux_007_src_startofpacket),                  //          .startofpacket
		.src_endofpacket     (cmd_mux_007_src_endofpacket),                    //          .endofpacket
		.sink0_ready         (cmd_demux_src7_ready),                           //     sink0.ready
		.sink0_valid         (cmd_demux_src7_valid),                           //          .valid
		.sink0_channel       (cmd_demux_src7_channel),                         //          .channel
		.sink0_data          (cmd_demux_src7_data),                            //          .data
		.sink0_startofpacket (cmd_demux_src7_startofpacket),                   //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src7_endofpacket)                      //          .endofpacket
	);

	nios_tester_mm_interconnect_0_cmd_mux_008 cmd_mux_008 (
		.clk                 (clk_0_clk_clk),                                  //       clk.clk
		.reset               (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_008_src_ready),                          //       src.ready
		.src_valid           (cmd_mux_008_src_valid),                          //          .valid
		.src_data            (cmd_mux_008_src_data),                           //          .data
		.src_channel         (cmd_mux_008_src_channel),                        //          .channel
		.src_startofpacket   (cmd_mux_008_src_startofpacket),                  //          .startofpacket
		.src_endofpacket     (cmd_mux_008_src_endofpacket),                    //          .endofpacket
		.sink0_ready         (cmd_demux_src8_ready),                           //     sink0.ready
		.sink0_valid         (cmd_demux_src8_valid),                           //          .valid
		.sink0_channel       (cmd_demux_src8_channel),                         //          .channel
		.sink0_data          (cmd_demux_src8_data),                            //          .data
		.sink0_startofpacket (cmd_demux_src8_startofpacket),                   //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src8_endofpacket),                     //          .endofpacket
		.sink1_ready         (cmd_demux_001_src1_ready),                       //     sink1.ready
		.sink1_valid         (cmd_demux_001_src1_valid),                       //          .valid
		.sink1_channel       (cmd_demux_001_src1_channel),                     //          .channel
		.sink1_data          (cmd_demux_001_src1_data),                        //          .data
		.sink1_startofpacket (cmd_demux_001_src1_startofpacket),               //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src1_endofpacket)                  //          .endofpacket
	);

	nios_tester_mm_interconnect_0_cmd_mux_009 cmd_mux_009 (
		.clk                 (clk_0_clk_clk),                                                                                  //       clk.clk
		.reset               (nios2_gen2_0_reset_reset_bridge_in_reset_reset),                                                 // clk_reset.reset
		.src_ready           (cmd_mux_009_src_ready),                                                                          //       src.ready
		.src_valid           (cmd_mux_009_src_valid),                                                                          //          .valid
		.src_data            (cmd_mux_009_src_data),                                                                           //          .data
		.src_channel         (cmd_mux_009_src_channel),                                                                        //          .channel
		.src_startofpacket   (cmd_mux_009_src_startofpacket),                                                                  //          .startofpacket
		.src_endofpacket     (cmd_mux_009_src_endofpacket),                                                                    //          .endofpacket
		.sink0_ready         (nios2_gen2_0_data_master_to_audio_out_dma_descriptor_slave_cmd_width_adapter_src_ready),         //     sink0.ready
		.sink0_valid         (nios2_gen2_0_data_master_to_audio_out_dma_descriptor_slave_cmd_width_adapter_src_valid),         //          .valid
		.sink0_channel       (nios2_gen2_0_data_master_to_audio_out_dma_descriptor_slave_cmd_width_adapter_src_channel),       //          .channel
		.sink0_data          (nios2_gen2_0_data_master_to_audio_out_dma_descriptor_slave_cmd_width_adapter_src_data),          //          .data
		.sink0_startofpacket (nios2_gen2_0_data_master_to_audio_out_dma_descriptor_slave_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket   (nios2_gen2_0_data_master_to_audio_out_dma_descriptor_slave_cmd_width_adapter_src_endofpacket)    //          .endofpacket
	);

	nios_tester_mm_interconnect_0_cmd_mux_009 cmd_mux_010 (
		.clk                 (clk_0_clk_clk),                                                                                 //       clk.clk
		.reset               (nios2_gen2_0_reset_reset_bridge_in_reset_reset),                                                // clk_reset.reset
		.src_ready           (cmd_mux_010_src_ready),                                                                         //       src.ready
		.src_valid           (cmd_mux_010_src_valid),                                                                         //          .valid
		.src_data            (cmd_mux_010_src_data),                                                                          //          .data
		.src_channel         (cmd_mux_010_src_channel),                                                                       //          .channel
		.src_startofpacket   (cmd_mux_010_src_startofpacket),                                                                 //          .startofpacket
		.src_endofpacket     (cmd_mux_010_src_endofpacket),                                                                   //          .endofpacket
		.sink0_ready         (nios2_gen2_0_data_master_to_audio_in_dma_descriptor_slave_cmd_width_adapter_src_ready),         //     sink0.ready
		.sink0_valid         (nios2_gen2_0_data_master_to_audio_in_dma_descriptor_slave_cmd_width_adapter_src_valid),         //          .valid
		.sink0_channel       (nios2_gen2_0_data_master_to_audio_in_dma_descriptor_slave_cmd_width_adapter_src_channel),       //          .channel
		.sink0_data          (nios2_gen2_0_data_master_to_audio_in_dma_descriptor_slave_cmd_width_adapter_src_data),          //          .data
		.sink0_startofpacket (nios2_gen2_0_data_master_to_audio_in_dma_descriptor_slave_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket   (nios2_gen2_0_data_master_to_audio_in_dma_descriptor_slave_cmd_width_adapter_src_endofpacket)    //          .endofpacket
	);

	nios_tester_mm_interconnect_0_cmd_mux_009 cmd_mux_011 (
		.clk                 (clk_0_clk_clk),                                                                              //       clk.clk
		.reset               (nios2_gen2_0_reset_reset_bridge_in_reset_reset),                                             // clk_reset.reset
		.src_ready           (cmd_mux_011_src_ready),                                                                      //       src.ready
		.src_valid           (cmd_mux_011_src_valid),                                                                      //          .valid
		.src_data            (cmd_mux_011_src_data),                                                                       //          .data
		.src_channel         (cmd_mux_011_src_channel),                                                                    //          .channel
		.src_startofpacket   (cmd_mux_011_src_startofpacket),                                                              //          .startofpacket
		.src_endofpacket     (cmd_mux_011_src_endofpacket),                                                                //          .endofpacket
		.sink0_ready         (nios2_gen2_0_data_master_to_jtagdebug_descriptor_slave_cmd_width_adapter_src_ready),         //     sink0.ready
		.sink0_valid         (nios2_gen2_0_data_master_to_jtagdebug_descriptor_slave_cmd_width_adapter_src_valid),         //          .valid
		.sink0_channel       (nios2_gen2_0_data_master_to_jtagdebug_descriptor_slave_cmd_width_adapter_src_channel),       //          .channel
		.sink0_data          (nios2_gen2_0_data_master_to_jtagdebug_descriptor_slave_cmd_width_adapter_src_data),          //          .data
		.sink0_startofpacket (nios2_gen2_0_data_master_to_jtagdebug_descriptor_slave_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket   (nios2_gen2_0_data_master_to_jtagdebug_descriptor_slave_cmd_width_adapter_src_endofpacket)    //          .endofpacket
	);

	nios_tester_mm_interconnect_0_cmd_mux_008 cmd_mux_012 (
		.clk                 (clk_0_clk_clk),                                  //       clk.clk
		.reset               (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_012_src_ready),                          //       src.ready
		.src_valid           (cmd_mux_012_src_valid),                          //          .valid
		.src_data            (cmd_mux_012_src_data),                           //          .data
		.src_channel         (cmd_mux_012_src_channel),                        //          .channel
		.src_startofpacket   (cmd_mux_012_src_startofpacket),                  //          .startofpacket
		.src_endofpacket     (cmd_mux_012_src_endofpacket),                    //          .endofpacket
		.sink0_ready         (cmd_demux_src12_ready),                          //     sink0.ready
		.sink0_valid         (cmd_demux_src12_valid),                          //          .valid
		.sink0_channel       (cmd_demux_src12_channel),                        //          .channel
		.sink0_data          (cmd_demux_src12_data),                           //          .data
		.sink0_startofpacket (cmd_demux_src12_startofpacket),                  //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src12_endofpacket),                    //          .endofpacket
		.sink1_ready         (cmd_demux_001_src2_ready),                       //     sink1.ready
		.sink1_valid         (cmd_demux_001_src2_valid),                       //          .valid
		.sink1_channel       (cmd_demux_001_src2_channel),                     //          .channel
		.sink1_data          (cmd_demux_001_src2_data),                        //          .data
		.sink1_startofpacket (cmd_demux_001_src2_startofpacket),               //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src2_endofpacket)                  //          .endofpacket
	);

	nios_tester_mm_interconnect_0_cmd_mux_002 cmd_mux_013 (
		.clk                 (clk_0_clk_clk),                                  //       clk.clk
		.reset               (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_013_src_ready),                          //       src.ready
		.src_valid           (cmd_mux_013_src_valid),                          //          .valid
		.src_data            (cmd_mux_013_src_data),                           //          .data
		.src_channel         (cmd_mux_013_src_channel),                        //          .channel
		.src_startofpacket   (cmd_mux_013_src_startofpacket),                  //          .startofpacket
		.src_endofpacket     (cmd_mux_013_src_endofpacket),                    //          .endofpacket
		.sink0_ready         (cmd_demux_src13_ready),                          //     sink0.ready
		.sink0_valid         (cmd_demux_src13_valid),                          //          .valid
		.sink0_channel       (cmd_demux_src13_channel),                        //          .channel
		.sink0_data          (cmd_demux_src13_data),                           //          .data
		.sink0_startofpacket (cmd_demux_src13_startofpacket),                  //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src13_endofpacket)                     //          .endofpacket
	);

	nios_tester_mm_interconnect_0_cmd_mux_002 cmd_mux_014 (
		.clk                 (clk_0_clk_clk),                                  //       clk.clk
		.reset               (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_014_src_ready),                          //       src.ready
		.src_valid           (cmd_mux_014_src_valid),                          //          .valid
		.src_data            (cmd_mux_014_src_data),                           //          .data
		.src_channel         (cmd_mux_014_src_channel),                        //          .channel
		.src_startofpacket   (cmd_mux_014_src_startofpacket),                  //          .startofpacket
		.src_endofpacket     (cmd_mux_014_src_endofpacket),                    //          .endofpacket
		.sink0_ready         (cmd_demux_src14_ready),                          //     sink0.ready
		.sink0_valid         (cmd_demux_src14_valid),                          //          .valid
		.sink0_channel       (cmd_demux_src14_channel),                        //          .channel
		.sink0_data          (cmd_demux_src14_data),                           //          .data
		.sink0_startofpacket (cmd_demux_src14_startofpacket),                  //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src14_endofpacket)                     //          .endofpacket
	);

	nios_tester_mm_interconnect_0_cmd_mux_002 cmd_mux_015 (
		.clk                 (clk_0_clk_clk),                                  //       clk.clk
		.reset               (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_015_src_ready),                          //       src.ready
		.src_valid           (cmd_mux_015_src_valid),                          //          .valid
		.src_data            (cmd_mux_015_src_data),                           //          .data
		.src_channel         (cmd_mux_015_src_channel),                        //          .channel
		.src_startofpacket   (cmd_mux_015_src_startofpacket),                  //          .startofpacket
		.src_endofpacket     (cmd_mux_015_src_endofpacket),                    //          .endofpacket
		.sink0_ready         (cmd_demux_src15_ready),                          //     sink0.ready
		.sink0_valid         (cmd_demux_src15_valid),                          //          .valid
		.sink0_channel       (cmd_demux_src15_channel),                        //          .channel
		.sink0_data          (cmd_demux_src15_data),                           //          .data
		.sink0_startofpacket (cmd_demux_src15_startofpacket),                  //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src15_endofpacket)                     //          .endofpacket
	);

	nios_tester_mm_interconnect_0_cmd_demux_004 rsp_demux (
		.clk                (clk_0_clk_clk),                                  //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_005_src_ready),                           //      sink.ready
		.sink_channel       (router_005_src_channel),                         //          .channel
		.sink_data          (router_005_src_data),                            //          .data
		.sink_startofpacket (router_005_src_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (router_005_src_endofpacket),                     //          .endofpacket
		.sink_valid         (router_005_src_valid),                           //          .valid
		.src0_ready         (rsp_demux_src0_ready),                           //      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                           //          .valid
		.src0_data          (rsp_demux_src0_data),                            //          .data
		.src0_channel       (rsp_demux_src0_channel),                         //          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                   //          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket)                      //          .endofpacket
	);

	nios_tester_mm_interconnect_0_rsp_demux_001 rsp_demux_001 (
		.clk                (clk_0_clk_clk),                                  //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_006_src_ready),                           //      sink.ready
		.sink_channel       (router_006_src_channel),                         //          .channel
		.sink_data          (router_006_src_data),                            //          .data
		.sink_startofpacket (router_006_src_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (router_006_src_endofpacket),                     //          .endofpacket
		.sink_valid         (router_006_src_valid),                           //          .valid
		.src0_ready         (rsp_demux_001_src0_ready),                       //      src0.ready
		.src0_valid         (rsp_demux_001_src0_valid),                       //          .valid
		.src0_data          (rsp_demux_001_src0_data),                        //          .data
		.src0_channel       (rsp_demux_001_src0_channel),                     //          .channel
		.src0_startofpacket (rsp_demux_001_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (rsp_demux_001_src0_endofpacket),                 //          .endofpacket
		.src1_ready         (rsp_demux_001_src1_ready),                       //      src1.ready
		.src1_valid         (rsp_demux_001_src1_valid),                       //          .valid
		.src1_data          (rsp_demux_001_src1_data),                        //          .data
		.src1_channel       (rsp_demux_001_src1_channel),                     //          .channel
		.src1_startofpacket (rsp_demux_001_src1_startofpacket),               //          .startofpacket
		.src1_endofpacket   (rsp_demux_001_src1_endofpacket),                 //          .endofpacket
		.src2_ready         (rsp_demux_001_src2_ready),                       //      src2.ready
		.src2_valid         (rsp_demux_001_src2_valid),                       //          .valid
		.src2_data          (rsp_demux_001_src2_data),                        //          .data
		.src2_channel       (rsp_demux_001_src2_channel),                     //          .channel
		.src2_startofpacket (rsp_demux_001_src2_startofpacket),               //          .startofpacket
		.src2_endofpacket   (rsp_demux_001_src2_endofpacket),                 //          .endofpacket
		.src3_ready         (rsp_demux_001_src3_ready),                       //      src3.ready
		.src3_valid         (rsp_demux_001_src3_valid),                       //          .valid
		.src3_data          (rsp_demux_001_src3_data),                        //          .data
		.src3_channel       (rsp_demux_001_src3_channel),                     //          .channel
		.src3_startofpacket (rsp_demux_001_src3_startofpacket),               //          .startofpacket
		.src3_endofpacket   (rsp_demux_001_src3_endofpacket),                 //          .endofpacket
		.src4_ready         (rsp_demux_001_src4_ready),                       //      src4.ready
		.src4_valid         (rsp_demux_001_src4_valid),                       //          .valid
		.src4_data          (rsp_demux_001_src4_data),                        //          .data
		.src4_channel       (rsp_demux_001_src4_channel),                     //          .channel
		.src4_startofpacket (rsp_demux_001_src4_startofpacket),               //          .startofpacket
		.src4_endofpacket   (rsp_demux_001_src4_endofpacket)                  //          .endofpacket
	);

	nios_tester_mm_interconnect_0_cmd_demux_002 rsp_demux_002 (
		.clk                (clk_0_clk_clk),                                  //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_007_src_ready),                           //      sink.ready
		.sink_channel       (router_007_src_channel),                         //          .channel
		.sink_data          (router_007_src_data),                            //          .data
		.sink_startofpacket (router_007_src_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (router_007_src_endofpacket),                     //          .endofpacket
		.sink_valid         (router_007_src_valid),                           //          .valid
		.src0_ready         (rsp_demux_002_src0_ready),                       //      src0.ready
		.src0_valid         (rsp_demux_002_src0_valid),                       //          .valid
		.src0_data          (rsp_demux_002_src0_data),                        //          .data
		.src0_channel       (rsp_demux_002_src0_channel),                     //          .channel
		.src0_startofpacket (rsp_demux_002_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (rsp_demux_002_src0_endofpacket)                  //          .endofpacket
	);

	nios_tester_mm_interconnect_0_cmd_demux_002 rsp_demux_003 (
		.clk                (clk_0_clk_clk),                                  //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_008_src_ready),                           //      sink.ready
		.sink_channel       (router_008_src_channel),                         //          .channel
		.sink_data          (router_008_src_data),                            //          .data
		.sink_startofpacket (router_008_src_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (router_008_src_endofpacket),                     //          .endofpacket
		.sink_valid         (router_008_src_valid),                           //          .valid
		.src0_ready         (rsp_demux_003_src0_ready),                       //      src0.ready
		.src0_valid         (rsp_demux_003_src0_valid),                       //          .valid
		.src0_data          (rsp_demux_003_src0_data),                        //          .data
		.src0_channel       (rsp_demux_003_src0_channel),                     //          .channel
		.src0_startofpacket (rsp_demux_003_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (rsp_demux_003_src0_endofpacket)                  //          .endofpacket
	);

	nios_tester_mm_interconnect_0_cmd_demux_004 rsp_demux_004 (
		.clk                (clk_0_clk_clk),                                  //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_009_src_ready),                           //      sink.ready
		.sink_channel       (router_009_src_channel),                         //          .channel
		.sink_data          (router_009_src_data),                            //          .data
		.sink_startofpacket (router_009_src_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (router_009_src_endofpacket),                     //          .endofpacket
		.sink_valid         (router_009_src_valid),                           //          .valid
		.src0_ready         (rsp_demux_004_src0_ready),                       //      src0.ready
		.src0_valid         (rsp_demux_004_src0_valid),                       //          .valid
		.src0_data          (rsp_demux_004_src0_data),                        //          .data
		.src0_channel       (rsp_demux_004_src0_channel),                     //          .channel
		.src0_startofpacket (rsp_demux_004_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (rsp_demux_004_src0_endofpacket)                  //          .endofpacket
	);

	nios_tester_mm_interconnect_0_cmd_demux_002 rsp_demux_005 (
		.clk                (clk_0_clk_clk),                                  //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_010_src_ready),                           //      sink.ready
		.sink_channel       (router_010_src_channel),                         //          .channel
		.sink_data          (router_010_src_data),                            //          .data
		.sink_startofpacket (router_010_src_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (router_010_src_endofpacket),                     //          .endofpacket
		.sink_valid         (router_010_src_valid),                           //          .valid
		.src0_ready         (rsp_demux_005_src0_ready),                       //      src0.ready
		.src0_valid         (rsp_demux_005_src0_valid),                       //          .valid
		.src0_data          (rsp_demux_005_src0_data),                        //          .data
		.src0_channel       (rsp_demux_005_src0_channel),                     //          .channel
		.src0_startofpacket (rsp_demux_005_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (rsp_demux_005_src0_endofpacket)                  //          .endofpacket
	);

	nios_tester_mm_interconnect_0_cmd_demux_002 rsp_demux_006 (
		.clk                (clk_0_clk_clk),                                  //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_011_src_ready),                           //      sink.ready
		.sink_channel       (router_011_src_channel),                         //          .channel
		.sink_data          (router_011_src_data),                            //          .data
		.sink_startofpacket (router_011_src_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (router_011_src_endofpacket),                     //          .endofpacket
		.sink_valid         (router_011_src_valid),                           //          .valid
		.src0_ready         (rsp_demux_006_src0_ready),                       //      src0.ready
		.src0_valid         (rsp_demux_006_src0_valid),                       //          .valid
		.src0_data          (rsp_demux_006_src0_data),                        //          .data
		.src0_channel       (rsp_demux_006_src0_channel),                     //          .channel
		.src0_startofpacket (rsp_demux_006_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (rsp_demux_006_src0_endofpacket)                  //          .endofpacket
	);

	nios_tester_mm_interconnect_0_cmd_demux_002 rsp_demux_007 (
		.clk                (clk_0_clk_clk),                                  //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_012_src_ready),                           //      sink.ready
		.sink_channel       (router_012_src_channel),                         //          .channel
		.sink_data          (router_012_src_data),                            //          .data
		.sink_startofpacket (router_012_src_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (router_012_src_endofpacket),                     //          .endofpacket
		.sink_valid         (router_012_src_valid),                           //          .valid
		.src0_ready         (rsp_demux_007_src0_ready),                       //      src0.ready
		.src0_valid         (rsp_demux_007_src0_valid),                       //          .valid
		.src0_data          (rsp_demux_007_src0_data),                        //          .data
		.src0_channel       (rsp_demux_007_src0_channel),                     //          .channel
		.src0_startofpacket (rsp_demux_007_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (rsp_demux_007_src0_endofpacket)                  //          .endofpacket
	);

	nios_tester_mm_interconnect_0_rsp_demux_008 rsp_demux_008 (
		.clk                (clk_0_clk_clk),                                  //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_013_src_ready),                           //      sink.ready
		.sink_channel       (router_013_src_channel),                         //          .channel
		.sink_data          (router_013_src_data),                            //          .data
		.sink_startofpacket (router_013_src_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (router_013_src_endofpacket),                     //          .endofpacket
		.sink_valid         (router_013_src_valid),                           //          .valid
		.src0_ready         (rsp_demux_008_src0_ready),                       //      src0.ready
		.src0_valid         (rsp_demux_008_src0_valid),                       //          .valid
		.src0_data          (rsp_demux_008_src0_data),                        //          .data
		.src0_channel       (rsp_demux_008_src0_channel),                     //          .channel
		.src0_startofpacket (rsp_demux_008_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (rsp_demux_008_src0_endofpacket),                 //          .endofpacket
		.src1_ready         (rsp_demux_008_src1_ready),                       //      src1.ready
		.src1_valid         (rsp_demux_008_src1_valid),                       //          .valid
		.src1_data          (rsp_demux_008_src1_data),                        //          .data
		.src1_channel       (rsp_demux_008_src1_channel),                     //          .channel
		.src1_startofpacket (rsp_demux_008_src1_startofpacket),               //          .startofpacket
		.src1_endofpacket   (rsp_demux_008_src1_endofpacket)                  //          .endofpacket
	);

	nios_tester_mm_interconnect_0_rsp_demux_009 rsp_demux_009 (
		.clk                (clk_0_clk_clk),                                  //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_014_src_ready),                           //      sink.ready
		.sink_channel       (router_014_src_channel),                         //          .channel
		.sink_data          (router_014_src_data),                            //          .data
		.sink_startofpacket (router_014_src_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (router_014_src_endofpacket),                     //          .endofpacket
		.sink_valid         (router_014_src_valid),                           //          .valid
		.src0_ready         (rsp_demux_009_src0_ready),                       //      src0.ready
		.src0_valid         (rsp_demux_009_src0_valid),                       //          .valid
		.src0_data          (rsp_demux_009_src0_data),                        //          .data
		.src0_channel       (rsp_demux_009_src0_channel),                     //          .channel
		.src0_startofpacket (rsp_demux_009_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (rsp_demux_009_src0_endofpacket)                  //          .endofpacket
	);

	nios_tester_mm_interconnect_0_rsp_demux_009 rsp_demux_010 (
		.clk                (clk_0_clk_clk),                                  //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_015_src_ready),                           //      sink.ready
		.sink_channel       (router_015_src_channel),                         //          .channel
		.sink_data          (router_015_src_data),                            //          .data
		.sink_startofpacket (router_015_src_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (router_015_src_endofpacket),                     //          .endofpacket
		.sink_valid         (router_015_src_valid),                           //          .valid
		.src0_ready         (rsp_demux_010_src0_ready),                       //      src0.ready
		.src0_valid         (rsp_demux_010_src0_valid),                       //          .valid
		.src0_data          (rsp_demux_010_src0_data),                        //          .data
		.src0_channel       (rsp_demux_010_src0_channel),                     //          .channel
		.src0_startofpacket (rsp_demux_010_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (rsp_demux_010_src0_endofpacket)                  //          .endofpacket
	);

	nios_tester_mm_interconnect_0_rsp_demux_009 rsp_demux_011 (
		.clk                (clk_0_clk_clk),                                  //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_016_src_ready),                           //      sink.ready
		.sink_channel       (router_016_src_channel),                         //          .channel
		.sink_data          (router_016_src_data),                            //          .data
		.sink_startofpacket (router_016_src_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (router_016_src_endofpacket),                     //          .endofpacket
		.sink_valid         (router_016_src_valid),                           //          .valid
		.src0_ready         (rsp_demux_011_src0_ready),                       //      src0.ready
		.src0_valid         (rsp_demux_011_src0_valid),                       //          .valid
		.src0_data          (rsp_demux_011_src0_data),                        //          .data
		.src0_channel       (rsp_demux_011_src0_channel),                     //          .channel
		.src0_startofpacket (rsp_demux_011_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (rsp_demux_011_src0_endofpacket)                  //          .endofpacket
	);

	nios_tester_mm_interconnect_0_rsp_demux_008 rsp_demux_012 (
		.clk                (clk_0_clk_clk),                                  //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_017_src_ready),                           //      sink.ready
		.sink_channel       (router_017_src_channel),                         //          .channel
		.sink_data          (router_017_src_data),                            //          .data
		.sink_startofpacket (router_017_src_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (router_017_src_endofpacket),                     //          .endofpacket
		.sink_valid         (router_017_src_valid),                           //          .valid
		.src0_ready         (rsp_demux_012_src0_ready),                       //      src0.ready
		.src0_valid         (rsp_demux_012_src0_valid),                       //          .valid
		.src0_data          (rsp_demux_012_src0_data),                        //          .data
		.src0_channel       (rsp_demux_012_src0_channel),                     //          .channel
		.src0_startofpacket (rsp_demux_012_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (rsp_demux_012_src0_endofpacket),                 //          .endofpacket
		.src1_ready         (rsp_demux_012_src1_ready),                       //      src1.ready
		.src1_valid         (rsp_demux_012_src1_valid),                       //          .valid
		.src1_data          (rsp_demux_012_src1_data),                        //          .data
		.src1_channel       (rsp_demux_012_src1_channel),                     //          .channel
		.src1_startofpacket (rsp_demux_012_src1_startofpacket),               //          .startofpacket
		.src1_endofpacket   (rsp_demux_012_src1_endofpacket)                  //          .endofpacket
	);

	nios_tester_mm_interconnect_0_cmd_demux_002 rsp_demux_013 (
		.clk                (clk_0_clk_clk),                                  //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_018_src_ready),                           //      sink.ready
		.sink_channel       (router_018_src_channel),                         //          .channel
		.sink_data          (router_018_src_data),                            //          .data
		.sink_startofpacket (router_018_src_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (router_018_src_endofpacket),                     //          .endofpacket
		.sink_valid         (router_018_src_valid),                           //          .valid
		.src0_ready         (rsp_demux_013_src0_ready),                       //      src0.ready
		.src0_valid         (rsp_demux_013_src0_valid),                       //          .valid
		.src0_data          (rsp_demux_013_src0_data),                        //          .data
		.src0_channel       (rsp_demux_013_src0_channel),                     //          .channel
		.src0_startofpacket (rsp_demux_013_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (rsp_demux_013_src0_endofpacket)                  //          .endofpacket
	);

	nios_tester_mm_interconnect_0_cmd_demux_002 rsp_demux_014 (
		.clk                (clk_0_clk_clk),                                  //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_019_src_ready),                           //      sink.ready
		.sink_channel       (router_019_src_channel),                         //          .channel
		.sink_data          (router_019_src_data),                            //          .data
		.sink_startofpacket (router_019_src_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (router_019_src_endofpacket),                     //          .endofpacket
		.sink_valid         (router_019_src_valid),                           //          .valid
		.src0_ready         (rsp_demux_014_src0_ready),                       //      src0.ready
		.src0_valid         (rsp_demux_014_src0_valid),                       //          .valid
		.src0_data          (rsp_demux_014_src0_data),                        //          .data
		.src0_channel       (rsp_demux_014_src0_channel),                     //          .channel
		.src0_startofpacket (rsp_demux_014_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (rsp_demux_014_src0_endofpacket)                  //          .endofpacket
	);

	nios_tester_mm_interconnect_0_cmd_demux_002 rsp_demux_015 (
		.clk                (clk_0_clk_clk),                                  //       clk.clk
		.reset              (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_020_src_ready),                           //      sink.ready
		.sink_channel       (router_020_src_channel),                         //          .channel
		.sink_data          (router_020_src_data),                            //          .data
		.sink_startofpacket (router_020_src_startofpacket),                   //          .startofpacket
		.sink_endofpacket   (router_020_src_endofpacket),                     //          .endofpacket
		.sink_valid         (router_020_src_valid),                           //          .valid
		.src0_ready         (rsp_demux_015_src0_ready),                       //      src0.ready
		.src0_valid         (rsp_demux_015_src0_valid),                       //          .valid
		.src0_data          (rsp_demux_015_src0_data),                        //          .data
		.src0_channel       (rsp_demux_015_src0_channel),                     //          .channel
		.src0_startofpacket (rsp_demux_015_src0_startofpacket),               //          .startofpacket
		.src0_endofpacket   (rsp_demux_015_src0_endofpacket)                  //          .endofpacket
	);

	nios_tester_mm_interconnect_0_rsp_mux rsp_mux (
		.clk                  (clk_0_clk_clk),                                                                                  //       clk.clk
		.reset                (nios2_gen2_0_reset_reset_bridge_in_reset_reset),                                                 // clk_reset.reset
		.src_ready            (rsp_mux_src_ready),                                                                              //       src.ready
		.src_valid            (rsp_mux_src_valid),                                                                              //          .valid
		.src_data             (rsp_mux_src_data),                                                                               //          .data
		.src_channel          (rsp_mux_src_channel),                                                                            //          .channel
		.src_startofpacket    (rsp_mux_src_startofpacket),                                                                      //          .startofpacket
		.src_endofpacket      (rsp_mux_src_endofpacket),                                                                        //          .endofpacket
		.sink0_ready          (io_bridge_1_avalon_slave_0_to_nios2_gen2_0_data_master_rsp_width_adapter_src_ready),             //     sink0.ready
		.sink0_valid          (io_bridge_1_avalon_slave_0_to_nios2_gen2_0_data_master_rsp_width_adapter_src_valid),             //          .valid
		.sink0_channel        (io_bridge_1_avalon_slave_0_to_nios2_gen2_0_data_master_rsp_width_adapter_src_channel),           //          .channel
		.sink0_data           (io_bridge_1_avalon_slave_0_to_nios2_gen2_0_data_master_rsp_width_adapter_src_data),              //          .data
		.sink0_startofpacket  (io_bridge_1_avalon_slave_0_to_nios2_gen2_0_data_master_rsp_width_adapter_src_startofpacket),     //          .startofpacket
		.sink0_endofpacket    (io_bridge_1_avalon_slave_0_to_nios2_gen2_0_data_master_rsp_width_adapter_src_endofpacket),       //          .endofpacket
		.sink1_ready          (rsp_demux_001_src0_ready),                                                                       //     sink1.ready
		.sink1_valid          (rsp_demux_001_src0_valid),                                                                       //          .valid
		.sink1_channel        (rsp_demux_001_src0_channel),                                                                     //          .channel
		.sink1_data           (rsp_demux_001_src0_data),                                                                        //          .data
		.sink1_startofpacket  (rsp_demux_001_src0_startofpacket),                                                               //          .startofpacket
		.sink1_endofpacket    (rsp_demux_001_src0_endofpacket),                                                                 //          .endofpacket
		.sink2_ready          (rsp_demux_002_src0_ready),                                                                       //     sink2.ready
		.sink2_valid          (rsp_demux_002_src0_valid),                                                                       //          .valid
		.sink2_channel        (rsp_demux_002_src0_channel),                                                                     //          .channel
		.sink2_data           (rsp_demux_002_src0_data),                                                                        //          .data
		.sink2_startofpacket  (rsp_demux_002_src0_startofpacket),                                                               //          .startofpacket
		.sink2_endofpacket    (rsp_demux_002_src0_endofpacket),                                                                 //          .endofpacket
		.sink3_ready          (rsp_demux_003_src0_ready),                                                                       //     sink3.ready
		.sink3_valid          (rsp_demux_003_src0_valid),                                                                       //          .valid
		.sink3_channel        (rsp_demux_003_src0_channel),                                                                     //          .channel
		.sink3_data           (rsp_demux_003_src0_data),                                                                        //          .data
		.sink3_startofpacket  (rsp_demux_003_src0_startofpacket),                                                               //          .startofpacket
		.sink3_endofpacket    (rsp_demux_003_src0_endofpacket),                                                                 //          .endofpacket
		.sink4_ready          (io_bridge_0_avalon_slave_0_to_nios2_gen2_0_data_master_rsp_width_adapter_src_ready),             //     sink4.ready
		.sink4_valid          (io_bridge_0_avalon_slave_0_to_nios2_gen2_0_data_master_rsp_width_adapter_src_valid),             //          .valid
		.sink4_channel        (io_bridge_0_avalon_slave_0_to_nios2_gen2_0_data_master_rsp_width_adapter_src_channel),           //          .channel
		.sink4_data           (io_bridge_0_avalon_slave_0_to_nios2_gen2_0_data_master_rsp_width_adapter_src_data),              //          .data
		.sink4_startofpacket  (io_bridge_0_avalon_slave_0_to_nios2_gen2_0_data_master_rsp_width_adapter_src_startofpacket),     //          .startofpacket
		.sink4_endofpacket    (io_bridge_0_avalon_slave_0_to_nios2_gen2_0_data_master_rsp_width_adapter_src_endofpacket),       //          .endofpacket
		.sink5_ready          (rsp_demux_005_src0_ready),                                                                       //     sink5.ready
		.sink5_valid          (rsp_demux_005_src0_valid),                                                                       //          .valid
		.sink5_channel        (rsp_demux_005_src0_channel),                                                                     //          .channel
		.sink5_data           (rsp_demux_005_src0_data),                                                                        //          .data
		.sink5_startofpacket  (rsp_demux_005_src0_startofpacket),                                                               //          .startofpacket
		.sink5_endofpacket    (rsp_demux_005_src0_endofpacket),                                                                 //          .endofpacket
		.sink6_ready          (rsp_demux_006_src0_ready),                                                                       //     sink6.ready
		.sink6_valid          (rsp_demux_006_src0_valid),                                                                       //          .valid
		.sink6_channel        (rsp_demux_006_src0_channel),                                                                     //          .channel
		.sink6_data           (rsp_demux_006_src0_data),                                                                        //          .data
		.sink6_startofpacket  (rsp_demux_006_src0_startofpacket),                                                               //          .startofpacket
		.sink6_endofpacket    (rsp_demux_006_src0_endofpacket),                                                                 //          .endofpacket
		.sink7_ready          (rsp_demux_007_src0_ready),                                                                       //     sink7.ready
		.sink7_valid          (rsp_demux_007_src0_valid),                                                                       //          .valid
		.sink7_channel        (rsp_demux_007_src0_channel),                                                                     //          .channel
		.sink7_data           (rsp_demux_007_src0_data),                                                                        //          .data
		.sink7_startofpacket  (rsp_demux_007_src0_startofpacket),                                                               //          .startofpacket
		.sink7_endofpacket    (rsp_demux_007_src0_endofpacket),                                                                 //          .endofpacket
		.sink8_ready          (rsp_demux_008_src0_ready),                                                                       //     sink8.ready
		.sink8_valid          (rsp_demux_008_src0_valid),                                                                       //          .valid
		.sink8_channel        (rsp_demux_008_src0_channel),                                                                     //          .channel
		.sink8_data           (rsp_demux_008_src0_data),                                                                        //          .data
		.sink8_startofpacket  (rsp_demux_008_src0_startofpacket),                                                               //          .startofpacket
		.sink8_endofpacket    (rsp_demux_008_src0_endofpacket),                                                                 //          .endofpacket
		.sink9_ready          (audio_out_dma_descriptor_slave_to_nios2_gen2_0_data_master_rsp_width_adapter_src_ready),         //     sink9.ready
		.sink9_valid          (audio_out_dma_descriptor_slave_to_nios2_gen2_0_data_master_rsp_width_adapter_src_valid),         //          .valid
		.sink9_channel        (audio_out_dma_descriptor_slave_to_nios2_gen2_0_data_master_rsp_width_adapter_src_channel),       //          .channel
		.sink9_data           (audio_out_dma_descriptor_slave_to_nios2_gen2_0_data_master_rsp_width_adapter_src_data),          //          .data
		.sink9_startofpacket  (audio_out_dma_descriptor_slave_to_nios2_gen2_0_data_master_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink9_endofpacket    (audio_out_dma_descriptor_slave_to_nios2_gen2_0_data_master_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink10_ready         (audio_in_dma_descriptor_slave_to_nios2_gen2_0_data_master_rsp_width_adapter_src_ready),          //    sink10.ready
		.sink10_valid         (audio_in_dma_descriptor_slave_to_nios2_gen2_0_data_master_rsp_width_adapter_src_valid),          //          .valid
		.sink10_channel       (audio_in_dma_descriptor_slave_to_nios2_gen2_0_data_master_rsp_width_adapter_src_channel),        //          .channel
		.sink10_data          (audio_in_dma_descriptor_slave_to_nios2_gen2_0_data_master_rsp_width_adapter_src_data),           //          .data
		.sink10_startofpacket (audio_in_dma_descriptor_slave_to_nios2_gen2_0_data_master_rsp_width_adapter_src_startofpacket),  //          .startofpacket
		.sink10_endofpacket   (audio_in_dma_descriptor_slave_to_nios2_gen2_0_data_master_rsp_width_adapter_src_endofpacket),    //          .endofpacket
		.sink11_ready         (jtagdebug_descriptor_slave_to_nios2_gen2_0_data_master_rsp_width_adapter_src_ready),             //    sink11.ready
		.sink11_valid         (jtagdebug_descriptor_slave_to_nios2_gen2_0_data_master_rsp_width_adapter_src_valid),             //          .valid
		.sink11_channel       (jtagdebug_descriptor_slave_to_nios2_gen2_0_data_master_rsp_width_adapter_src_channel),           //          .channel
		.sink11_data          (jtagdebug_descriptor_slave_to_nios2_gen2_0_data_master_rsp_width_adapter_src_data),              //          .data
		.sink11_startofpacket (jtagdebug_descriptor_slave_to_nios2_gen2_0_data_master_rsp_width_adapter_src_startofpacket),     //          .startofpacket
		.sink11_endofpacket   (jtagdebug_descriptor_slave_to_nios2_gen2_0_data_master_rsp_width_adapter_src_endofpacket),       //          .endofpacket
		.sink12_ready         (rsp_demux_012_src0_ready),                                                                       //    sink12.ready
		.sink12_valid         (rsp_demux_012_src0_valid),                                                                       //          .valid
		.sink12_channel       (rsp_demux_012_src0_channel),                                                                     //          .channel
		.sink12_data          (rsp_demux_012_src0_data),                                                                        //          .data
		.sink12_startofpacket (rsp_demux_012_src0_startofpacket),                                                               //          .startofpacket
		.sink12_endofpacket   (rsp_demux_012_src0_endofpacket),                                                                 //          .endofpacket
		.sink13_ready         (rsp_demux_013_src0_ready),                                                                       //    sink13.ready
		.sink13_valid         (rsp_demux_013_src0_valid),                                                                       //          .valid
		.sink13_channel       (rsp_demux_013_src0_channel),                                                                     //          .channel
		.sink13_data          (rsp_demux_013_src0_data),                                                                        //          .data
		.sink13_startofpacket (rsp_demux_013_src0_startofpacket),                                                               //          .startofpacket
		.sink13_endofpacket   (rsp_demux_013_src0_endofpacket),                                                                 //          .endofpacket
		.sink14_ready         (rsp_demux_014_src0_ready),                                                                       //    sink14.ready
		.sink14_valid         (rsp_demux_014_src0_valid),                                                                       //          .valid
		.sink14_channel       (rsp_demux_014_src0_channel),                                                                     //          .channel
		.sink14_data          (rsp_demux_014_src0_data),                                                                        //          .data
		.sink14_startofpacket (rsp_demux_014_src0_startofpacket),                                                               //          .startofpacket
		.sink14_endofpacket   (rsp_demux_014_src0_endofpacket),                                                                 //          .endofpacket
		.sink15_ready         (rsp_demux_015_src0_ready),                                                                       //    sink15.ready
		.sink15_valid         (rsp_demux_015_src0_valid),                                                                       //          .valid
		.sink15_channel       (rsp_demux_015_src0_channel),                                                                     //          .channel
		.sink15_data          (rsp_demux_015_src0_data),                                                                        //          .data
		.sink15_startofpacket (rsp_demux_015_src0_startofpacket),                                                               //          .startofpacket
		.sink15_endofpacket   (rsp_demux_015_src0_endofpacket)                                                                  //          .endofpacket
	);

	nios_tester_mm_interconnect_0_rsp_mux_001 rsp_mux_001 (
		.clk                 (clk_0_clk_clk),                                  //       clk.clk
		.reset               (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_001_src_ready),                          //       src.ready
		.src_valid           (rsp_mux_001_src_valid),                          //          .valid
		.src_data            (rsp_mux_001_src_data),                           //          .data
		.src_channel         (rsp_mux_001_src_channel),                        //          .channel
		.src_startofpacket   (rsp_mux_001_src_startofpacket),                  //          .startofpacket
		.src_endofpacket     (rsp_mux_001_src_endofpacket),                    //          .endofpacket
		.sink0_ready         (rsp_demux_001_src1_ready),                       //     sink0.ready
		.sink0_valid         (rsp_demux_001_src1_valid),                       //          .valid
		.sink0_channel       (rsp_demux_001_src1_channel),                     //          .channel
		.sink0_data          (rsp_demux_001_src1_data),                        //          .data
		.sink0_startofpacket (rsp_demux_001_src1_startofpacket),               //          .startofpacket
		.sink0_endofpacket   (rsp_demux_001_src1_endofpacket),                 //          .endofpacket
		.sink1_ready         (rsp_demux_008_src1_ready),                       //     sink1.ready
		.sink1_valid         (rsp_demux_008_src1_valid),                       //          .valid
		.sink1_channel       (rsp_demux_008_src1_channel),                     //          .channel
		.sink1_data          (rsp_demux_008_src1_data),                        //          .data
		.sink1_startofpacket (rsp_demux_008_src1_startofpacket),               //          .startofpacket
		.sink1_endofpacket   (rsp_demux_008_src1_endofpacket),                 //          .endofpacket
		.sink2_ready         (rsp_demux_012_src1_ready),                       //     sink2.ready
		.sink2_valid         (rsp_demux_012_src1_valid),                       //          .valid
		.sink2_channel       (rsp_demux_012_src1_channel),                     //          .channel
		.sink2_data          (rsp_demux_012_src1_data),                        //          .data
		.sink2_startofpacket (rsp_demux_012_src1_startofpacket),               //          .startofpacket
		.sink2_endofpacket   (rsp_demux_012_src1_endofpacket)                  //          .endofpacket
	);

	nios_tester_mm_interconnect_0_rsp_mux_002 rsp_mux_002 (
		.clk                 (clk_0_clk_clk),                                  //       clk.clk
		.reset               (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_002_src_ready),                          //       src.ready
		.src_valid           (rsp_mux_002_src_valid),                          //          .valid
		.src_data            (rsp_mux_002_src_data),                           //          .data
		.src_channel         (rsp_mux_002_src_channel),                        //          .channel
		.src_startofpacket   (rsp_mux_002_src_startofpacket),                  //          .startofpacket
		.src_endofpacket     (rsp_mux_002_src_endofpacket),                    //          .endofpacket
		.sink0_ready         (rsp_demux_001_src2_ready),                       //     sink0.ready
		.sink0_valid         (rsp_demux_001_src2_valid),                       //          .valid
		.sink0_channel       (rsp_demux_001_src2_channel),                     //          .channel
		.sink0_data          (rsp_demux_001_src2_data),                        //          .data
		.sink0_startofpacket (rsp_demux_001_src2_startofpacket),               //          .startofpacket
		.sink0_endofpacket   (rsp_demux_001_src2_endofpacket)                  //          .endofpacket
	);

	nios_tester_mm_interconnect_0_rsp_mux_002 rsp_mux_003 (
		.clk                 (clk_0_clk_clk),                                  //       clk.clk
		.reset               (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_003_src_ready),                          //       src.ready
		.src_valid           (rsp_mux_003_src_valid),                          //          .valid
		.src_data            (rsp_mux_003_src_data),                           //          .data
		.src_channel         (rsp_mux_003_src_channel),                        //          .channel
		.src_startofpacket   (rsp_mux_003_src_startofpacket),                  //          .startofpacket
		.src_endofpacket     (rsp_mux_003_src_endofpacket),                    //          .endofpacket
		.sink0_ready         (rsp_demux_001_src3_ready),                       //     sink0.ready
		.sink0_valid         (rsp_demux_001_src3_valid),                       //          .valid
		.sink0_channel       (rsp_demux_001_src3_channel),                     //          .channel
		.sink0_data          (rsp_demux_001_src3_data),                        //          .data
		.sink0_startofpacket (rsp_demux_001_src3_startofpacket),               //          .startofpacket
		.sink0_endofpacket   (rsp_demux_001_src3_endofpacket)                  //          .endofpacket
	);

	nios_tester_mm_interconnect_0_rsp_mux_004 rsp_mux_004 (
		.clk                 (clk_0_clk_clk),                                                                         //       clk.clk
		.reset               (nios2_gen2_0_reset_reset_bridge_in_reset_reset),                                        // clk_reset.reset
		.src_ready           (rsp_mux_004_src_ready),                                                                 //       src.ready
		.src_valid           (rsp_mux_004_src_valid),                                                                 //          .valid
		.src_data            (rsp_mux_004_src_data),                                                                  //          .data
		.src_channel         (rsp_mux_004_src_channel),                                                               //          .channel
		.src_startofpacket   (rsp_mux_004_src_startofpacket),                                                         //          .startofpacket
		.src_endofpacket     (rsp_mux_004_src_endofpacket),                                                           //          .endofpacket
		.sink0_ready         (avalon2mem_0_avalon_slave_0_to_jtagdebug_mm_write_rsp_width_adapter_src_ready),         //     sink0.ready
		.sink0_valid         (avalon2mem_0_avalon_slave_0_to_jtagdebug_mm_write_rsp_width_adapter_src_valid),         //          .valid
		.sink0_channel       (avalon2mem_0_avalon_slave_0_to_jtagdebug_mm_write_rsp_width_adapter_src_channel),       //          .channel
		.sink0_data          (avalon2mem_0_avalon_slave_0_to_jtagdebug_mm_write_rsp_width_adapter_src_data),          //          .data
		.sink0_startofpacket (avalon2mem_0_avalon_slave_0_to_jtagdebug_mm_write_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket   (avalon2mem_0_avalon_slave_0_to_jtagdebug_mm_write_rsp_width_adapter_src_endofpacket)    //          .endofpacket
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (78),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (81),
		.IN_PKT_BURSTWRAP_L            (79),
		.IN_PKT_BURST_SIZE_H           (84),
		.IN_PKT_BURST_SIZE_L           (82),
		.IN_PKT_RESPONSE_STATUS_H      (108),
		.IN_PKT_RESPONSE_STATUS_L      (107),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (86),
		.IN_PKT_BURST_TYPE_L           (85),
		.IN_PKT_ORI_BURST_SIZE_L       (109),
		.IN_PKT_ORI_BURST_SIZE_H       (111),
		.IN_ST_DATA_W                  (112),
		.OUT_PKT_ADDR_H                (40),
		.OUT_PKT_ADDR_L                (9),
		.OUT_PKT_DATA_H                (7),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (8),
		.OUT_PKT_BYTEEN_L              (8),
		.OUT_PKT_BYTE_CNT_H            (51),
		.OUT_PKT_BYTE_CNT_L            (47),
		.OUT_PKT_TRANS_COMPRESSED_READ (41),
		.OUT_PKT_BURST_SIZE_H          (57),
		.OUT_PKT_BURST_SIZE_L          (55),
		.OUT_PKT_RESPONSE_STATUS_H     (81),
		.OUT_PKT_RESPONSE_STATUS_L     (80),
		.OUT_PKT_TRANS_EXCLUSIVE       (46),
		.OUT_PKT_BURST_TYPE_H          (59),
		.OUT_PKT_BURST_TYPE_L          (58),
		.OUT_PKT_ORI_BURST_SIZE_L      (82),
		.OUT_PKT_ORI_BURST_SIZE_H      (84),
		.OUT_ST_DATA_W                 (85),
		.ST_CHANNEL_W                  (16),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) nios2_gen2_0_data_master_to_io_bridge_1_avalon_slave_0_cmd_width_adapter (
		.clk                  (clk_0_clk_clk),                                                                              //       clk.clk
		.reset                (nios2_gen2_0_reset_reset_bridge_in_reset_reset),                                             // clk_reset.reset
		.in_valid             (cmd_demux_src0_valid),                                                                       //      sink.valid
		.in_channel           (cmd_demux_src0_channel),                                                                     //          .channel
		.in_startofpacket     (cmd_demux_src0_startofpacket),                                                               //          .startofpacket
		.in_endofpacket       (cmd_demux_src0_endofpacket),                                                                 //          .endofpacket
		.in_ready             (cmd_demux_src0_ready),                                                                       //          .ready
		.in_data              (cmd_demux_src0_data),                                                                        //          .data
		.out_endofpacket      (nios2_gen2_0_data_master_to_io_bridge_1_avalon_slave_0_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (nios2_gen2_0_data_master_to_io_bridge_1_avalon_slave_0_cmd_width_adapter_src_data),          //          .data
		.out_channel          (nios2_gen2_0_data_master_to_io_bridge_1_avalon_slave_0_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (nios2_gen2_0_data_master_to_io_bridge_1_avalon_slave_0_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (nios2_gen2_0_data_master_to_io_bridge_1_avalon_slave_0_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (nios2_gen2_0_data_master_to_io_bridge_1_avalon_slave_0_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                                      // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (78),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (81),
		.IN_PKT_BURSTWRAP_L            (79),
		.IN_PKT_BURST_SIZE_H           (84),
		.IN_PKT_BURST_SIZE_L           (82),
		.IN_PKT_RESPONSE_STATUS_H      (108),
		.IN_PKT_RESPONSE_STATUS_L      (107),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (86),
		.IN_PKT_BURST_TYPE_L           (85),
		.IN_PKT_ORI_BURST_SIZE_L       (109),
		.IN_PKT_ORI_BURST_SIZE_H       (111),
		.IN_ST_DATA_W                  (112),
		.OUT_PKT_ADDR_H                (40),
		.OUT_PKT_ADDR_L                (9),
		.OUT_PKT_DATA_H                (7),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (8),
		.OUT_PKT_BYTEEN_L              (8),
		.OUT_PKT_BYTE_CNT_H            (51),
		.OUT_PKT_BYTE_CNT_L            (47),
		.OUT_PKT_TRANS_COMPRESSED_READ (41),
		.OUT_PKT_BURST_SIZE_H          (57),
		.OUT_PKT_BURST_SIZE_L          (55),
		.OUT_PKT_RESPONSE_STATUS_H     (81),
		.OUT_PKT_RESPONSE_STATUS_L     (80),
		.OUT_PKT_TRANS_EXCLUSIVE       (46),
		.OUT_PKT_BURST_TYPE_H          (59),
		.OUT_PKT_BURST_TYPE_L          (58),
		.OUT_PKT_ORI_BURST_SIZE_L      (82),
		.OUT_PKT_ORI_BURST_SIZE_H      (84),
		.OUT_ST_DATA_W                 (85),
		.ST_CHANNEL_W                  (16),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) nios2_gen2_0_data_master_to_io_bridge_0_avalon_slave_0_cmd_width_adapter (
		.clk                  (clk_0_clk_clk),                                                                              //       clk.clk
		.reset                (nios2_gen2_0_reset_reset_bridge_in_reset_reset),                                             // clk_reset.reset
		.in_valid             (cmd_demux_src4_valid),                                                                       //      sink.valid
		.in_channel           (cmd_demux_src4_channel),                                                                     //          .channel
		.in_startofpacket     (cmd_demux_src4_startofpacket),                                                               //          .startofpacket
		.in_endofpacket       (cmd_demux_src4_endofpacket),                                                                 //          .endofpacket
		.in_ready             (cmd_demux_src4_ready),                                                                       //          .ready
		.in_data              (cmd_demux_src4_data),                                                                        //          .data
		.out_endofpacket      (nios2_gen2_0_data_master_to_io_bridge_0_avalon_slave_0_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (nios2_gen2_0_data_master_to_io_bridge_0_avalon_slave_0_cmd_width_adapter_src_data),          //          .data
		.out_channel          (nios2_gen2_0_data_master_to_io_bridge_0_avalon_slave_0_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (nios2_gen2_0_data_master_to_io_bridge_0_avalon_slave_0_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (nios2_gen2_0_data_master_to_io_bridge_0_avalon_slave_0_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (nios2_gen2_0_data_master_to_io_bridge_0_avalon_slave_0_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                                      // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (78),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (81),
		.IN_PKT_BURSTWRAP_L            (79),
		.IN_PKT_BURST_SIZE_H           (84),
		.IN_PKT_BURST_SIZE_L           (82),
		.IN_PKT_RESPONSE_STATUS_H      (108),
		.IN_PKT_RESPONSE_STATUS_L      (107),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (86),
		.IN_PKT_BURST_TYPE_L           (85),
		.IN_PKT_ORI_BURST_SIZE_L       (109),
		.IN_PKT_ORI_BURST_SIZE_H       (111),
		.IN_ST_DATA_W                  (112),
		.OUT_PKT_ADDR_H                (175),
		.OUT_PKT_ADDR_L                (144),
		.OUT_PKT_DATA_H                (127),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (143),
		.OUT_PKT_BYTEEN_L              (128),
		.OUT_PKT_BYTE_CNT_H            (186),
		.OUT_PKT_BYTE_CNT_L            (182),
		.OUT_PKT_TRANS_COMPRESSED_READ (176),
		.OUT_PKT_BURST_SIZE_H          (192),
		.OUT_PKT_BURST_SIZE_L          (190),
		.OUT_PKT_RESPONSE_STATUS_H     (216),
		.OUT_PKT_RESPONSE_STATUS_L     (215),
		.OUT_PKT_TRANS_EXCLUSIVE       (181),
		.OUT_PKT_BURST_TYPE_H          (194),
		.OUT_PKT_BURST_TYPE_L          (193),
		.OUT_PKT_ORI_BURST_SIZE_L      (217),
		.OUT_PKT_ORI_BURST_SIZE_H      (219),
		.OUT_ST_DATA_W                 (220),
		.ST_CHANNEL_W                  (16),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) nios2_gen2_0_data_master_to_audio_out_dma_descriptor_slave_cmd_width_adapter (
		.clk                  (clk_0_clk_clk),                                                                                  //       clk.clk
		.reset                (nios2_gen2_0_reset_reset_bridge_in_reset_reset),                                                 // clk_reset.reset
		.in_valid             (cmd_demux_src9_valid),                                                                           //      sink.valid
		.in_channel           (cmd_demux_src9_channel),                                                                         //          .channel
		.in_startofpacket     (cmd_demux_src9_startofpacket),                                                                   //          .startofpacket
		.in_endofpacket       (cmd_demux_src9_endofpacket),                                                                     //          .endofpacket
		.in_ready             (cmd_demux_src9_ready),                                                                           //          .ready
		.in_data              (cmd_demux_src9_data),                                                                            //          .data
		.out_endofpacket      (nios2_gen2_0_data_master_to_audio_out_dma_descriptor_slave_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (nios2_gen2_0_data_master_to_audio_out_dma_descriptor_slave_cmd_width_adapter_src_data),          //          .data
		.out_channel          (nios2_gen2_0_data_master_to_audio_out_dma_descriptor_slave_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (nios2_gen2_0_data_master_to_audio_out_dma_descriptor_slave_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (nios2_gen2_0_data_master_to_audio_out_dma_descriptor_slave_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (nios2_gen2_0_data_master_to_audio_out_dma_descriptor_slave_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                                          // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (78),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (81),
		.IN_PKT_BURSTWRAP_L            (79),
		.IN_PKT_BURST_SIZE_H           (84),
		.IN_PKT_BURST_SIZE_L           (82),
		.IN_PKT_RESPONSE_STATUS_H      (108),
		.IN_PKT_RESPONSE_STATUS_L      (107),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (86),
		.IN_PKT_BURST_TYPE_L           (85),
		.IN_PKT_ORI_BURST_SIZE_L       (109),
		.IN_PKT_ORI_BURST_SIZE_H       (111),
		.IN_ST_DATA_W                  (112),
		.OUT_PKT_ADDR_H                (175),
		.OUT_PKT_ADDR_L                (144),
		.OUT_PKT_DATA_H                (127),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (143),
		.OUT_PKT_BYTEEN_L              (128),
		.OUT_PKT_BYTE_CNT_H            (186),
		.OUT_PKT_BYTE_CNT_L            (182),
		.OUT_PKT_TRANS_COMPRESSED_READ (176),
		.OUT_PKT_BURST_SIZE_H          (192),
		.OUT_PKT_BURST_SIZE_L          (190),
		.OUT_PKT_RESPONSE_STATUS_H     (216),
		.OUT_PKT_RESPONSE_STATUS_L     (215),
		.OUT_PKT_TRANS_EXCLUSIVE       (181),
		.OUT_PKT_BURST_TYPE_H          (194),
		.OUT_PKT_BURST_TYPE_L          (193),
		.OUT_PKT_ORI_BURST_SIZE_L      (217),
		.OUT_PKT_ORI_BURST_SIZE_H      (219),
		.OUT_ST_DATA_W                 (220),
		.ST_CHANNEL_W                  (16),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) nios2_gen2_0_data_master_to_audio_in_dma_descriptor_slave_cmd_width_adapter (
		.clk                  (clk_0_clk_clk),                                                                                 //       clk.clk
		.reset                (nios2_gen2_0_reset_reset_bridge_in_reset_reset),                                                // clk_reset.reset
		.in_valid             (cmd_demux_src10_valid),                                                                         //      sink.valid
		.in_channel           (cmd_demux_src10_channel),                                                                       //          .channel
		.in_startofpacket     (cmd_demux_src10_startofpacket),                                                                 //          .startofpacket
		.in_endofpacket       (cmd_demux_src10_endofpacket),                                                                   //          .endofpacket
		.in_ready             (cmd_demux_src10_ready),                                                                         //          .ready
		.in_data              (cmd_demux_src10_data),                                                                          //          .data
		.out_endofpacket      (nios2_gen2_0_data_master_to_audio_in_dma_descriptor_slave_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (nios2_gen2_0_data_master_to_audio_in_dma_descriptor_slave_cmd_width_adapter_src_data),          //          .data
		.out_channel          (nios2_gen2_0_data_master_to_audio_in_dma_descriptor_slave_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (nios2_gen2_0_data_master_to_audio_in_dma_descriptor_slave_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (nios2_gen2_0_data_master_to_audio_in_dma_descriptor_slave_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (nios2_gen2_0_data_master_to_audio_in_dma_descriptor_slave_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                                         // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (78),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (81),
		.IN_PKT_BURSTWRAP_L            (79),
		.IN_PKT_BURST_SIZE_H           (84),
		.IN_PKT_BURST_SIZE_L           (82),
		.IN_PKT_RESPONSE_STATUS_H      (108),
		.IN_PKT_RESPONSE_STATUS_L      (107),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (86),
		.IN_PKT_BURST_TYPE_L           (85),
		.IN_PKT_ORI_BURST_SIZE_L       (109),
		.IN_PKT_ORI_BURST_SIZE_H       (111),
		.IN_ST_DATA_W                  (112),
		.OUT_PKT_ADDR_H                (175),
		.OUT_PKT_ADDR_L                (144),
		.OUT_PKT_DATA_H                (127),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (143),
		.OUT_PKT_BYTEEN_L              (128),
		.OUT_PKT_BYTE_CNT_H            (186),
		.OUT_PKT_BYTE_CNT_L            (182),
		.OUT_PKT_TRANS_COMPRESSED_READ (176),
		.OUT_PKT_BURST_SIZE_H          (192),
		.OUT_PKT_BURST_SIZE_L          (190),
		.OUT_PKT_RESPONSE_STATUS_H     (216),
		.OUT_PKT_RESPONSE_STATUS_L     (215),
		.OUT_PKT_TRANS_EXCLUSIVE       (181),
		.OUT_PKT_BURST_TYPE_H          (194),
		.OUT_PKT_BURST_TYPE_L          (193),
		.OUT_PKT_ORI_BURST_SIZE_L      (217),
		.OUT_PKT_ORI_BURST_SIZE_H      (219),
		.OUT_ST_DATA_W                 (220),
		.ST_CHANNEL_W                  (16),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) nios2_gen2_0_data_master_to_jtagdebug_descriptor_slave_cmd_width_adapter (
		.clk                  (clk_0_clk_clk),                                                                              //       clk.clk
		.reset                (nios2_gen2_0_reset_reset_bridge_in_reset_reset),                                             // clk_reset.reset
		.in_valid             (cmd_demux_src11_valid),                                                                      //      sink.valid
		.in_channel           (cmd_demux_src11_channel),                                                                    //          .channel
		.in_startofpacket     (cmd_demux_src11_startofpacket),                                                              //          .startofpacket
		.in_endofpacket       (cmd_demux_src11_endofpacket),                                                                //          .endofpacket
		.in_ready             (cmd_demux_src11_ready),                                                                      //          .ready
		.in_data              (cmd_demux_src11_data),                                                                       //          .data
		.out_endofpacket      (nios2_gen2_0_data_master_to_jtagdebug_descriptor_slave_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (nios2_gen2_0_data_master_to_jtagdebug_descriptor_slave_cmd_width_adapter_src_data),          //          .data
		.out_channel          (nios2_gen2_0_data_master_to_jtagdebug_descriptor_slave_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (nios2_gen2_0_data_master_to_jtagdebug_descriptor_slave_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (nios2_gen2_0_data_master_to_jtagdebug_descriptor_slave_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (nios2_gen2_0_data_master_to_jtagdebug_descriptor_slave_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                                      // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (40),
		.IN_PKT_ADDR_L                 (9),
		.IN_PKT_DATA_H                 (7),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (8),
		.IN_PKT_BYTEEN_L               (8),
		.IN_PKT_BYTE_CNT_H             (51),
		.IN_PKT_BYTE_CNT_L             (47),
		.IN_PKT_TRANS_COMPRESSED_READ  (41),
		.IN_PKT_TRANS_WRITE            (43),
		.IN_PKT_BURSTWRAP_H            (54),
		.IN_PKT_BURSTWRAP_L            (52),
		.IN_PKT_BURST_SIZE_H           (57),
		.IN_PKT_BURST_SIZE_L           (55),
		.IN_PKT_RESPONSE_STATUS_H      (81),
		.IN_PKT_RESPONSE_STATUS_L      (80),
		.IN_PKT_TRANS_EXCLUSIVE        (46),
		.IN_PKT_BURST_TYPE_H           (59),
		.IN_PKT_BURST_TYPE_L           (58),
		.IN_PKT_ORI_BURST_SIZE_L       (82),
		.IN_PKT_ORI_BURST_SIZE_H       (84),
		.IN_ST_DATA_W                  (85),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (78),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (84),
		.OUT_PKT_BURST_SIZE_L          (82),
		.OUT_PKT_RESPONSE_STATUS_H     (108),
		.OUT_PKT_RESPONSE_STATUS_L     (107),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (86),
		.OUT_PKT_BURST_TYPE_L          (85),
		.OUT_PKT_ORI_BURST_SIZE_L      (109),
		.OUT_PKT_ORI_BURST_SIZE_H      (111),
		.OUT_ST_DATA_W                 (112),
		.ST_CHANNEL_W                  (16),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) jtagdebug_mm_write_to_avalon2mem_0_avalon_slave_0_cmd_width_adapter (
		.clk                  (clk_0_clk_clk),                                                                         //       clk.clk
		.reset                (nios2_gen2_0_reset_reset_bridge_in_reset_reset),                                        // clk_reset.reset
		.in_valid             (cmd_demux_004_src0_valid),                                                              //      sink.valid
		.in_channel           (cmd_demux_004_src0_channel),                                                            //          .channel
		.in_startofpacket     (cmd_demux_004_src0_startofpacket),                                                      //          .startofpacket
		.in_endofpacket       (cmd_demux_004_src0_endofpacket),                                                        //          .endofpacket
		.in_ready             (cmd_demux_004_src0_ready),                                                              //          .ready
		.in_data              (cmd_demux_004_src0_data),                                                               //          .data
		.out_endofpacket      (jtagdebug_mm_write_to_avalon2mem_0_avalon_slave_0_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (jtagdebug_mm_write_to_avalon2mem_0_avalon_slave_0_cmd_width_adapter_src_data),          //          .data
		.out_channel          (jtagdebug_mm_write_to_avalon2mem_0_avalon_slave_0_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (jtagdebug_mm_write_to_avalon2mem_0_avalon_slave_0_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (jtagdebug_mm_write_to_avalon2mem_0_avalon_slave_0_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (jtagdebug_mm_write_to_avalon2mem_0_avalon_slave_0_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                                 // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (40),
		.IN_PKT_ADDR_L                 (9),
		.IN_PKT_DATA_H                 (7),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (8),
		.IN_PKT_BYTEEN_L               (8),
		.IN_PKT_BYTE_CNT_H             (51),
		.IN_PKT_BYTE_CNT_L             (47),
		.IN_PKT_TRANS_COMPRESSED_READ  (41),
		.IN_PKT_TRANS_WRITE            (43),
		.IN_PKT_BURSTWRAP_H            (54),
		.IN_PKT_BURSTWRAP_L            (52),
		.IN_PKT_BURST_SIZE_H           (57),
		.IN_PKT_BURST_SIZE_L           (55),
		.IN_PKT_RESPONSE_STATUS_H      (81),
		.IN_PKT_RESPONSE_STATUS_L      (80),
		.IN_PKT_TRANS_EXCLUSIVE        (46),
		.IN_PKT_BURST_TYPE_H           (59),
		.IN_PKT_BURST_TYPE_L           (58),
		.IN_PKT_ORI_BURST_SIZE_L       (82),
		.IN_PKT_ORI_BURST_SIZE_H       (84),
		.IN_ST_DATA_W                  (85),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (78),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (84),
		.OUT_PKT_BURST_SIZE_L          (82),
		.OUT_PKT_RESPONSE_STATUS_H     (108),
		.OUT_PKT_RESPONSE_STATUS_L     (107),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (86),
		.OUT_PKT_BURST_TYPE_L          (85),
		.OUT_PKT_ORI_BURST_SIZE_L      (109),
		.OUT_PKT_ORI_BURST_SIZE_H      (111),
		.OUT_ST_DATA_W                 (112),
		.ST_CHANNEL_W                  (16),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) io_bridge_1_avalon_slave_0_to_nios2_gen2_0_data_master_rsp_width_adapter (
		.clk                  (clk_0_clk_clk),                                                                              //       clk.clk
		.reset                (nios2_gen2_0_reset_reset_bridge_in_reset_reset),                                             // clk_reset.reset
		.in_valid             (rsp_demux_src0_valid),                                                                       //      sink.valid
		.in_channel           (rsp_demux_src0_channel),                                                                     //          .channel
		.in_startofpacket     (rsp_demux_src0_startofpacket),                                                               //          .startofpacket
		.in_endofpacket       (rsp_demux_src0_endofpacket),                                                                 //          .endofpacket
		.in_ready             (rsp_demux_src0_ready),                                                                       //          .ready
		.in_data              (rsp_demux_src0_data),                                                                        //          .data
		.out_endofpacket      (io_bridge_1_avalon_slave_0_to_nios2_gen2_0_data_master_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (io_bridge_1_avalon_slave_0_to_nios2_gen2_0_data_master_rsp_width_adapter_src_data),          //          .data
		.out_channel          (io_bridge_1_avalon_slave_0_to_nios2_gen2_0_data_master_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (io_bridge_1_avalon_slave_0_to_nios2_gen2_0_data_master_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (io_bridge_1_avalon_slave_0_to_nios2_gen2_0_data_master_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (io_bridge_1_avalon_slave_0_to_nios2_gen2_0_data_master_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                                      // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (78),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_TRANS_WRITE            (70),
		.IN_PKT_BURSTWRAP_H            (81),
		.IN_PKT_BURSTWRAP_L            (79),
		.IN_PKT_BURST_SIZE_H           (84),
		.IN_PKT_BURST_SIZE_L           (82),
		.IN_PKT_RESPONSE_STATUS_H      (108),
		.IN_PKT_RESPONSE_STATUS_L      (107),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (86),
		.IN_PKT_BURST_TYPE_L           (85),
		.IN_PKT_ORI_BURST_SIZE_L       (109),
		.IN_PKT_ORI_BURST_SIZE_H       (111),
		.IN_ST_DATA_W                  (112),
		.OUT_PKT_ADDR_H                (40),
		.OUT_PKT_ADDR_L                (9),
		.OUT_PKT_DATA_H                (7),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (8),
		.OUT_PKT_BYTEEN_L              (8),
		.OUT_PKT_BYTE_CNT_H            (51),
		.OUT_PKT_BYTE_CNT_L            (47),
		.OUT_PKT_TRANS_COMPRESSED_READ (41),
		.OUT_PKT_BURST_SIZE_H          (57),
		.OUT_PKT_BURST_SIZE_L          (55),
		.OUT_PKT_RESPONSE_STATUS_H     (81),
		.OUT_PKT_RESPONSE_STATUS_L     (80),
		.OUT_PKT_TRANS_EXCLUSIVE       (46),
		.OUT_PKT_BURST_TYPE_H          (59),
		.OUT_PKT_BURST_TYPE_L          (58),
		.OUT_PKT_ORI_BURST_SIZE_L      (82),
		.OUT_PKT_ORI_BURST_SIZE_H      (84),
		.OUT_ST_DATA_W                 (85),
		.ST_CHANNEL_W                  (16),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) avalon2mem_0_avalon_slave_0_to_jtagdebug_mm_write_rsp_width_adapter (
		.clk                  (clk_0_clk_clk),                                                                         //       clk.clk
		.reset                (nios2_gen2_0_reset_reset_bridge_in_reset_reset),                                        // clk_reset.reset
		.in_valid             (rsp_demux_001_src4_valid),                                                              //      sink.valid
		.in_channel           (rsp_demux_001_src4_channel),                                                            //          .channel
		.in_startofpacket     (rsp_demux_001_src4_startofpacket),                                                      //          .startofpacket
		.in_endofpacket       (rsp_demux_001_src4_endofpacket),                                                        //          .endofpacket
		.in_ready             (rsp_demux_001_src4_ready),                                                              //          .ready
		.in_data              (rsp_demux_001_src4_data),                                                               //          .data
		.out_endofpacket      (avalon2mem_0_avalon_slave_0_to_jtagdebug_mm_write_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (avalon2mem_0_avalon_slave_0_to_jtagdebug_mm_write_rsp_width_adapter_src_data),          //          .data
		.out_channel          (avalon2mem_0_avalon_slave_0_to_jtagdebug_mm_write_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (avalon2mem_0_avalon_slave_0_to_jtagdebug_mm_write_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (avalon2mem_0_avalon_slave_0_to_jtagdebug_mm_write_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (avalon2mem_0_avalon_slave_0_to_jtagdebug_mm_write_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                                 // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (40),
		.IN_PKT_ADDR_L                 (9),
		.IN_PKT_DATA_H                 (7),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (8),
		.IN_PKT_BYTEEN_L               (8),
		.IN_PKT_BYTE_CNT_H             (51),
		.IN_PKT_BYTE_CNT_L             (47),
		.IN_PKT_TRANS_COMPRESSED_READ  (41),
		.IN_PKT_TRANS_WRITE            (43),
		.IN_PKT_BURSTWRAP_H            (54),
		.IN_PKT_BURSTWRAP_L            (52),
		.IN_PKT_BURST_SIZE_H           (57),
		.IN_PKT_BURST_SIZE_L           (55),
		.IN_PKT_RESPONSE_STATUS_H      (81),
		.IN_PKT_RESPONSE_STATUS_L      (80),
		.IN_PKT_TRANS_EXCLUSIVE        (46),
		.IN_PKT_BURST_TYPE_H           (59),
		.IN_PKT_BURST_TYPE_L           (58),
		.IN_PKT_ORI_BURST_SIZE_L       (82),
		.IN_PKT_ORI_BURST_SIZE_H       (84),
		.IN_ST_DATA_W                  (85),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (78),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (84),
		.OUT_PKT_BURST_SIZE_L          (82),
		.OUT_PKT_RESPONSE_STATUS_H     (108),
		.OUT_PKT_RESPONSE_STATUS_L     (107),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (86),
		.OUT_PKT_BURST_TYPE_L          (85),
		.OUT_PKT_ORI_BURST_SIZE_L      (109),
		.OUT_PKT_ORI_BURST_SIZE_H      (111),
		.OUT_ST_DATA_W                 (112),
		.ST_CHANNEL_W                  (16),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) io_bridge_0_avalon_slave_0_to_nios2_gen2_0_data_master_rsp_width_adapter (
		.clk                  (clk_0_clk_clk),                                                                              //       clk.clk
		.reset                (nios2_gen2_0_reset_reset_bridge_in_reset_reset),                                             // clk_reset.reset
		.in_valid             (rsp_demux_004_src0_valid),                                                                   //      sink.valid
		.in_channel           (rsp_demux_004_src0_channel),                                                                 //          .channel
		.in_startofpacket     (rsp_demux_004_src0_startofpacket),                                                           //          .startofpacket
		.in_endofpacket       (rsp_demux_004_src0_endofpacket),                                                             //          .endofpacket
		.in_ready             (rsp_demux_004_src0_ready),                                                                   //          .ready
		.in_data              (rsp_demux_004_src0_data),                                                                    //          .data
		.out_endofpacket      (io_bridge_0_avalon_slave_0_to_nios2_gen2_0_data_master_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (io_bridge_0_avalon_slave_0_to_nios2_gen2_0_data_master_rsp_width_adapter_src_data),          //          .data
		.out_channel          (io_bridge_0_avalon_slave_0_to_nios2_gen2_0_data_master_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (io_bridge_0_avalon_slave_0_to_nios2_gen2_0_data_master_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (io_bridge_0_avalon_slave_0_to_nios2_gen2_0_data_master_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (io_bridge_0_avalon_slave_0_to_nios2_gen2_0_data_master_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                                      // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (175),
		.IN_PKT_ADDR_L                 (144),
		.IN_PKT_DATA_H                 (127),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (143),
		.IN_PKT_BYTEEN_L               (128),
		.IN_PKT_BYTE_CNT_H             (186),
		.IN_PKT_BYTE_CNT_L             (182),
		.IN_PKT_TRANS_COMPRESSED_READ  (176),
		.IN_PKT_TRANS_WRITE            (178),
		.IN_PKT_BURSTWRAP_H            (189),
		.IN_PKT_BURSTWRAP_L            (187),
		.IN_PKT_BURST_SIZE_H           (192),
		.IN_PKT_BURST_SIZE_L           (190),
		.IN_PKT_RESPONSE_STATUS_H      (216),
		.IN_PKT_RESPONSE_STATUS_L      (215),
		.IN_PKT_TRANS_EXCLUSIVE        (181),
		.IN_PKT_BURST_TYPE_H           (194),
		.IN_PKT_BURST_TYPE_L           (193),
		.IN_PKT_ORI_BURST_SIZE_L       (217),
		.IN_PKT_ORI_BURST_SIZE_H       (219),
		.IN_ST_DATA_W                  (220),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (78),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (84),
		.OUT_PKT_BURST_SIZE_L          (82),
		.OUT_PKT_RESPONSE_STATUS_H     (108),
		.OUT_PKT_RESPONSE_STATUS_L     (107),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (86),
		.OUT_PKT_BURST_TYPE_L          (85),
		.OUT_PKT_ORI_BURST_SIZE_L      (109),
		.OUT_PKT_ORI_BURST_SIZE_H      (111),
		.OUT_ST_DATA_W                 (112),
		.ST_CHANNEL_W                  (16),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) audio_out_dma_descriptor_slave_to_nios2_gen2_0_data_master_rsp_width_adapter (
		.clk                  (clk_0_clk_clk),                                                                                  //       clk.clk
		.reset                (nios2_gen2_0_reset_reset_bridge_in_reset_reset),                                                 // clk_reset.reset
		.in_valid             (rsp_demux_009_src0_valid),                                                                       //      sink.valid
		.in_channel           (rsp_demux_009_src0_channel),                                                                     //          .channel
		.in_startofpacket     (rsp_demux_009_src0_startofpacket),                                                               //          .startofpacket
		.in_endofpacket       (rsp_demux_009_src0_endofpacket),                                                                 //          .endofpacket
		.in_ready             (rsp_demux_009_src0_ready),                                                                       //          .ready
		.in_data              (rsp_demux_009_src0_data),                                                                        //          .data
		.out_endofpacket      (audio_out_dma_descriptor_slave_to_nios2_gen2_0_data_master_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (audio_out_dma_descriptor_slave_to_nios2_gen2_0_data_master_rsp_width_adapter_src_data),          //          .data
		.out_channel          (audio_out_dma_descriptor_slave_to_nios2_gen2_0_data_master_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (audio_out_dma_descriptor_slave_to_nios2_gen2_0_data_master_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (audio_out_dma_descriptor_slave_to_nios2_gen2_0_data_master_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (audio_out_dma_descriptor_slave_to_nios2_gen2_0_data_master_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                                          // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (175),
		.IN_PKT_ADDR_L                 (144),
		.IN_PKT_DATA_H                 (127),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (143),
		.IN_PKT_BYTEEN_L               (128),
		.IN_PKT_BYTE_CNT_H             (186),
		.IN_PKT_BYTE_CNT_L             (182),
		.IN_PKT_TRANS_COMPRESSED_READ  (176),
		.IN_PKT_TRANS_WRITE            (178),
		.IN_PKT_BURSTWRAP_H            (189),
		.IN_PKT_BURSTWRAP_L            (187),
		.IN_PKT_BURST_SIZE_H           (192),
		.IN_PKT_BURST_SIZE_L           (190),
		.IN_PKT_RESPONSE_STATUS_H      (216),
		.IN_PKT_RESPONSE_STATUS_L      (215),
		.IN_PKT_TRANS_EXCLUSIVE        (181),
		.IN_PKT_BURST_TYPE_H           (194),
		.IN_PKT_BURST_TYPE_L           (193),
		.IN_PKT_ORI_BURST_SIZE_L       (217),
		.IN_PKT_ORI_BURST_SIZE_H       (219),
		.IN_ST_DATA_W                  (220),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (78),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (84),
		.OUT_PKT_BURST_SIZE_L          (82),
		.OUT_PKT_RESPONSE_STATUS_H     (108),
		.OUT_PKT_RESPONSE_STATUS_L     (107),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (86),
		.OUT_PKT_BURST_TYPE_L          (85),
		.OUT_PKT_ORI_BURST_SIZE_L      (109),
		.OUT_PKT_ORI_BURST_SIZE_H      (111),
		.OUT_ST_DATA_W                 (112),
		.ST_CHANNEL_W                  (16),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) audio_in_dma_descriptor_slave_to_nios2_gen2_0_data_master_rsp_width_adapter (
		.clk                  (clk_0_clk_clk),                                                                                 //       clk.clk
		.reset                (nios2_gen2_0_reset_reset_bridge_in_reset_reset),                                                // clk_reset.reset
		.in_valid             (rsp_demux_010_src0_valid),                                                                      //      sink.valid
		.in_channel           (rsp_demux_010_src0_channel),                                                                    //          .channel
		.in_startofpacket     (rsp_demux_010_src0_startofpacket),                                                              //          .startofpacket
		.in_endofpacket       (rsp_demux_010_src0_endofpacket),                                                                //          .endofpacket
		.in_ready             (rsp_demux_010_src0_ready),                                                                      //          .ready
		.in_data              (rsp_demux_010_src0_data),                                                                       //          .data
		.out_endofpacket      (audio_in_dma_descriptor_slave_to_nios2_gen2_0_data_master_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (audio_in_dma_descriptor_slave_to_nios2_gen2_0_data_master_rsp_width_adapter_src_data),          //          .data
		.out_channel          (audio_in_dma_descriptor_slave_to_nios2_gen2_0_data_master_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (audio_in_dma_descriptor_slave_to_nios2_gen2_0_data_master_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (audio_in_dma_descriptor_slave_to_nios2_gen2_0_data_master_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (audio_in_dma_descriptor_slave_to_nios2_gen2_0_data_master_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                                         // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (175),
		.IN_PKT_ADDR_L                 (144),
		.IN_PKT_DATA_H                 (127),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (143),
		.IN_PKT_BYTEEN_L               (128),
		.IN_PKT_BYTE_CNT_H             (186),
		.IN_PKT_BYTE_CNT_L             (182),
		.IN_PKT_TRANS_COMPRESSED_READ  (176),
		.IN_PKT_TRANS_WRITE            (178),
		.IN_PKT_BURSTWRAP_H            (189),
		.IN_PKT_BURSTWRAP_L            (187),
		.IN_PKT_BURST_SIZE_H           (192),
		.IN_PKT_BURST_SIZE_L           (190),
		.IN_PKT_RESPONSE_STATUS_H      (216),
		.IN_PKT_RESPONSE_STATUS_L      (215),
		.IN_PKT_TRANS_EXCLUSIVE        (181),
		.IN_PKT_BURST_TYPE_H           (194),
		.IN_PKT_BURST_TYPE_L           (193),
		.IN_PKT_ORI_BURST_SIZE_L       (217),
		.IN_PKT_ORI_BURST_SIZE_H       (219),
		.IN_ST_DATA_W                  (220),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (78),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (84),
		.OUT_PKT_BURST_SIZE_L          (82),
		.OUT_PKT_RESPONSE_STATUS_H     (108),
		.OUT_PKT_RESPONSE_STATUS_L     (107),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (86),
		.OUT_PKT_BURST_TYPE_L          (85),
		.OUT_PKT_ORI_BURST_SIZE_L      (109),
		.OUT_PKT_ORI_BURST_SIZE_H      (111),
		.OUT_ST_DATA_W                 (112),
		.ST_CHANNEL_W                  (16),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) jtagdebug_descriptor_slave_to_nios2_gen2_0_data_master_rsp_width_adapter (
		.clk                  (clk_0_clk_clk),                                                                              //       clk.clk
		.reset                (nios2_gen2_0_reset_reset_bridge_in_reset_reset),                                             // clk_reset.reset
		.in_valid             (rsp_demux_011_src0_valid),                                                                   //      sink.valid
		.in_channel           (rsp_demux_011_src0_channel),                                                                 //          .channel
		.in_startofpacket     (rsp_demux_011_src0_startofpacket),                                                           //          .startofpacket
		.in_endofpacket       (rsp_demux_011_src0_endofpacket),                                                             //          .endofpacket
		.in_ready             (rsp_demux_011_src0_ready),                                                                   //          .ready
		.in_data              (rsp_demux_011_src0_data),                                                                    //          .data
		.out_endofpacket      (jtagdebug_descriptor_slave_to_nios2_gen2_0_data_master_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (jtagdebug_descriptor_slave_to_nios2_gen2_0_data_master_rsp_width_adapter_src_data),          //          .data
		.out_channel          (jtagdebug_descriptor_slave_to_nios2_gen2_0_data_master_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (jtagdebug_descriptor_slave_to_nios2_gen2_0_data_master_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (jtagdebug_descriptor_slave_to_nios2_gen2_0_data_master_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (jtagdebug_descriptor_slave_to_nios2_gen2_0_data_master_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                                                      // (terminated)
	);

	nios_tester_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (10),
		.inUsePackets    (0),
		.inDataWidth     (10),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (10),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter (
		.in_clk_0_clk   (clk_0_clk_clk),                                         // in_clk_0.clk
		.in_rst_0_reset (nios2_gen2_0_reset_reset_bridge_in_reset_reset),        // in_rst_0.reset
		.in_0_data      (io_bridge_1_avalon_slave_0_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (io_bridge_1_avalon_slave_0_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (io_bridge_1_avalon_slave_0_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_out_0_data),                          //    out_0.data
		.out_0_valid    (avalon_st_adapter_out_0_valid),                         //         .valid
		.out_0_ready    (avalon_st_adapter_out_0_ready),                         //         .ready
		.out_0_error    (avalon_st_adapter_out_0_error)                          //         .error
	);

	nios_tester_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_001 (
		.in_clk_0_clk   (clk_0_clk_clk),                                          // in_clk_0.clk
		.in_rst_0_reset (nios2_gen2_0_reset_reset_bridge_in_reset_reset),         // in_rst_0.reset
		.in_0_data      (avalon2mem_0_avalon_slave_0_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (avalon2mem_0_avalon_slave_0_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (avalon2mem_0_avalon_slave_0_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_001_out_0_data),                       //    out_0.data
		.out_0_valid    (avalon_st_adapter_001_out_0_valid),                      //         .valid
		.out_0_ready    (avalon_st_adapter_001_out_0_ready),                      //         .ready
		.out_0_error    (avalon_st_adapter_001_out_0_error)                       //         .error
	);

	nios_tester_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_002 (
		.in_clk_0_clk   (clk_0_clk_clk),                                    // in_clk_0.clk
		.in_rst_0_reset (nios2_gen2_0_reset_reset_bridge_in_reset_reset),   // in_rst_0.reset
		.in_0_data      (jtag_0_avalon_slave_0_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (jtag_0_avalon_slave_0_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (jtag_0_avalon_slave_0_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_002_out_0_data),                 //    out_0.data
		.out_0_valid    (avalon_st_adapter_002_out_0_valid),                //         .valid
		.out_0_ready    (avalon_st_adapter_002_out_0_ready),                //         .ready
		.out_0_error    (avalon_st_adapter_002_out_0_error)                 //         .error
	);

	nios_tester_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_003 (
		.in_clk_0_clk   (clk_0_clk_clk),                                    // in_clk_0.clk
		.in_rst_0_reset (nios2_gen2_0_reset_reset_bridge_in_reset_reset),   // in_rst_0.reset
		.in_0_data      (jtag_1_avalon_slave_0_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (jtag_1_avalon_slave_0_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (jtag_1_avalon_slave_0_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_003_out_0_data),                 //    out_0.data
		.out_0_valid    (avalon_st_adapter_003_out_0_valid),                //         .valid
		.out_0_ready    (avalon_st_adapter_003_out_0_ready),                //         .ready
		.out_0_error    (avalon_st_adapter_003_out_0_error)                 //         .error
	);

	nios_tester_mm_interconnect_0_avalon_st_adapter #(
		.inBitsPerSymbol (10),
		.inUsePackets    (0),
		.inDataWidth     (10),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (10),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_004 (
		.in_clk_0_clk   (clk_0_clk_clk),                                         // in_clk_0.clk
		.in_rst_0_reset (nios2_gen2_0_reset_reset_bridge_in_reset_reset),        // in_rst_0.reset
		.in_0_data      (io_bridge_0_avalon_slave_0_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (io_bridge_0_avalon_slave_0_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (io_bridge_0_avalon_slave_0_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_004_out_0_data),                      //    out_0.data
		.out_0_valid    (avalon_st_adapter_004_out_0_valid),                     //         .valid
		.out_0_ready    (avalon_st_adapter_004_out_0_ready),                     //         .ready
		.out_0_error    (avalon_st_adapter_004_out_0_error)                      //         .error
	);

	nios_tester_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_005 (
		.in_clk_0_clk   (clk_0_clk_clk),                                  // in_clk_0.clk
		.in_rst_0_reset (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (audio_out_dma_csr_agent_rdata_fifo_src_data),    //     in_0.data
		.in_0_valid     (audio_out_dma_csr_agent_rdata_fifo_src_valid),   //         .valid
		.in_0_ready     (audio_out_dma_csr_agent_rdata_fifo_src_ready),   //         .ready
		.out_0_data     (avalon_st_adapter_005_out_0_data),               //    out_0.data
		.out_0_valid    (avalon_st_adapter_005_out_0_valid),              //         .valid
		.out_0_ready    (avalon_st_adapter_005_out_0_ready),              //         .ready
		.out_0_error    (avalon_st_adapter_005_out_0_error)               //         .error
	);

	nios_tester_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_006 (
		.in_clk_0_clk   (clk_0_clk_clk),                                  // in_clk_0.clk
		.in_rst_0_reset (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (audio_in_dma_csr_agent_rdata_fifo_src_data),     //     in_0.data
		.in_0_valid     (audio_in_dma_csr_agent_rdata_fifo_src_valid),    //         .valid
		.in_0_ready     (audio_in_dma_csr_agent_rdata_fifo_src_ready),    //         .ready
		.out_0_data     (avalon_st_adapter_006_out_0_data),               //    out_0.data
		.out_0_valid    (avalon_st_adapter_006_out_0_valid),              //         .valid
		.out_0_ready    (avalon_st_adapter_006_out_0_ready),              //         .ready
		.out_0_error    (avalon_st_adapter_006_out_0_error)               //         .error
	);

	nios_tester_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_007 (
		.in_clk_0_clk   (clk_0_clk_clk),                                  // in_clk_0.clk
		.in_rst_0_reset (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (jtagdebug_csr_agent_rdata_fifo_src_data),        //     in_0.data
		.in_0_valid     (jtagdebug_csr_agent_rdata_fifo_src_valid),       //         .valid
		.in_0_ready     (jtagdebug_csr_agent_rdata_fifo_src_ready),       //         .ready
		.out_0_data     (avalon_st_adapter_007_out_0_data),               //    out_0.data
		.out_0_valid    (avalon_st_adapter_007_out_0_valid),              //         .valid
		.out_0_ready    (avalon_st_adapter_007_out_0_ready),              //         .ready
		.out_0_error    (avalon_st_adapter_007_out_0_error)               //         .error
	);

	nios_tester_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_008 (
		.in_clk_0_clk   (clk_0_clk_clk),                                           // in_clk_0.clk
		.in_rst_0_reset (nios2_gen2_0_reset_reset_bridge_in_reset_reset),          // in_rst_0.reset
		.in_0_data      (nios2_gen2_0_debug_mem_slave_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (nios2_gen2_0_debug_mem_slave_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (nios2_gen2_0_debug_mem_slave_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_008_out_0_data),                        //    out_0.data
		.out_0_valid    (avalon_st_adapter_008_out_0_valid),                       //         .valid
		.out_0_ready    (avalon_st_adapter_008_out_0_ready),                       //         .ready
		.out_0_error    (avalon_st_adapter_008_out_0_error)                        //         .error
	);

	nios_tester_mm_interconnect_0_avalon_st_adapter_009 #(
		.inBitsPerSymbol (130),
		.inUsePackets    (0),
		.inDataWidth     (130),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (130),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_009 (
		.in_clk_0_clk   (clk_0_clk_clk),                                             // in_clk_0.clk
		.in_rst_0_reset (nios2_gen2_0_reset_reset_bridge_in_reset_reset),            // in_rst_0.reset
		.in_0_data      (audio_out_dma_descriptor_slave_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (audio_out_dma_descriptor_slave_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (audio_out_dma_descriptor_slave_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_009_out_0_data),                          //    out_0.data
		.out_0_valid    (avalon_st_adapter_009_out_0_valid),                         //         .valid
		.out_0_ready    (avalon_st_adapter_009_out_0_ready),                         //         .ready
		.out_0_error    (avalon_st_adapter_009_out_0_error)                          //         .error
	);

	nios_tester_mm_interconnect_0_avalon_st_adapter_009 #(
		.inBitsPerSymbol (130),
		.inUsePackets    (0),
		.inDataWidth     (130),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (130),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_010 (
		.in_clk_0_clk   (clk_0_clk_clk),                                            // in_clk_0.clk
		.in_rst_0_reset (nios2_gen2_0_reset_reset_bridge_in_reset_reset),           // in_rst_0.reset
		.in_0_data      (audio_in_dma_descriptor_slave_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (audio_in_dma_descriptor_slave_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (audio_in_dma_descriptor_slave_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_010_out_0_data),                         //    out_0.data
		.out_0_valid    (avalon_st_adapter_010_out_0_valid),                        //         .valid
		.out_0_ready    (avalon_st_adapter_010_out_0_ready),                        //         .ready
		.out_0_error    (avalon_st_adapter_010_out_0_error)                         //         .error
	);

	nios_tester_mm_interconnect_0_avalon_st_adapter_009 #(
		.inBitsPerSymbol (130),
		.inUsePackets    (0),
		.inDataWidth     (130),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (130),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_011 (
		.in_clk_0_clk   (clk_0_clk_clk),                                         // in_clk_0.clk
		.in_rst_0_reset (nios2_gen2_0_reset_reset_bridge_in_reset_reset),        // in_rst_0.reset
		.in_0_data      (jtagdebug_descriptor_slave_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (jtagdebug_descriptor_slave_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (jtagdebug_descriptor_slave_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_011_out_0_data),                      //    out_0.data
		.out_0_valid    (avalon_st_adapter_011_out_0_valid),                     //         .valid
		.out_0_ready    (avalon_st_adapter_011_out_0_ready),                     //         .ready
		.out_0_error    (avalon_st_adapter_011_out_0_error)                      //         .error
	);

	nios_tester_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_012 (
		.in_clk_0_clk   (clk_0_clk_clk),                                  // in_clk_0.clk
		.in_rst_0_reset (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (onchip_memory2_0_s1_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (onchip_memory2_0_s1_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (onchip_memory2_0_s1_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_012_out_0_data),               //    out_0.data
		.out_0_valid    (avalon_st_adapter_012_out_0_valid),              //         .valid
		.out_0_ready    (avalon_st_adapter_012_out_0_ready),              //         .ready
		.out_0_error    (avalon_st_adapter_012_out_0_error)               //         .error
	);

	nios_tester_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_013 (
		.in_clk_0_clk   (clk_0_clk_clk),                                  // in_clk_0.clk
		.in_rst_0_reset (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (pio_0_s1_agent_rdata_fifo_src_data),             //     in_0.data
		.in_0_valid     (pio_0_s1_agent_rdata_fifo_src_valid),            //         .valid
		.in_0_ready     (pio_0_s1_agent_rdata_fifo_src_ready),            //         .ready
		.out_0_data     (avalon_st_adapter_013_out_0_data),               //    out_0.data
		.out_0_valid    (avalon_st_adapter_013_out_0_valid),              //         .valid
		.out_0_ready    (avalon_st_adapter_013_out_0_ready),              //         .ready
		.out_0_error    (avalon_st_adapter_013_out_0_error)               //         .error
	);

	nios_tester_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_014 (
		.in_clk_0_clk   (clk_0_clk_clk),                                  // in_clk_0.clk
		.in_rst_0_reset (nios2_gen2_0_reset_reset_bridge_in_reset_reset), // in_rst_0.reset
		.in_0_data      (pio_1_s1_agent_rdata_fifo_src_data),             //     in_0.data
		.in_0_valid     (pio_1_s1_agent_rdata_fifo_src_valid),            //         .valid
		.in_0_ready     (pio_1_s1_agent_rdata_fifo_src_ready),            //         .ready
		.out_0_data     (avalon_st_adapter_014_out_0_data),               //    out_0.data
		.out_0_valid    (avalon_st_adapter_014_out_0_valid),              //         .valid
		.out_0_ready    (avalon_st_adapter_014_out_0_ready),              //         .ready
		.out_0_error    (avalon_st_adapter_014_out_0_error)               //         .error
	);

	nios_tester_mm_interconnect_0_avalon_st_adapter_001 #(
		.inBitsPerSymbol (34),
		.inUsePackets    (0),
		.inDataWidth     (34),
		.inChannelWidth  (0),
		.inErrorWidth    (0),
		.inUseEmptyPort  (0),
		.inUseValid      (1),
		.inUseReady      (1),
		.inReadyLatency  (0),
		.outDataWidth    (34),
		.outChannelWidth (0),
		.outErrorWidth   (1),
		.outUseEmptyPort (0),
		.outUseValid     (1),
		.outUseReady     (1),
		.outReadyLatency (0)
	) avalon_st_adapter_015 (
		.in_clk_0_clk   (clk_0_clk_clk),                                     // in_clk_0.clk
		.in_rst_0_reset (nios2_gen2_0_reset_reset_bridge_in_reset_reset),    // in_rst_0.reset
		.in_0_data      (spi_0_spi_control_port_agent_rdata_fifo_src_data),  //     in_0.data
		.in_0_valid     (spi_0_spi_control_port_agent_rdata_fifo_src_valid), //         .valid
		.in_0_ready     (spi_0_spi_control_port_agent_rdata_fifo_src_ready), //         .ready
		.out_0_data     (avalon_st_adapter_015_out_0_data),                  //    out_0.data
		.out_0_valid    (avalon_st_adapter_015_out_0_valid),                 //         .valid
		.out_0_ready    (avalon_st_adapter_015_out_0_ready),                 //         .ready
		.out_0_error    (avalon_st_adapter_015_out_0_error)                  //         .error
	);

endmodule
